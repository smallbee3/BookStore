[Ch5 Hash table, 해시 테이블]


02 Hash function, 해시 함수 p.101
해시 함수는 문자열을 받아서 숫자를 반환하는 함수입니다.
기술 용어로 말하면 해시 함수는 문자열에 대해 숫자를 할당(mapping)합니다. 문자열을 넣었을 때 나오는 숫자들에 특정한 패턴이 보이지 않는 것 같지만, 사실 해시 함수는 다음과 같은 요건을 갖추어야 합니다.


p.104
해시 함수는 여러분의 배열이 얼마나 큰지 알고 있어야 하며, 유효한 인덱스만 반환해야 합니다.
...


* Hash table, 해시 테이블 p.104
해시 함수와 배열을 합치면 해시 테이블(hash table)이라고 하는 자료구조를 얻을 수 있습니다. 해시 테이블은 여러분이 배우는 자료구조 중에서 자료구조 그 자체 외에도 해시 함수라는 추가적인 논리구조를 가지는 첫 번째 자료구조입니다. 배열과 리스트는 직접 메모리를 할당하지만, 해시 테이블은 해시 함수를 사용해서 더 총명하게 어디에 원소를 저장할 지 결정합니다.
...
해시 테이블은 해시 맵(hash maps), 맵(maps), 딕셔너리(dictionaries), 연관 배열(associative arrays)이라는 이름으로도 알려져 있습니다.
무엇보다 해시 테이블은  속도가 빠릅니다! 2장에서 배웠던 배열과 연결 리스트에 대한 내용을 기억하시나요? 배열에서는 원소를 순간적으로 얻을 수 있었죠. 해시 테이블도 자료를 저장할 때 배열을 사용하며, 마찬가지로 속도도 빠릅니다.


* 해시 테이블을 캐시로 사용하기 p.113
cache = {}
def get_page(url):
	# 해시 테이블에 저장된 페이지가 있는지 확인
	if cache.get(url):
		return cache[url]
	else:
		data = get_data_from_server(url)
		# 자료를 반환하기 전에 캐시에 저장
		cache[url] = data
		return data


* 해시 테이블의 장점
- 어떤 것과 다른 것 사이의 관계를 모형화할 수 있습니다.
- 중복을 막을 수 있습니다.
- 서버에게 작업을 시키지 않고 자료를 캐싱할 수 있습니다.


p.116
이런, 이곳에는 Apples가 이미 공간을 차지하고 있습니다! 어떻게 해야 할까요? 이런 것을 충돌(collision)이라고 합니다. 두 개의 키가 같은 공간에 할당되는 거죠.






p.118
05 성능

평균적인 경우에 해시 테이블은 모든 항목에 대해 O(1)시간이 걸립니다 O(1)은 상수시간(constant time)이라고 불립니다. 전에는 상수 시간이라는 것이 없었죠. 상수 시간은 순간적이라는 뜻이 아니라 해시 테이블의 크기에 상관없이 항상 똑같은 시간이 걸린다는 의미입니다.

* 해시 테이블의 성능
	평균적인 경우	최악의 경우
탐색	O(1)	O(n)
삽입	O(1)	O(n)
삭제	O(1)	O(n)

	평균	최악	배열	리스트
탐색	O(1)	O(n)	O(1)	O(n)
삽입	O(1)	O(n)	O(n)	O(1)
삭제	O(1)	O(n)	O(n)	O(1)



5장에서 배운 내용

여러분이 스스로 해시 테이블을 구현할 일은 거의 없을 겁니다. 여러분이 사용하는 프로그래밍 언어들이 구현되어 있는 해시 테이블을 제공하기 때문이죠. 파이썬의 해시 테이블을 사용할 수도 있습니다. 평균적인 경우에 해시 테이블의 성능은 상수 시간입니다.

해시 테이블은 속도가 빠르고 자료를 여러 가지로 모형화 할 수 있기 때문에 아주 강력한 자료구조입니다. 아마도 항상 해시 테이블을 사용하고 있는 자신의 모습을 발견하게 될 겁니다.

- 해시 테이블은 해시 함수와 배열을 결합해서 만듭니다.
- 충돌은 나쁩니다. 충돌을 줄이는 해시 함수가 있어야 합니다.
- 해시 테이블은 정말 빠른 탐색, 삽입, 삭제 속도를 가집니다.
- 해시 테이블은 어던 항목과 다른 항목의 관계를 모형화하는데 좋습니다.
- 사용률이 0.7보다 커지면 해시 테이블을 리사이징할 때입니다.
- 해시 테이블은 (웹 서버 등에서) 데이터를 캐싱하는 데도 사용됩니다.
- 해시 테이블은 중복을 잡아내는 데도 뛰어납니다.
