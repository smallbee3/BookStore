[Ch9 Dynamic Programming]

p.220
... 동적 프로그래밍은 하위의 작은 문제들을 풀고, 이를 이용해서 더 큰 문제를 풀어나가는 방법입니다. 배낭 채우기 문제에서는 더 작은 배낭, 즉 하위 배낭(sub-knapsack)에 대한 문제를 풀고 이를 이용해서 원래의 문제를 풀어나갑니다.
...
모든 동적 프로그래밍 알고리즘은 격자(grid)로 부터 시작합니다. 다음은 배낭 채우기 문제에 대한 격자입니다.

			열은 1파운드부터 4파운드까지의 배낭 크기를 나타낸다.
				1	2	3	4
각각의	기타
행은
선택할	스테레오
물건을
나타낸다.	노트북

격자의 각 행은 물건을 나타내고, 각 열은 1파운드부터 4파운드까지 물건을 담을 수 있는 다른 크기의 배낭을 나타냅니다.
...
왜 4파운드자리 배낭 문제를 풀면서 1파운드나 2파운드 배낭을 생각하고 있는지 궁금할 수도 있을거예요. 동적 프로그래밍 문제는 작은 문제부터 시작해서 더 커다란 문제를 풀어나간다고 이야기 했었죠? 지금 여러분이 바로 큰 문제를 풀기 위한 작은 문제들을 풀고 있는 겁니다. 계속 읽어나가다 보면 점점 더 명확하게 이해될 거예요.

...
다시 한 번 말하자면 여러분은 배낭 안에 있는 모든 물건의 총 가치를 최대화하려고 하고 있습니다. 이 행은 현재 시점에서 총 가치를 최대화 하기 위한 최선의 선택을 나타냅니다. 이 행의 결과를 보면 4파운드 배낭에서 가질 수 있는 최대값은 1,500달러입니다.


p.228
각 칸의 가치는 모두 다음과 같은 공식으로 동일하게 계산할 수 있습니다.

CELL[i][j]의 최대값
1. 지금까지 구한  cell[i-1][j]의 값 중에서 가장 최대값 또는
2. 현재 물건의 가치 + 남은 공간의 가치(cell[i-1][j-물건의무게]


p.230
만약 물건이 추가되면 어떻게 되나요?
... 새로운 물건이 추가되면 문제를 처음부터 다시 풀어야 할까요? 그렇지 않습니다. 여러분이 기억하듯이 동적 프로그래밍은 점진적으로 답을 수정해 나가는 방법이죠.

질문: 열의 최대값이 더 작아지는 경우가 있을 수 있을까요?
정답: 아니요. 매번 현재의 최대 가치를 저장해 놓고 비교해 보기 때문에 답이 이전의 값보다 더 나빠지는 경우는 있을 수 없습니다.



만약 행의 순서가 바뀌면 어떻게 되나요?
답이 바뀔까요? 만약 행을 스테레오, 노트북, 기타의 순서로 놓았다고 가정해 보세요.
...
답은 바뀌지 않습니다. 즉, 행의 순서에는 영향을 받지 않습니다.



격자를 행 방향이 아니라 열 방향으로 채워도 되나요?
한 번 스스로 진행해 보세요! 이 경우에는 아무런 차이도 없습니다. 다만, 다른 문제에서는 달라질 수도 있습니다.



만약 더 작은 물건을 추가하면 어떻게 되나요?
...
목걸이가 있으면 배낭의 종류를 더 세분화해야 합니다.



물건의 일부만 훔칠 수도 있나요?
...
가게에는 콩 주머니와 쌀 주머니가 있습니다. 만약 주머니가 배낭에 다 들어가지 않는다면 주머니에서 콩이나 쌀을 필요한 만큼 꺼내서 담을 수 있습니다. 즉 전체를 훔치는 것이 아니라 일부만 훔칠 수도 있는 거죠. 이런 상황을 동적 프로그래밍으로 어떻게 다룰까요?

답: 할 수 없습니다. 동적 프로그래밍으로 풀 수 있는 것은 물건 하나를 통으로 훔치든가, 아예 훔치지 않든가 하는 문제뿐입니다. 물건을 반으로 나눈다거나 하는 경우는 풀 수 없습니다.
하지만 이 경우는 탐욕 알고리즘으로 쉽게 풀 수 있죠! 우선 가장 값이 나가는 것을 담을 수 있을 만큼 담습니다. 그러고도 배낭에 공간이 남는다면 그 다음으로 값진 물건을 담고, 그 다음에는 같은 방식으로 반복하면 됩니다.
...



서로 의존적인 물건을 다루는 방법
...
이 문제는 풀 수 없습니다. 동적 프로그래밍은 문제를 더 작은 하위 문제로 풀고, 이 하위 문제를 푼 결과를 이용해서 더 큰 문제를 푸는 방법입니다. 그래서 강력합니다. 하지만 동적 프로그래밍은 각 하위 문제들이 서로 관계가 없을 때, 즉 서로 의존하지 않는 경우에만 쓸 수 있습니다. ...


하위 배낭이 두 개 이상인 경우도 있을 수 있나요?
두 개 이상의 물건을 훔치는 경우에는 하위 배낭이 두 개 이상일 수도 있습니다. 기본적으로 여러분은 최대 두 개의 배낭을 합칠 수 있습니다. 하지만 그 배낭 중의 하나가 두 개의 더 작은 배낭으로 이루어져 있을 수도 있죠.



p.240
03 최장 공통 부분 문자열, Longest Common Substirng(LCS)
- 동적 프로그래밍은 어떤 제한 조건이 주어졌을 때 무언가를 최적화하는 경우에 유용합니다. 배낭 채우기 문제에서는 배낭의 크기가 제한 조건이었고, 이때 훔칠 물건의 총 가치를 최대화하는 것이 목표였습니다.
- 동적 프로그래밍은 하위 문제가 서로 의존하지 않는 경우에만 사용할 수 있습니다.


*모든 동적 프로그래밍의 답안에는 격자가 있습니다.
*격자의 각 칸에는 최적화하고자 하는 값을 적습니다. 배낭 문제의 경우에는 모든 물건의 총 가치를 썼습니다.
*각 칸은 원래 문제에 대한 하위 문제이고, 다른 문제를 하위 문제로 가질 수 있습니다. 그러니까 원래의 문제를 어떻게 하위 문제로 나눌 수 있을지 생각해야 합니다. 그러면 각각의 축이 어떻게 되어야 하는지 알아내는 데 도움이 됩니다.


격자 만들기
이 문제의 격자는 어떻게 생겼을까요? 우선 다음과 같은 질문에 답해봐야 합니다.
* 각 칸에 넣을 숫자는 무엇입니까?
* 이 문제를 어떻게 하위 문제로 나눌 수 있을까요?
* 격자의 축은 무엇입니까?




9장에서 배운 내용
* 동적 프로그래밍은 제한 조건이 있는 경우에 무언가를 최적화할 때 유용합니다.
* 동적 프로그래밍은 큰 문제를 작은 하위 문제로 나누어 푸는 방법입니다.
* 동적 프로그래밍을 풀 때는 격자를 사용합니다.
* 보통 격자의 각 칸에는 최적화하려는 값을 씁니다.
* 격자의 각 칸은 하위 문제를 뜻합니다. 그러므로 원래의 문제를 어떻게 하위 문제로 나눌 수 있는지 생각해야 합니다.
* 동적 프로그래밍의 해답을 계산해 주는 쉬운 공식 같은 것은 없습니다.
