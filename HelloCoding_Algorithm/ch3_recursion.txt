[Ch3 Recurion, 재귀]

03 base Case & Recursive Case

p.49
def find_key(box):
	for item in box:
	    if item.is_a_box():
	        find_key(box)
	    elif item.is_a_key():
	        return key
	    else:
	        "there isn't key"


p.51
while
def look_for_key(main_box):
	pile = main_box.make_a_pile_to_look_through()
	while pile is not empty:
		box = pile.grab_a_box()
		for item in box:
			if item.is_a_box():
				pile.append(item)
			elif item.is_a_key():
				print('열쇠를 찾았어요')
recursion
def look_for_key(box):
	for item in box:
		if item.is_a_box():
			look_for_key(item)
		elif item.is_a_key():
			print('열쇠를 찾았어요')


p.54
재귀 함수 = 기본 단계 + 재귀 단계
recursive func = base case + recursive case

181027
재귀 함수를 만들 때는 언제 재귀를 멈출지 알려줘야 합니다. 그래서 모든 재귀 함수는 기본 단계(base case)와 재귀단계(recursive case)라는 두 부분으로 나누어져 있습니다.  재귀 단계는 함수가 자기 자신을 호출하는 부분입니다. 기본 단계는 함수가 자기 자신을 다시 호출하지 않는 경우, 즉 무한 반복으로 빠져들지 않게 하는 부분입니다.
 -> 일단 재귀함수를 작성할 때는 return문 두개 (하나는 기본 단계, 다른 하나는 재귀 단계)가 필요하다고 생각하고 구조를 생각하면 좀 더 쉽게 문제를 해결할 수 있을 것 같다. (물론 return문이 두개가 아닌 재귀함수가 있을 수도 있겠지...)


04 Stack

p.55, 56
... 항목을 읽을 때는 가장 위에 있는 항목만 읽고 떼어낼 수 있습니다. 그러니까 푸시(push, 입력)와 팝(pop, 떼어내고 읽기) 두 가지 일만 할 수 있는 것이죠.
...



호출 스택
컴퓨터는 호출 스택이라고 불리는 스택을 사용합니다.
...

def greet(name):
	print('hello {name}')
	greet2(name)
	print('getting ready to say bye')
	bye()

p.58
... 사실 greet2 함수를 호출하였을 때  greet 함수는 아직 완전히 실행되지 않은 상태였습니다. 이 부분이 가장 중요한 이야기입니다. 여러분이 어떤 함수를 호출하여 완전히 실행을 완료하기 전이라도 그 함수를 잠시 멈추고 다른 함수를 호출할 수 있습니다. 중지된 함수의 변수 값들은 모두 메모리에 저장되어 있습니다. greet2 함수의 실행을 완료하고 나면 greet 함수로 돌아가 멈추었던 위치에서 다시 실행할 수 있습니다. 이번에는 getting ready to say bye...라고 프린트한 다음에 bye 함수를 실행합니다.
...
이런 방식으로 여러 개의 함수를 호출하면서 함수에 사용되는 변수를 저장하는 스택을 호출 스택(call stack)이라고 합니다.


p.59
재귀 함수에서 호출 스택 사용
재귀 함수도 호출 스택을 사용합니다!


p.61
...
fact 함수에 대한 각각의 호출이 자기만의 x값을 사본을 가지고 있다는 사실에 주의하세요. 서로 다른 함수 호출에 대한 x값에 접근할 수 없습니다.


p.64
스택을 사용하면 편리하기는 하지만 그만큼의 대가를 치러야 합니다. 모든 정보를 저장해야 하므로 메모리를 많이 소모하죠. 함수 호출을 할 때마다 메모리를 사용하게 됩니다. 스택이 너무 커졌다는 것은 컴퓨터가 과다한 함수 호출 정보를 저장하고 있다는 뜻입니다. 이렇게 되면 선택할 수 있는 방법이 두 가지 있습니다.

1. 재귀 대신 반복문을 써서 코드를 다시 작성할 수 있습니다.
2. 꼬리 재귀(tail recursion)라는 방법을 사용할 수 있습니다. 이 방법은 이 책에서 다루지 않는 고급 재귀 방법으로 모든 프로그래밍 언어에서 지원하는 것은 아닙니다.



p.296
302
... 컴퓨터는 함수 호출 때마다 스택에 메모리를 할당합니다.

>> ... 모든 프로그램은 호출 스택에 할당할 수 있는 공간이 제한되어 있기 때문에 이 공간을 모두 사용하면 스택 오버플로우 오류(stackoverflow error)가 발생하며 종료됩니다.



--------------------------------

* factorial function

def factorial_func(num):
	result = result * num
	if num < 1:
		return result
	else:
		factorial_func(num - 1)


def factorial_func(num):
	if num == 1:
		return 1
	if num < 1:
		return result
	else:
		return num * factorial_func(num-1)


def factorial_func(num):
    if num == 1:
        return 1
    # if num > 1:
    else:
        return num * factorial_func(num-1)

print(factorial_func(100))
> 120


181125
factorial for both positive and negative numbers
def factorial(num):
    if num > 0:
        if num == 1:
            return num
        else:
            return num * factorial(num - 1)
    else:
        if num == -1:
            return num
        else:
            return num * factorial(num+1) if num < 0 else factorial(-(num-1))

print(factorial(-4))
