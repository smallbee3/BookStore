[Ch11 Binary Search Tree]


p.152
* 트리, Tree
거꾸로 가는 간선이 없는 특별한 종류의 그래프

p.270
... 거대한 배열에서 지금 로그인한 사용자의 이름이 있는지 찾아봅니다. 이때 가장 빠른 방법은 이진 탐색을 사용하는 것이라고 말했습니다. 하지만 문제가 하나 있습니다. 새로운 사용자가 등록하면 그 이름을 배열에 넣어야 하고 그러기 위해서는 배열을 다시 정렬해야 합니다. 왜냐하면 이진 탐색은 정렬된 배열에 대해서만 쓸 수 있으니까요. 사용자 이름을 올바른 위치에 바로 넣을 수 있다면 얼마나 좋을까요? 그러며 굳이 다시 정렬할 필요가 없잖아요. 그래서 이진 탐색 트리(binary search tree)라는 자료구조가 만들어지게 되었습니다.


...
이진 탐색을 사용하는 것과 거의 동일합니다. 이진 탐색 트리에서 항목을 찾으려면 평균적으로 O(log n)시간이 걸리고, 최악의 경우에 O(n) 시간이 걸립니다. 정렬된 배열에서는 최악의 경우에도 O(log n) 시간이 걸립니다. 결과적으로 정렬된 배열이 더 낫긴 하지만, 이진 탐색 트리는 항목을 삽입하거나 삭제할 때도 평균적으로 훨씬 빠릅니다.

	배열	이진 탐색 트리
탐색	O(log n)	O(log n)
삽입	O(n)	O(log n)
삭제	O(n)	O(log n)
임의접근	O	X

...
이진 탐색  트리에도 몇 가지 단점이 있습니다. 하나느나 임의 접근(random access)을 할 수 없다는 것입니다. 예를 들어, "이 트리의 5번째 원소를 주세요."라고 말할 수 없습니다. 또 평균적인 성능이 트리가 얼마나 균형 잡혀있는가에 따라 달라집니다. 예를 들어 다음과 같이 불균형한 트리를 가진 경우를 보죠.

오른쪽으로 치우쳐 있죠? 이 트리는 균형이 맞지 않아 성능이 그다지 좋지 않습니다. 반면에 스스로 균형을 맞추는 특별한 이진 탐색 트리도 있죠. 한 예로 레드-블랙 트리(red-black tree)라는 것이 있습니다.

그럼 이러한 이진 탐색 트리는 언제 사용될까요? 이진 탐색 트리의 특별한 유형인 B-트리(B-tree)는 데이터베이스에서 데이터를 저장할 때 흔히 사용됩니다.

데이터베이스나 고급 자료구조에 관심이 있다면 다음과 같은 것들을 공부해 보세요.

* B-트리(B-trees)
* 레드-블랙 트리(red-black trees)
* 힙(heeps)
* 스플레이 트리(splay trees)
