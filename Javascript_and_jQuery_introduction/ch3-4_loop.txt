[Ch3-4 conditional statement]


p.80
... 현재 시각을 구하는 코드는 다음과 같습니다. 이는 7장에서 다시 자세히 살펴볼 것입니다.
var date = new Date();
var hour = date.getHours();


+ p.107
[code 4-13, for 반복문의 특이한 사용법]
<script>
	var startTime = new Date().getTime();
	...
</script>


p.82
... if else 조건문을 사용하면 if 조건문을 두 번 사용할 필요가 없습니다. 또한 if 조건문의 조건 하나를 처리하는 횟수가 줄어 실제 성능 향상에 조금이나마 도움이 되기도 합니다.


p.86
... default 키워드 부분은 생략 가능합니다.


p.87
break 키워드는 switch 조건문이나 반복문을 빠져나가려고 사용하는 키워드입니다.


p.88
[code 3-8, switch 조건문의 특이한 사용]

switch (true) {
	case <조건1>:
		...
		break;
	case <조건2>:
		...
		break;
	default:
		...
		break;



p.89
[삼항 연산자]
<불 표현식> ? <참일 때 실행할 문장> : <거짓일 때 실행할 문장>

[논리합 연산자를 사용한 짧은 조건문]
(<불 표현식>) || (<불 표현식이 거짓일 때 실행할 문장>)

[논리곱 연산자를 사용한 짧은 조건문]
(<불 표현식>) && (<불 표현식이 참일 때 실행할 문장>)



p.90
[짧은 조건문]
1. (<불 표현식>) || (<불 표현식이 거짓일 때 실행할 문장>)
2. (<불 표현식>) && (<불 표현식이 참일 때 실행할 문장>)




[Ch4 loop]


p.104
while 반복문이 조건에 비중을 두는 반복문이라면, for 반복문은 조건보다 횟수에 비중을 둘때 사용하는 반복문입니다. ...



p.107
반면에 요소를 반대로 출력할 수도 있습니다. 이러한 반복문을 역 for 반복문이라고 합니다. 이 형태의 for 반복문도 많이 사용되므로 기억해주세요.

[code 4-12]
    <script>
        // 변수를 선언합니다.
        var array = ['포도', '사과', '바나나', '망고'];
        // for 반복문
        for (var i = array.length - 1; i >= 0; i--) {
            alert(array[i]);
        }
    </script>



p.113
!confirm 활용
<script>
	for (var i=0; true; i++) {
	  alert(i + '번째 반복문입니다.');

	  if (!confirm('계속하시겠습니까?')) {
	    break;
	  }
	}
	alert('프로그램 종료')
</script>


p.114
break, continue !강추 ??
"break 키워드나 continue 키워드를 적당히 사용하면 정말 코드가 간결해집니다. 하지만 그런 적당한 경우는 드뭅니다. break 키워드나 continue 키워드는 반복문의  조건식을 적절하게 만들면 사용할 필요가 없습니다. 처음 프로그래밍을 배우면 조건식이 익숙하지 않아 break 키워드나 continue 키워드를 필요 없는 부분까지 무리하게 사용하는 경향이 있습니다. break 키워드나 continue 키워드의 사용을 최대한 자제하세요."



p.116
'for of' loop + string / map / set
"...추가로 for of  반복문은 배열 이외에도 다양한 것(문자열, 맵, 세트 등)과 조합해서 사용할 수 있습니다. 이와 관련된 내용은 모질라 레퍼런스의 for...of 문에 있 는 예제를 참고하기 바랍니다."


