[Ch2 basic]

p.29
2.1.3 식별자

식별자는 자바스크립트에서 이름을 붙일 때 사용하는 단어입니다. 식별자의 예로는 변수명과 함수명이 있습니다. 식별자를 만들 때는 다음 규칙을 반드시 지켜야 합니다.
* 키워드를 사용하면 안 됩니다.
* 숫자로 시작하면 안 됩니다.
* 특수 문자는 _외 $만 허용합니다.
* 공백 문자를 포함할 수 없습니다.

e.g. (O)
alpha
alpha10
_alpha
$alpha
Alpha
ALPHA

e.g. (X)
break
273
273alpha
has space




p.36
표 2-4 자주 사용하는 이스케이프 문자
이스케이프 문자	설명
\t	수평 탭
\n	줄 바꿈
\'	작은 따옴표
\"	큰 따옴표
\\	역 슬래시



p.40
자바스크립트는 불 자료형끼리 크기 비교도 가능합니다. 이런 경우 자바스크립트는 true를 1로 변환하고 false를 0으로 변환한 뒤에 비교 연산합니다.

<scirpt>
	alert(true > false);
</script>


p.43
여러 숫자 자료형의 크기 비교 - 비교연산자 + 논리 연산자

[code 2-15]
<script>
	console.log(30 > 20 > 10);
</script>
>> false

( process
30 > 20 > 10
1 > 10
false )

이러한 문제를 해결하려면 비교 연산자와 논리 연산자를 함께 사용해야 합니다.

[code 2-16]
<script>
	console.log(30 > 20 && 20 > 10);
</script>
>> true





p.47
[code 2-22, 여러 변수를 한 번에 선언]
var radius, pi;

[code 2-23, 여러 변수의 선언과 초기화]
var radius = 10, pi = 3.14159265;


p.50
표 2-12 증감 연산자


p.56
*이항연산자 : 양쪽에 항을 써서 사용
ex)
52 + 273

*단항연산자 : 항을 하나만 사용
ex)
-52
-(-52)
typeof 52
typeof(52)


p.61
2.10 숫자와 문자열 자료형 변환
... 숫자 자료형과 문자열 자료형을 덧셈 연산할 때는 숫자 자료형을 문자열 자료형으로 자동 변환하기 때문입니다.
반면에 더하기 연산자를 제외한 사칙 연산자는 문자열 자료형을 숫자 자료형으로 자동 변환합니다.

+ p.65
>> alert('273' == 273);
True


p. 64
다음 다섯 가지 경우는 false로 변환됩니다. 이 다섯 가지를 제외한 모든 경우에 true로 변환됩니다.
Boolean(0);
Boolean(NaN);
Boolean('');
Boolean(null);
Boolean(undefined);

NOTE alert(Boolean('0'); 과 alert(Boolean('false')); 는 문자열이므로 true입니다.



p.65
일치연산자
비교 연산자(==, !=)를 사용할 때 자동으로 변환되어 뜻하지 않은 경우가 발생할 수 있습니다.
...
자동으로 자료형이 변환되는 것을 막고 원하는 자료형을 확실하게 구분 짓고 싶다면 일치 연산자를 사용합니다.


p.69
"그럼 어떤 부분을 상수로 사용해야 하나요?"
굉장히 모호한 말이겠지만, '변하지 않는 것'을 상수로 선언하면 됩니다. 초보자를 위한 사용 방법을 말하자면 "일단 모두 상수(const)로 선언해버리고, 오류가 발생하는 부분만 변수(let)로 변경한다"고 설명할 수 있습니다.


p.71
... 일반적으로 스코프 내부에 선언한 변수는 해당 변수를 생성한 이후 스코프 내부에서 사용하고, 스코프를 벗어날 때는 제거해야 메모리 등의 시스템 자원을 적절하게 이용할 수 있습니다. 하지만 자바스크립트의 var 키워드는 그렇지 못합니다. ...

반면 let 키워드는 자원을 적절하게 이용할 수 있게 특정 스코프 내부에서만 변수를 사용할 수 있도록 합니다.


p.72
Note_  var 키워드의 비동기 함수 문제
방금 소개한 var 키워드의 특성은 다양한 실수를 유발할 수 있습니다. 아직 다루지 않은 내용이지만, 자바스크립트를 개발할 때 정말 많이 발생하는 중요한 오류이므로 간단하게 살펴봅시다.
...


p.75
재선언
같은 이름으로 변수 또는 상수를 다시 선언하는 것을 '재선언'이라고 부릅니다.

코드 2-62
var variable = 52;
var variable = 273;

let variable = 52;
let variable = 273;


var 키워드로 변수를 선언할 때는 아무 문제 없습니다. 하지만 let 키워드로 변수를 선언하고 재선언하면, 다음과 같은 오류가 발생합니다.
참고로 const 키워드 예제를 보여드리지는 않았지만,  const도 재선언하면 오류가 발생합니다. 일반적으로 같은 스코프에 같은 이름의 변수를 선언하는 것은 실수일 가능성이 높기 때문에 미리 검출해 주는 것입니다.
