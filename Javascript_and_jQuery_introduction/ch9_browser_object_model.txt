[Ch9 Browser Object Model]

9.1 브라우저 관련 객체

브라우저 객체 모델(BOM, Browser Object Model)은 웹 브라우저와 관련된 객체의 집합을 의미합니다. 대표적인 브라우저 객체 모델로는 그림 9-1처럼 window, location, navigator, history, screen, document 객체가 있습니다.


window 객체
- location 객체
- navigator 객체
- history 객체
- screen 객체
- document 객체


간단하게 문서 객체 모델(DOM, Document Object Model)이라 통합해서 부르기도 하지만, 이 책에서는 그림 9-2의 document 객체와 관련된 객체의 집합을 문서 객체 모델이라고 부르고, 그 이외의 객체 집합을 브라우저 객체 모델이라고 부르겠습니다. 따라서 이 장에서 document 객체를 제외한 window, location, navigator, screen 객체를 알아보겠습니다. 객체를 정리하면 그림 9-2와 같습니다.


screen 객체 : 화면 전체와 관련된 객체
navigator 객체 : 웹 브라우저와 관련된 객체
history 객체 : 기록과 관련된 객체
location 객체 : 주소와 관련된 객체
document 객체 : HTML 문서와 관련된 객체


9.2 window 객체

window 객체의 속성과 메서드를 출력해봅시다.


[code 9-1]
<script>
    var output = '';
    for (var key in window) {
      output += '●' + key + ': ' + window[key] + '\n';
    }
    console.log(output);
</script>

>>
●postMessage: function () { [native code] }
●blur: function () { [native code] }
●focus: function () { [native code] }
●close: function () { [native code] }
●parent: [object Window]
●opener: null
●top: [object Window]



참고로 widow 객체는 자바스크립트의 브라우저 기반 최상위 객체입니다. 지금까지 함수처럼 사용한 alert(), prompt() 함수 모두 그림 9-4처럼 window 객체의 메서드입니다.

이 책에서는 단순히 객체와 함께 사용하느냐, 사용하지 않느냐에 따라 함수와 메서드를 구분합니다. 사실 자바스크립트는 두 단어를 구분할 필요가 없습니다. 참고 내용이니 "그냥 그렇구나"하고 넘어갑시다.


NOTE_ 기본 변수와 window 객체
var 키워드로 선언한 일반 변수도 모두 window 객체의 속성이 됩니다.



9.3 새로운 window 객체 생성

window 객체는 표 9-1의 메서드로 새로운 window 객체를 생성합니다.


표 9-1 window 객체의 윈도우 생성 메서드
메서드 이름	설명
open(URL, name, features, replace)	새로운 window 객체를 생성
window 객체의 open() 메서드는 네 개의 매개변수가 있습니다. 입력해도 되고 입력하지 않아도 되는 매개변수를 옵션이라고 합니다. open() 메서드의 모든 매개변수는 옵션입니다. 일단 open() 메서드의 옵션을 사용하지 않고 코드 9-2처럼 사용해봅시다.


[code 9-2]
<script>
    window.open();
</script>

코드를 실행하면 그림 9-6처럼 새로운 웹 브라우저 윈도우가 만들어집니다.
현재 예제는 별다른 옵션을 설정하지 않아 웹 브라우저별로 실행 결과의 차이가 있을 수 있습니다. open() 메서드의 모든 옵션을 사용하면 코드 9-3처럼 코드를 구성할 수 있습니다.

open() 메서드의 첫 번째 매개변수는 열고자 하는 HTML 페이지의 URL이고, 두 번째 매개변수는 윈도우 간 통신하는 데 사용하는 윈도우 이름입니다. 세 번째 매개변수는 윈도우를 어떠한 모양으로 출력할지 지정하는 옵션입니다. 세 번째 매개변수는 윈도우를 어떠한 모양으로 출력할지 지정하는 옵션입니다. 세 번째 매개변수에 사용하는 옵션은 표 9-2와 같습니다. 각 옵션은 코드 9-3처럼 입력합니다.

[code 9-3]
<script>
    window.open('http://hanbit.co.kr', 'child', 'width=600, height=300', true);
</script>


표 9-2
옵션 이름	설명	입력할 수 있는 값
height	새 윈도우의 높이	픽셀 값
width	새 윈도우의 너비	픽셀 값
location	주소 입력창의 유무	yes, no, 1, 0
menubar	메뉴의 유무	yes, no, 1, 0
resizable	화면 크기 조절 가능 여부	yes, no, 1, 0
status	상태 표시줄의 유무	yes, no, 1, 0
toolbar	상태 표시줄의 유무	yes, no, 1, 0

open() 메서드는 새로운 window 객체를 생성하는 메서드입니다. 단지 팝업창을 여는 것에서 끝나지 않고 윈도우 객체를 리턴합니다. 따라서 코드 9-4처럼 새로운 윈도우 객체에 접근해 속성과 메서드를 사용할 수 있습니다.


NOTE_ 팝업 차단
일부 웹 브라우저에서 실행할 때 웹 페이지 오류가 발생하면 팝업창 허용을 누르고 다시 실행해주세요. 다음과 같이 처리하면 오류 메시지를 제거할 수 있습니다.


[code 9-5]
<script>
    var child = window.open('', '', 'width=300, height=200');
    if (child) {
      child.document.write('<h1>From Parent Window</h1>');
    } else {
      alert('팝업 차단을 해제해주세요.');
    }
</script>

이 장의 예제들은 쉽게 설명하려고 이러한 팝업 차단 처리를 하지 않았습니다. 웹 페이지 오류 메시지가 발생해도 그러려니 하고 이해해주세요.



9.4 window 객체의 기본 메서드
window 객체는 자신의 형태와 위치를 변경할 수 있게 표 9-3의 메서드를 제공합니다.

표 9-3 window 객체의 메서드
메서드 이름	설명
moveBy(x, y)	윈도우의 위치를 상대적으로 이동
moveTo(x, y)	윈도우의 위치를 절대적으로 이동
resizeBy(x, y)	윈도우의 위치를 상대적으로 지정
resizeTo(x, y)	윈도우의 위치를 절대적으로 지정
scrollBy(x, y)	윈도우 스크롤의 위치를 상대적으로 이동
scrollTo(x, y)	윈도우 스크롤의 위치를 절대적으로 이동
focus()	윈도우에 초점을 맞춥니다
blur()	윈도우에 맞춘 초점을 제거합니다
close()	윈도우를 닫습니다

표 9-3의 OOBy() 형태의 메서드는 현재 윈도우를 기준으로 상대적으로 속성을 변화하는 메서드이며, OOTo() 형태의 메서드는 절대적인 기준으로 속성을 변화하는 메서드입니다. 코드 9-6을 살펴봅시다.


[code 9-6]
<script>
    var child = window.open('', '', 'width=300, height=200');
    child.moveTo(0, 0);

    setInterval(function () {
      child.moveBy(10, 10);
    }, 1000);
</script>

새로운 window 객체를 생성하고 왼쪽 위를 0, 0으로 위치시킵니다. 이어서 setInterval() 함수로 1초마다 왼쪽으로 10픽셀, 아래로 10픽셀씩 이동시킵니다. 코드를 실행하며 움직이는 팝업창을 볼 수 있습니다. 이제 OOBy() 형태의 메서드와 OOTo() 형태의 메서드를 쉽게 구분할 수 있을 것입니다.



9.5 screen 객체

screen 객체는 웹 브라우저의 화면이 아니라 운영체제 화면의 속성을 갖는 객체입니다. 코드 9-7로 screen 객체의 모든 속성을 출력해봅시다.

[code 9-7]
<script>
    var output = '';
    for (var key in screen) {
      output += '▲' + key + ': ' + screen[key] + '\n';
    }
    console.log(output);
</script>

모든 웹 브라우저가 공통으로 갖는 screen 객체의 속성은 표 9-4와 같습니다.

표 9-4 screen 객체의 속성
속성 이름	설명
width	화면의 너비
height	화면의 높이
availWidth	실제 화면에서 사용 가능한 너비
availHeight	실제 화면에서 사용 가능한 높이
colorDepth	사용 가능한 색상 수
pixelDepth	한 픽셀당 비트 수

가장 많이 사용하는 screen 객체의 속성은 width 속성과 height 속성입니다. 이 속성을 사용하면 손쉽게 window 객체를 화면에 꽉 차게 만들 수 있습니다.

코드 9-8은 팝업창을 생성하고 전체화면으로 만듭니다. 이어서 1초마다 크기를 변환하고 이동해 점점 가운데로 수렴합니다.


[code 9-8]
<script>
    var child = window.open('', '', 'width=300, height=200');
    var width = screen.width;
    var height = screen.height;

    child.moveTo(0, 0);
    child.resizeTo(width, height);

    setInterval(function () {
      child.resizeBy(-20, -20);
      // child.moveBy(10, 10);
    }, 1000);
</script>



9.6 location 객체

location 객체는 웹 브라우저의 주소 표시줄과 관련된 객체입니다. location 객체는 프로토콜의 종류, 호스트 이름, 문서 위치 등의 정보가 있습니다.
코드 9-9처럼 입력해 location 객체에 어떠한 속성이 있는지 출력해봅시다.


[code 9-9]
<script>
    var output = '';
    for (var key in location) {
      output += '●' + key + ': ' + location[key] + '\n';
    }
    console.log(output);
</script>


코드 9-9를 실행하면 웹 브라우저마다 실행 결과가 조금씩 다릅니다. 속성만 출력하는 웹 브라우저가 있고 메서드까지 출력하는 웹 브라우저가 있습니다.
모든 웹 브라우저의 location 객체는 표 9-5의 속성을 갖습니다.


표 9-5 location 객체의 속성
속성 이름	설명	예
href	문서의 URL 주소
host	호스트 이름과 포트 번호	localhost:30763
hostname	호스트 이름	localhost
port	포트 번호	30763
pathname	디렉토리 경로	/Projects/Location.htm

location 객체는 표 9-6의 메서드가 있습니다.

표 9-6 location 객체의 메서드
속성 이름	설명
assign(link)	현재 위치를 이동합니다
reload()	새로고침합니다
replace(link)	현재 위치를 이동합니다

location 객체는 페이지를 이동할 때 많이 사용합니다. 다음 네 가지 방법으로 페이지를 이동할 수 있습니다. assign() 메서드와 replace() 메서드 모두 페이지를 이동하지만 replace() 메서드는 assign() 메서드와 다르게 뒤로 가기 버튼을 사용할 수 없다는 차이가 있습니다.


p.305 (1) - Move to the link page

<script>
    // (1)
    location = 'http://hanbit.co.kr';
    // (2)
    location.href = 'http://hanbit.co.kr';
    // (3)
    location.assign('http://hanbit.co.kr');
    // (4)
    location.replace('http://hanbit.co.kr');
</script>


p.305 (2) - Reload the page (This will make infinite loop !)

<script>
    // (1)
    location = location;
    // (2)
    location.href = location.href;
    // (3)
    location.assign(location);
    // (4)
    location.replace(location);
    // (5)
    location.reload();
</script>



p.305
9.7 navigator 객체
navigator 객체는 웹 페이지를 실행하고 있는 브라우저에 대한 정보가 있습니다. 일반적으로 표 9-7의 속성을 많이 사용합니다.

표 9-7 navigator 객체의 속성
속성 이름	설명
appCodeName	브라우저의 코드 이름
appName	브라우저의 이름
appVersion	브라우저의 버전
platform	사용 중인 운영체제의 시스템 환경
userAgent	웹 브라우저의 전체 정보

다음 코드는 navigator 객체의 속성을 모두 출력합니다.

[code 9-10]
<script>
    var output = '';
    for (var key in navigator) {
      output += '◼︎' + key + ': ' + navigator[key] + '\n';
    }
    console.log(output);
</script>



p.307
9.8 window 객체의 onload 이벤트 속성

다시 window 객체의 내용을 살펴보고 9장을 마칩니다. 10장부터는 script 태그에 코드 9-11 형태의 내용이 거의 필수로 들어갑니다.

[code 9-11]
<script>
    window.onload = function () {

    };
</script>

window 객체의 onload 속성을 사용하는 것입니다. 문서 객체의 속성 중 'on'으로 시작하는 속성을 이벤트 속성이라고 부르며, 이 이벤트 속성은 함수를 할당해야 합니다. 코드 9-11은 window 객체가 로드가 완료되고 자동으로 할당한 함수를 실행합니다.

"window 객체 로드가 완료되는 때가 언제인가요?"

HTML 페이지에 존재하는 모든 태그가 화면에 올라가는 순간이 로드가 완료되는 순간입니다.
간단한 코드의 실행 순서를 살펴보면서 이야기하겠습니다. 다음 코드는 HTML 페이지 내부에 alert() 함수로 중간중간 실행 흐름을 끊습니다.


p.307
[code 9-12]
<!DOCTYPE html>
<html lang="en">
<head>
    <title>Document Object Model</title>
    <script>alert('Process - 0')</script>
</head>
<body>
    <h1>Process -1</h1>
    <script>alert('Process - 2')</script>
    <h2>Process - 2</h2>
    <script>alert('Process - 3')</script>
</body>
</html>

처음 HTML 페이지를 실행하면 문자열 'Process - 0'을 출력합니다.

그림 9-10 문자열 'Process - 0' 출력

이어서 웹 브라우저가 코드를 아래로 읽으며 h1 태그 내부의 문자열 'Process - 1'을 출력합니다. 곧바로 아래의 script 태그를 실행하므로 문자열 'Process - 2'를 출력합니다.

그림 9-11 문자열 'Process - 1'과 'Process - 2' 출력

경고창을 닫으면 다시 HTML 페이지를 읽으며 h2 태그 내부의 문자열 'Process - 2'를 출력합니다. 마찬가지로 그 아래의 코드를 읽으며 'Process - 3'을 출력합니다.

ㄱ릠 9-12 문자열 'Process - 3' 출력


p.309
이번에는 window 객체의 onload 이벤트 속성으로 코드 9-13처럼 구성해봅시다. 웹 브라우저의 모든 객체가 로드됐을 때 함수를 실행하므로 어떤 결과를 출력할지 알 수 있습니다.


[code 9-13]
<!DOCTYPE html>
<html lang="en">
<head>
  <script>
    window.onload = function () {
      alert('Process - 0');
      // console.log('Process - 0');
    }
  </script>
</head>
<body>
  <h1>Process - 1</h1>
  <h2>Process - 2</h2>
</body>
</html>

코드를 실행하면 그림 9-13처럼 출력됩니다. script 태그가 h1 태그보다 위에 있지만 onload 이벤트 속성을 사용했기 때문에 나중에 출력되는 것입니다.



다음 장부터는 화면에 있는 태그를 자바스크립트로 조작하는 작업을 진행합니다. 하지만 화면에 아직 생성되지 않은 태그를 조작할 수는 없겠죠? window 객체의 onload 이벤트 속성을 언제 사용하고 언제 사용하지 않는것인지는 예제를 진행하다 보면 익힐 수 있을 것입니다.


p.310
9.9 조금 더 나아가기

정확하게 말해 이번 장에서 배운 브라우저 객체 모델은 자바스크립트가 제공하는 기능이 아니라, 웹 브라우저가 제공하는 기능입니다.
추가로 웹 브라우저는 음악을 재생하는 기능, 동영상을 재생하는 기능, 그림을 그리는 기능, 미디어를 제어하는 기능, 사용자 카메라를 다루는 기능, 게임 패드를 다루는 기능 등도 제공하며, 자바스크립트를 사용하면 이러한 기능을 모두 활용할 수 있습니다.

방금 설명한 기능을 웹 API 라고 부릅니다. 자세한 내용은 모질라의 웹 API 문서 (https://developer.mozilla.org/ko/docs/Web/API)를 참고해주세요.

그림 9-14 모질라 웹 API 문서



p.311
9.9.1 Audio 객체
이번 절에서는 음악을 재생하는 기능을 사용해보겠습니다. HTML5부터는 플래시와 같은 플러그인을 사용하지 않아도 audio 태그를 사용해서 음악을 재생할 수 있게 되었습니다.
(단, 음악 재생은 HTML5를 지원하는 웹 브라우제서만 사용할 수 있습니다. 따라서 인터넷 익스플로러 8  이하의 웹 브라우저에서는 사용할 수 없습니다).

음악을 재생할 때는 Auido 객체를 사용합니다. 9장 예제 소스에 있는 Kalimba.mp3 파일을 가져와서 그림 9-15처럼 폴더를 구성해봅시다(다른 MP3 파일을 사용해도 괜찮습니다).

Audio 객체는 코드 9-14의 방법으로 생성합니다. 생성자 함수 Audio의 매개변수에는 audio 태그의 src 속성에 대응하는 문자열을 입력합니다.



[code 9-14]
<script>
    var audio = new Audio('Kalimba.mp3');
</script>


생성자 함수에서 src 속성을 지정해줄 필요 없이 코드 9-15처럼 별도로 지정해도 됩니다.


[code 9-15]
<script>
    var audio = new Audio();
    audio.src = 'Kalimba.mp3';
</script>

이렇게 생성한 Audio 객체는 표 9-8의 속성이 있습니다.

표 9-8 Audio 객체의 기본 속성
속성 이름	설명
src	재생하려는 음악 파일 경로
volumn	음악의 음량
currentTime	음악의 현재 위치(초 단위)

또한 Audio 객체는 표 9-9의 메서드가 있습니다. 주의할 점은 Audio 객체에 stop() 메서드가 없다는 사실입니다. 음악을 정지하고 처음의 위치로 이동하고 싶을 때는 pause() 메서드를 사용하고 currentTime 속성을 0으로 바꿔야 합니다.

표 9-9 Audio 객체의 기본 메서드
메서드 이름	설명
play()	음악을 재생합니다
pause()	음악을 일시 정지합니다

표 9-9의 메서드를 이용해 코드 9-16을 작성해봅시다. 아직 이벤트를 배우지 않았지만 HTML의 기본 이벤트 모델인 인라인 이벤트 모델을 사용했으므로 쉽게 이해할 수 있을 겁니다. 각 button 태그를 클릭하거나 input 태그에 숫자를 입력하면 특정 코드를 실행하도록 했습니다.


[code 9-14]

<!DOCTYPE html>
<html>
<head>
  <script>
    var audio = new Audio('Kalimba.mp3');
  </script>
</head>
<body>
  <button onclick='audio.play()'>PLAY</button>
  <button onclick='audio.pause()'>PAUSE</button>
  <input type="number" onchange="audio.currentTime=this.value"/>
  <input type="number" onchange="audio.volumn=this.value"/>
</body>
</html>

코드를 실행하고 그림 9-16처럼 위치와 음량을 입력하고 [PLAY] 버튼을 눌러봅시다. 아주 손쉽게 간단한 음악 재생 프로그램을 만들어보았습니다.


p.313
9.9.2 모바일 장치 구분
스마트폰으로 http://naver.com 에 접속하면 자동으로 http://m.naver.com 으로 이동합니다. 네이버 페이지가 접속한 기기를 확인해서 스마트폰이면 http://m.naver.com 으로 이동시키기 때문입니다.
스마트폰을 확인하는 방법은 크게 '서버에서 확인하는 방법'과 '클라이언트에서 확인하는 방법'이 있습니다. 두 가지 모두 userAgent 를 확인하면 됩니다. userAgent 속성은 현재 웹 페이지를 실행하는 웹 브라우저의 정보를 나타냅니다. 일단 스마트폰의 웹 브라우저에서는 userAgent에 어떠한 값이 들어가는지 코드 9-17처럼 코드를 작성해서 확인해봅시다.


[code 9-17]

<script>
    var userAgent = navigator.userAgent;
    console.log(userAgent);
</script>

>> Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36

스마트폰 환경에서 이 코드를 실행하면 그림 9-17처럼 경고창에 브라우저 관련 정보가 출력됩니다.

>> Mozilla/5.0 (iPhone; CPU iPhone OS 10_2 like Mac OS X) AppleWebKit/ 602.3.12 (KHTML, like Gecko) Version/10.0 Mobile/14C92 Safari/602.1

웹 브라우저의 userAgent 속성에는 브라우저를 구분할 수 있는 고유한 문자열이 있습니다. 그림 9-17을 보면 안드로이드라면 Android, 아이폰이라면 iPhone을 쓰고 있다는 것을 알 수 있습니다. 이처럼 다음과 같은 키워드를 사용하면 각각의 모바일 장치를 구분할 수 있습니다.

* iPhone: 아이포
* iPod: 아이팟
* iPad: 아이패드
* Android: 안드로이드
* WebOS: 웹 OS

추가적으로 카카오톡, 페이스북에서 링크를 클릭하면, 그림 9-18처럼 KAKAOTALK 등의 글자가 찍힙니다. 이를 활용하면 카카오톡, 페이스북에서 실행했다는 것도 확인할 수 있습니다.

그림 9-18 카카오톡에서 링크를 클릭해서 들어갈 때의 userAgent 속성

직접 다양한 장치에서 userAgent 를 출력하고 확인해보면 다양하게 활용할 수 있을 것입니다. 어쨌거나 이러한 것을 활용하면 코드 9-18처럼 스마트폰을 구분할 수 있습니다.


p.315
[code 9-18]
<script>
    var smartPhones = ['iphone', 'ipod', 'android'];
    for (var i in smartPhones) {
      if (navigator.userAgent.toLowerCase().match(new RegExp(smartPhones[i]))) {
        alert('스마트폰 페이지로 이동합니다');
        location = 'http://m.hanbit.co.kr';
      }
    }
</script>

스마트폰인지 확인하고 스마트폰이라면 한빛미디어의 모바일 페이지로 이동합니다.


p.315
NOTE_ 모바일 장치의 방향

스마트폰 이야기가 나왔으니 추가로 window.orientation 속성도 간단하게 언급하겠습니다. window.orientation 속성은 모바일 장치에만 있는 속성으로 현재 모바일 장치의 방향을 나타냅니다.

0과 180일 때는 세로 방향, 90과 -90일 때는 가로 방향인데, 코드의 실행 결과를 보면 곧바로 이해할 수 있을 것이라 생각합니다.

p.315
[code 9-19]
<script>
    if (window.orientation == 0 || window.orientation == 180) {
      alert('세로 방향입니다.');
    } else if (window.orientation == 90 || window.orientation == -90) {
      alert('가로 방향입니다.');
    }
</script>
