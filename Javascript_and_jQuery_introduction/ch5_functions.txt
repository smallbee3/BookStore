[Ch5 function]


p.120
익명 함수
(선언적) 함수
var func = function () {<문장>}
function <함수이름>() {<문장>}


p.121
이 책에서는 익명 함수라는 용어를 사용하는데, 이를 '함수 리터럴'이라고 표현하기도 합닌다. 리터럴이란 52, 103, "안녕하세요"처럼 이름이 붙어있지 않은 자료를 의미하는 말입니다. 이후에 인터넷에서 추가 자료를 보거나, 다른 책을 볼 때 '함수 리터럴'이라는 용어가 나올 수 있으므로 기억하기 바랍니다.


p.125
"그렇다면 익명 함수와 선언적 함수의 차이점은 없나요?"
두 가지 방법 모두 함수를 생성하는 방법이지만 약간의 차이가 있습니다.

[code 5-6]
<script>
	함수();
	var 함수 = function () { function 함수() { alert('함수 A'); };
	var 함수 = function () { function 함수() { alert('함수 B'); };
</script>

코드 5-6은 변수를 선언하기 이전에 변수를 사용했기 때문에 오류가 발생해 실행되지 않습니다. 당연한 결과입니다. 하지만 코드 5-7처럼 선언적 함수를 사용하면 코드가 정상적으로 실행됩니다. 웹 브라우저는 script 태그 내부의 내용을 ...


p.125
웹 브라우저가 script 태그 내부의 내용을 읽는 순서

[code 5-7]
<script>
	함수();
	function 함수() { alert('함수 A'); }
	function 함수() { alert('함수 B'); }
</script>

웹 브라우저는 script 태그 내부의 내용을 한 줄씩 읽기 전에 선언적 함수부터 읽습니다. 따라서 코드 5-7은 첫 줄부터 실행하는 것이 아니라 2번째 줄 -> 3번째 줄 -> 1번째 줄이 순서로 실행됩니다.


p.125
NOTE_  선언전 함수와 익명 함수의 순서

[code 5-8]
<script>
	var 함수 = function () { alert('함수 A'); }
	function 함수() { alert('함수 B'); }
	함수();
</script>

코드 5-8을 실행하면 '함수 A'를 출력합니다. 선언적 함수가 먼저 생성되고 익명 함수가 나중에 생성되었기 때문입니다. 익명 함수의 실행 순서 때문에 실수하는 경우가 종종 있으므로 기억하기 바랍니다.


[함수 재정의 case 정리]
 * 선언적함수 + 선언적함수 -> 두번 째 함수가 정의됨
 * 익명 함수 + 익명 함수 -> 두번 째 함수가 정의됨
 * 익명 함수 + 선언적 함수 -> 익명 함수가 정의됨
 * 선언적 함수 + 익명 함수 ->  	"


 p.129
Array() 함수의 세 가지 사용 형태

[code 5-11]
<script>
	var array1 = Array();
	var array2 = Array(5);
	var array3 = Array(273, 103, 57, 32);
	alert(array1);
	alert(array2);
	alert(array3);
</script>


>>		(빈값)
>> ,,,, (comma는 뭥미?)
>>  273,103,57,32


p.130
[table  5-1, Array() 함수의 매개변수에 따른 차이]

함수 형태
설명
Array()
빈 배열을 만듭니다.
Array(number)
Array(number,)
매개변수 값만큼의 크기를 가지는 배열을 만듭니다.
Array(String)
Array(String,)
매개변수를 배열로 만듭니다.
Array(any, ... , any)
매개변수를 배열로 만듭니다.
(* any는 어떠한 자료형이든 상관없다는 의미입니다.)



p.130
가변 인자 함수
: 가변 인자 함수는 매개변수의 개수가 변할 수 있는 함수입니다.



p.130
arguments
함수를 만들었으면 함수 내부에서 arguments 변수를 찾아봅시다.
"그런 것은 만든 적이 없는데요?"
그림 5-14처럼 arguments를 입력하면 찾을 수 있습니다. 자바스크립트의 모든 함수는 내부에 기본적으로 변수 arugments가 있습니다.
변수 arguments는 매개변수의 배열입니다.



p.133
NOTE_  매개변수 개수가 다른 경우
가변 인자 함수를 살펴보고도 다음 질문을 하는 경우가 있습니다.

"Array() 함수처럼 함수의 매개변수 개수가 다를 때는 서로 다른 것을 리턴하는 함수를 어떻게 만드나요?"

코드 5-15처럼 배열 arguments의 요소 개수에 따라 조건을 설정하면 됩니다.

[code 5-15, 가변 매개변수 함수 생성]
<script>
	function func() {
		const length = arguments.length;

		if (length == 0) {
			...  (매개변수가 없을 때)
		}
		else if (length == 1) {
			...  (매개변수가 1개일 때)
		}
		else {
			...  (매개변수가 2개 이상일 때)
		}
	}
</script>


p.136
내부 함수를 사용하는 이유
현재 코드 자체로는 아무 문제가 없습니다. 하지만 큰 규모의 웹 애플리케이션을 만들 때 만약 같은 팀 구성원이 square의 다른 뜻인 '직각'에 착안해 같은 이름으로 직각 삼각형인지 확인하는 함수를 만들었다면 문제가 발생합니다.



p.138
코드 5-21처럼 내부 함수를 사용하면 함수 외부에 이름이 같은 함수가 있어도 내부 함수를 우선 실행합니다.
단, 내부 함수는 내부 함수를 포함하는 함수에서만 사용할 수 있다는 것에 주의해야 합니다. 따라서 그림 5-20처럼 pythagoras() 함수 외부에서는 square() 함수를 사용할 수 없습니다.
(*이 책의 2부 jQuery는 선언적 함수 대부분을 내부 함수로 작성합니다. 그러므로 이 절의 내용을 꼭 기억해주세요.)


p.139
Note_  자기 호출 함수
다른 개발자에게 영향을 주지 않게 코드 5-22처럼 함수를 만들어 사용하는 경우가 있습니다. 함수를 생성하자 마자 호출하죠? 이러한 함수를 '자기 호출 함수'라고 부릅니다.

[code 5-22, 자기 호출 함수]
<script>
	(function () {
		...
	})();
</script>

181207
Self call function can be made with normal function too
<script>
	(function 함수이름() {
		...
	})();
</script>


p.139
5.8 콜백 함수
자바스크립트에서는 함수도 하나의 자료형이므로 매개변수로 전달할 수 있습니다. 이렇게 매개변수로 전달하는 함수를 콜백 함수라고 합니다. ...

[code 5-23, 익명 함수를 매개변수로 전달]
<script>
	function callTenTimes(callback) {
		for (var i=0; i<10; i++) {
			callback();
		}
	}

	var callback = function() {
		alert('함수 호출');
	};

	callTenTimes(callback);
</script>



p.140
NOTE_  익명 콜백 함수
콜백 함수는 익명 함수로 사용하는 경우가 많습니다. 코드 5-24는 코드 5-23과 같은 코드 입니다. 매개 변수에 익명 함수를 곧바로 입력할 수 있다는 것을 살펴보기 바랍니다.

[code 5-24, 익명 콜백 함수]
<script>
	function callTenTimes(callback) {
		for (var i=0; i<5; i++) {
			callback();
		}
	}

	callTenTimes(function() {
		alert('함수 호출')
	});
</script>


p.141
5.9 함수를 리턴하는 함수
함수를 매개변수로 전달하는 것은 분명한 이유가 있습니다. 이전 절에서 살펴보았듯이 특정 함수를 여러 번 실행할 수 있고, 9장에서 이벤트를 배우면 "이렇게 사용하는 것이구나!"라고 이해할 수 있습니다. 하지만 "함수를 리턴하는 함수는 어디에 사용하는 것일까?"라는 질문의 답은 쉽게 얻기 힘듭니다. 함수를 리턴하는 함수를 사용하는 가장 큰 이유는 클로져(closure)때문입니다.


p.143
클로저의 정의

...
변수 output은 지역변수이므로 함수가 종료될 때 사라져야 합니다. 그러나 해당 변수가 이후에도 활용될 가능성이 있으므로 자바스크립트는 변수를 제거하지 않고 남겨둡니다. 따라서 코드를 실행하면 그림 5-23처럼 출력합니다.
...
클로저의 정의는 워낙 다양합니다.  1) 이렇게 지역 변수를 남겨두는 현상을 클로저라고 부르기도 하고,  2) 함수 test() 내부의 변수들이 살아있는 것이므로 test() 함수로 생성된 공간을 클로저라고 부르기도 합니다. 3) 또한 리턴된 함수 자체를 클로저라고 부르기도 하며, 4) 살아남은 지역 변수 output을 클로저라고 부르기도 합니다.
정의가 워낙 다양하므로 헷갈릴 수 있지만 클로저가 어떠한 것인지 감만 잡읍시다.

*추가로 지역 변수 output을 (클로저를 통해) 남겨둔다고 외부에서 마음대로 사용할 수 있는 것은 아닙니다. 반드시 리턴된 클로저 함수를 사용해야 지역 변수 output을 사용할 수 있습니다. 클로저 함수로 인해 남은 지역 변수는 클로저 함수 각각의 고유한 변수입니다.



p.145
5.11.2 인코딩과 디코딩 함수
함수 이름
설명
escape(uri)
적절한 정도로 인코딩합니다.

- 영문 알파벳과 숫자, 일부 특수 문자(@, *, -, _, +, ., /)를 제외하고 모두 인코딩

- 1바이트 문자는 %XX의 형태로, 2바이트 문자는 %uXXXX 형태로 변환합니다.

- '+' 기호를 인코딩하지 않아 문제가 있음
unescape(escaped_uri)
적절한 정도로 디코딩합니다.
encodeURI(uri)
최소한의 문자만 인코딩합니다.

- escape() 함수에서 인터넷 주소에 사용되는 일부 특수 문자(:, ;, /, =, ?, &)는 변환하지 않습니다.
decodeURL(encoded_uri)
최소한의 문자만 디코딩합니다.
encodeURIComponent(uri)
문자 대부분을 모두 인코딩합니다.

- 알파벳과 숫자를 제외한 모든 문자를 인코딩합니다.
- UTF-8 인코딩과 같습니다.
- 현재 가장 많이 사용하는 인코딩함수
decodeURIComponent(encoded_uri)
문자 대부분을 모두 디코딩합니다.


P.149
5.11.3 코드 실행 함수
함수 이름
설명
eval(string)
string을 자바스크립트 코드로 실행합니다.

eval() 함수는 문자열을 자바스크립트 코드로 실행하는 함수이므로 eval() 함수로 실행된 코드에서 정의한 변수도 활용할 수 있습니다.

<script>
    var willEval = '';
    willEval += 'var number = 10;';
    willEval += 'alert(number);';

    eval(willEval);

    alert(number);
</script>


p.150
5.11.4 숫자 확인 함수
함수 이름
설명
isFinite(number)
number가 유한한 값인지 확인합니다.
isNaN()
number가 NaN인지 확인합니다.

참고로 자바스크립트에는 그림 5-29처럼 Infinity 변수가 있습니다.
이 변수 때문에 일부 독자는 다음처럼 생각할 수 있습니다.

	"그럼  number == infinity하면 무한대인지 확인되겠네요?"

반은 맞지만 반은 틀린 이야기입니다. 코드 5-36에서 value는 Infinity가 아닙니다. 음수를 0으로 나누므로 -Infinity입니다. 따라서 "Infinity가 아닙니다."를 출력합니다.



p.152
숫자와 변수 Infinity를 비교하는 예제로인해 다음처럼 생각할 수 있습니다.

	"변수 Infinity가 양수와 음수에 있어서 구분할 수 없다면 NaN은 해도 되겠네요?"

[code 5-37]
<script>
	if (NaN == NaN) {
		alert('NaN == NaN);
	} else {
		alert('NaN != NaN');
	}
</script>
>> NaN != NaN

[code 5-38]
<script>
	if (isNaN(NaN)) {
		alert('NaN == NaN);
	} else {
		alert('NaN != NaN');
	}
</script>
>> NaN == NaN


역시 아닙니다. NaN은 자신을 비교할 수 없습니다. ...
따라서 NaN을 확인할 때는 반드시 isNaN() 함수를 사용해야 합니다. 매우 중요한 내용이므로 기억해주세요.


p.153
5.11.5 숫자 변환 함수
함수 이름
설명
parseInt(string)
string을 정수로 바꾸어줍니다.
parseFloat(string)
string을 유리수로 바꾸어줍니다.
Note_  int는 integer의 약자로 정수를 의미하고, float는 floating point의 약자로 부동소수점을 의미합니다.

이 함수는 Number() 함수의 단점을 보완하고자 만들어진 함수입니다.
Number() 함수는 숫자로 바꿀 수 없으면 NaN으로 변환합니다.
...
반면에 parseInt() 함수와 parseFloat() 함수는 숫자로 변환할 수 있는 부분까지는 모두 숫자로 변환합니다. 따라서 코드 5-40의 won과 dollar 변수의 숫자를 읽을 수 있습니다.

[code 5-40, parseInt() 함수와 parseFloat() 함수]
<script>
    var won = '1000원';
    var dollar = '1.5$';
    alert(parseInt(won) + ':' + parseInt(dollar));
    alert(parseFloat(won) + ':' + parseFloat(dollar));
</script>

>> 1000 : 1
>> 1000 : 1.5


parseInt() 함수와 parseFloat() 함수를 사용할 때는 몇 가지 주의할 점이 있습니다. 모르면 이와 관련된 문제가 발생했을 때 이유를 찾을 수 없으므로 간단하게 살펴보겠습니다.
...
자바스크립트는 0으로 시작하거나 0x로 시작하면 10진수가 아니라 각각 8진수, 16진수로 생각하고 변환합니다.

 * parseInt('0x273') -> 627
 * parseInt('273') -> 273
 * parseInt('0273') -> 187

parseInt() 함수의 두 번째 매개변수에 진법을 입력하면 앞의 수를 해당 진법의 수로 인식합니다.
 * parseInt('FF', 16) -> 255
 * parseInt('52', 10) -> 52
 * parseInt('11', 8) -> 9

"근데 이거 어디에 사용해요?"
거의 사용하지 않습니다. 가끔 0으로 시작하는 숫자를 넣어서 문제가 발생하는 경우가 있으므로 설명한느 것입니다. 추가로 parseFloat() 함수도 중간에 e가 들어가면 e의 앞부분에서 끊어버리는 것이 아니라 자릿수로 인식합니다.

 * parseFloat('52.273e5') -> 5227300



181207  Caution !
 * parseFloat('52.273e5') -> 52



p.156
5.12 조금 더 나아가기

5.12.1 자바스크립트의 실행순서
5.12.2 반복문과 콜백 함수
5.12.3 기본 매개변수, default parameter

1) 기본 매개변수의 기초
매개변수를 입력하지 않았을 때, 매개변수를 강제로 초기화하는 것을 기본 매개변수(Default Parameter)라고 부릅니다. 단순하게 "매개변수가 undefined 자료형이라면, 값을 넣는다"라는 형태로 구성하면 됩니다.

[code 5-46]
<script>
    function test(a, b, c) {
      if (!b) {b = 52;}
      if (!c) {c = 283;}

      alert(a + ':' + b + ':' + c);
    }
    test(1);
</script>


2) 짧은 조건문을 활용한 기본 매개변수
앞의 값이 없으면(undefiend 자료형이라면), 뒤의 값을 사용하기 때문에 활용할 수 있는 코드입니다. 정말 엄청나게 많이 사용되는 형태이므로 그냥 형태를 통째로 외워버리기 바랍니다.

[code 5-48]
<script>
    function test(a, b, c) {
      b = b || 52;
      c = c || 283;

      alert(a + ':' + b + ':' + c);
    }
    test(1);
</script>

참고로 대부분의 자바스크립트 가이드에서는 "굉장히 큰 의미를 갖는 매개변수 이외의 것들은 객체로 전달해서 코드를 깔끔하게 만들고, 반복문을 적용할 수 있게 하고, 통일성을 갖게 만들자"라고 하는 경우가 많습니다. 이와 관련되어 객체를 전달하고, 객체에 특정 속성을 입력하지 않았을 때 기본값을 부여하는 방법은 6장의 조금 더 나아가기에서 살펴보겠습니다.


3) 기본 매개변수 in ECMAScript 6
기본 매개변수는 엄청나게 자주 사용되는 기술이라 ECMAScript 6부터는 기본 매개변수를 쉽게 만들 수 있는 문법을 제공합니다.

[code 5-46]
<script>
    function test(a, b=52, c=273) {
      alert(a + ':' + b + ':' + c);
    }
    test(1);
</script>


p.163
5.12.4 화살표 함수 (ECMAScript 6) 

함수
내부에서 사용하는 this 키워드의 의미
익명 함수
function () { }
함수 자체에 바인딩되어 있는 객체
(window 객체 또는 프로토타입 객체가 될 수도 있습니다)
화살표 함수
(Arrow Function)
() => { }
전역 객체
(웹 브라우저 환경에서는 window 객체)
이와 같은 내용은 2부에서 jQuery를 다루며 더 살펴보겠습니다.
...
요약하자면 "this 키워드를 주의해서 사용하자"라는 의미입니다. 함수 내부에서 this 키워드를 사용하지 않는다면 완전하게 치환해서 사용해도됩니다.
추가로 코드가 한 줄이라면 중괄호를 생략해도 되며, return 키워드를 사용하지 않아도 값을 리턴합니다.



p.164
5.12.5 함수에서의 전개 연산자 (ECMAScript 6)
 1. 함수를 선언할 때의 전개 연산자
	⁃	전개 연산자로 받는 매개변수의 이름을 arguments라과 정의해 버리면, 기존의 arguments 객체가 덮어씌어지므로 다른 이름을 사용했습니다. 
	⁃	전개 연산자는 코드 5-53처럼 다른 매개변수와 조합해서 입력할 수 있습니다. 이때 전개 연산자를 사용한 매개변수를 앞에 붙이면, 어디까지가 가변 매개변수인지 명확하지 않으므로 문제가 발생합니다. 반드시 '가장 뒤에 딱 하나'만 사용해야 합니다.

	⁃	참고로 arguments 객체를 사용해서 가변 매개변수 함수를 만들어도 전혀 문제없습니다. 다만 매개변수에 좀 더 명확한 이름을 붙일 수 있다는 가독성 측면에서는 전개 연산자를 사용하는 것이 더 좋다고 할 수 있겠습니다.

2. 함수를 호출할 때의 전개 연산자
	⁃	전개 연산자로 함수를 호출할 때 배열을 전개해서 넣을 수 있게 되었습니다.


p.166
NOTE_  배열 유사 객체
arguments 객체는 배열이 아닌 배열처럼 생긴 특별한 객체라는 의미에서 '배열 유사 객체'라고 말하기도 합니다. 실제로 arguments.constructor를 실행해보면 'object'라고 출력합니다. 다만 전개 연산자를 활용한 변수는 완전한 배열이라는 것이 하나의 이유가 될 수도 있습니다.



p.166
apply () 메서드
모든 함수에는 apply 메서드가 있습니다. apply 메서드는 첫 번째 매개변수로는 '함수 내부에서 활용할 this 키워드 객체', 두 번째 매개변수로는 '매개변수 배열'을 넣게 됩니다. 단, 첫 번째 매개변수를 잘못 사용하면 문제가되는 경우도 많고, 코드의 가독성이 굉장히 떨어집니다.
그래서 ECMAScript 6에서는 전개 연산자로 함수를 호출할 때 배열을 전개해서 넣을 수 있게 했습니다.

[code 5-55]
<script>
  function test(a,b,c,d) {
    alert(`${a}:${b}:${c}:${d}`);
  }
  var array = [1,2,3];
  test(...array);
</script>

그냥 매개변수를 전달할 때 배열 앞에 전개 연산자를 입력하면 됩니다. 추가로 전개 연산자를 사용하면, 코드 5-56과 같은 형태로도 활용할 수 있습니다.

[code 5-56]
<script>
  function test(a,b,c,d) {
    alert(`${a}:${b}:${c}:${d}`);
  }

  var array = [1,2,3];

  test(273, 52, ...array);
  test(...array, ...array);
</script>
