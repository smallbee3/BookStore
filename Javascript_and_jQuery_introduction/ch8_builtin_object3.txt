[Ch8 Built-in object3]


8.8 ECMAScript 5 Array 객체

HTML5와 함께 출현한 자바스크립트 표준안을 ECMAScrpt 5라고 합니다. ECMAScript 5 는 기존 자바스크립트에서 객체 관련 부분을 많이 보완했습니다. 이번 절에서는 ECMAScript 5에서 배열에 추가된 내용을 살펴보겠습니다.


8.8.1 확인 메서드
ECMAScript 5에서는 Array 생성자 함수에 표 8-12의 메서드를 추가했습니다.

표 8-12 Array 생성자 함수의 메서드
메서드 이름
설명
Array.isArray()
배열인지 확인합니다.

typeof 키워드로 Array 객체의 자료형을 확인하면 문자열 'object'가 나오므로 Array 객체임을 확인하려면 8.2에서 배운 constructor() 메서드로 자료혀을 비교하는 방법을 응용해야 합니다.
만약 ECMAScript 5를 사용할 수 있는 환겨이라면 코드 8-44처럼 isArray() 메서드로 해당 변수가 Array 객체인지 확인할 수 있습니다.

[code 8-44]
<script>
    console.log('[1,2,3]: ' + Array.isArray([1,2,3]));
    console.log('{}: ' + Array.isArray({}));
    console.log('1: ' + Array.isArray(1));
</script>


p.242
8.2.3 자료형 구분
[Myway]

var array = [1,2,3];
console.log('[1,2,3]: ' + array.constructor == Array);
console.log('[1,2,3]: ', array.constructor == Array);
console.log(array.constructor == [].constructor);
console.log([1,2,3].constructor == [].constructor);
>> false
>> [1,2,3]:  true
>> true
>> true
>> true


var object = {};
console.log('{}: ' + object.constructor == Array);
console.log(object.constructor == Array);
console.log({}.constructor == Object);
>> false
>> false
>> true


var number = 1;
console.log('1: ' + number.constructor == Number);
console.log(number.constructor == Array);
console.log((1).constructor == Number);
>> false
>> false
>> true



p.274
8.8.2 탐색 메서드

ECMAScript 5에서 Array 객체는 기존의 메서드 이외에 표 8-13의 메서드를 추가로 갖습니다.

표 8-13  ECMAScript 5 Array 객체의 탐색 메서드
메서드 이름
설명
indexOf()
특정 요소를 앞쪽부터 검색
lastIndexOf()
특정 요소를 뒤쪽부터 검색

indexOf() 메서드와 lastIndexOf() 메서드 모두 매개변수에 검색하려는 객체를 입력합니다. 만약 내부에 검색하려는 객체가 있으면 해당 객체가 위치하는 인덱스를 리턴하고 없으면 -1을 리턴합니다.


8.8.3 반복 메서드
ECMAScript 5의 Array 객체는 표 8-14와 같은 반복 메서드가 있습니다.

표 8-14
메서드 이름
설명
forEach()
배열 각각의 요소를 사용해 특정 함수를 for in 반복문처럼 실행
map()
기존의 배열에 특정 규칙을 적용해 새로운 배열을 만듦


forEach() 메서드는 2부에서 살펴볼 jQuery의  each() 메서드와 비슷하므로 이해하고 넘어가면 이후에 쉽게 이해할 수 있습니다.
forEach() 메서드의 매개변수에는 코드 8-46  형태의 함수를 넣습니다.


[code 8-46]

<script>
    var array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

    var sum = 0;
    var output = '';
    array.forEach(function (element, index, array) {
      sum += element;
      output += index + ': ' + element + ' -> ' + sum + '\n';
    })
    console.log(output);
</script>

매개변수로 입력 함수에 배열의 요소와 관련된 정보를 넣어 반복합니다. for in 반복문과 연관해서 생각하면 쉽게 이해할 수 있을 것입니다. forEach() 메서드의 매개변수로 입력한 함수는 매개변수로 element, index, array가 있습니다.
매개변수 element는 현재 반복에서 배열의 요소를 뜻하고, 매개변수 index는 현재 반복에서 요소의 인덱스를 뜻합니다. 매개변수 array의 경우는 현재 반복을 수행하는 배열 자체를 뜻합니다.

The sequence of those three parameters do matter !
<script>
    [test]
    var sum = 0;
    var output = '';
    array.forEach(function (array, element, index) {
      sum += element;
      output += index + ': ' + element + ' -> ' + sum + '\n';
    })
    console.log(output);
</script>

>> .... (strange result)



p.276
이번에는 map() 메서드를 알아보겠습니다. map() 메서드는 배열의 각 요소를 변경해 새로운 배열을 리턴하는 메서드입니다.
map() 메서드의 매개변수에는 코드 8-47과 같은 함수를 넣습니다.

[code 8-47]

<script>
    var array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    var output = array.map(function (element) { return element * element; });
    console.log(output);
</script>
>> [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]


8.8.4 조건 메서드
forEach() 메서드의 매개변수로 입력하는 함수의 형태는 filter() 메서드를 비롯해 every() 메서드, some() 메서드에서도 사용합니다.

메서드 이름
설명
filter()
특정 조건을 만족하는 요ㅗ소를 추출해 새로운 배열을 만듦
every()
배열의 요소가 특정 조건을 모두 만족하는지 확인
some()
배열의 요소가 특정 조건을 적어도 하나 만족하는지 확인

1) filter()

[code 8-48]
<script>
    // element
    var array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    array = array.filter(function (element, index, array) { return element <= 5; });
    console.log(array);

    // index
    var array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    array = array.filter(function (element, index, array) { return index <= 3; });
    console.log(array);

    // index
    var array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    array = array.filter(function (element, index, array) { return array[0] <= 1; });
    console.log(array);
</script>


2) every(), some()

두 메서드 모두 ForEach() 메서드나 filter() 메서드처럼 함수를 매개변수로 넣습니다. 매개변수로 입력한 함수는 filter() 메서드와 마찬가지로 bool 자료형을 리턴해야 합니다.

every() 메서드는 배열의 모든 요소가 true를 리턴하면 true를 리턴하고 그 이외의 경우는 false를 리턴합니다.
반면 some() 메서드는 배열의 요소 중 적어도 하나 이상의 함수에서 true를 리턴할 경우에 true를 리턴합니다.


[code 8-49]
<script>
    var array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

    function lessThanFive(element, index, array) { return element < 5; };
    function lessThanTwenty(element, index, array) { return element < 20; };

    var output1 = array.every(lessThanFive);
    var output2 = array.every(lessThanTwenty);
    var output3 = array.some(lessThanFive);
    var output4 = array.some(lessThanTwenty);

    var output = '';
    output += 'output1: ' + output1 + '\n';
    output += 'output2: ' + output2 + '\n';
    output += 'output3: ' + output3 + '\n';
    output += 'output4: ' + output4 + '\n';
    console.log(output);
</script>
>>
output1: false
output2: true
output3: true
output4: true


[Myway]
<script>
    var output = '';
    var output5 = array.every(function (element, index, array) { return element < 5; });
    var output6 = array.some(function (element, index, array) { return element < 5; });
    output += 'output5: ' + output5 + '\n';
    output += 'output6: ' + output6 + '\n';
    console.log(output);
</script>
>>
output5: false
output6: true


8.8.5 연산 메서드

조금 어려울 수 있는 메서드는 표 8-16 reduce() 메서드와 reduceRight() 메서드입니다.

표 8-16 ECMAScript 5 Array 객체의 연산 메서드
메서드 이름
설명
reduce()
배열의 요소가 하나가 될 때까지 요소를 왼쪽부터 두 개씩 묶는 함수를 실행
reduceRight()
배열의 요소가 하나가 될 때까지 요소를 오른쪽부터 두 개씩 묶는 함수를 실행

두 메서드는 코드 8-50처럼 복잡한 형태의 함수를 매개변수로 입력합니다.


[code 8-50] - reduce
<script>
    var array = [1, 2, 3, 4, 5];
    var output = '';
    array.reduce(function (previousValue, currentValue, index, array) {
      output += previousValue + ' : ' + currentValue + ' : ' + index + '\n';
    });
    console.log(output);
<script>
>>
1 : 2 : 1
undefined : 3 : 2
undefined : 4 : 3
undefined : 5 : 4


[code 8-50] - reduceRight
<script>
    var array = [1, 2, 3, 4, 5];
    var output = '';
    array.reduceRight(function (previousValue, currentValue, index, array) {
      output += previousValue + ' : ' + currentValue + ' : ' + index + '\n';
    });
    console.log(output);
</script>
>>
5 : 4 : 3
undefined : 3 : 2
undefined : 2 : 1
undefined : 1 : 0


[code 8-51] - reduce
<script>
    var array = [1, 2, 3, 4, 5];
    var result = array.reduce(function (previousValue, currentValue) {
      console.log(previousValue, currentValue);
      return previousValue + currentValue;
    });
    console.log('result: ' + result);
</script>
>>
1 2
3 3
6 4
10 5
result: 15


[code 8-51] - reduceRight
<script>
    var array = [1, 2, 3, 4, 5];
    var result = array.reduceRight(function (previousValue, currentValue) {
      console.log(previousValue, currentValue);
      return previousValue + currentValue;
    });
    console.log('result: ' + result);
</script>
>>
5 4
9 3
12 2
14 1
result: 15


8.9 ECMAScript 5 String 객체

표 8-17 ECMAScript 5 String 객체의 메서드
메서드 이름
설명
trim()
문자열 양쪽 끝의 공백을 제거

<script>
    var text = '   text   ';
    output = text.trim();
    console.log(output);
</script>
>>
text


p.283
8.10 조금 더 나아가기

이번 장의 조금 더 나아가기에서는 JSON 객체, ECMAScript 6의 화살표 함수, 배열을 좀 더 편하게 다룰 수 있게 해주는 underscore 라이브러리를 살펴보겠습니다.


8.10.1 JSON 객체

ECMAScript 5부터는 정식으로 JSON 객체를 지원합니다. JSON(JavaScript Object Notation)은 자바스크립트 객체의 형태를 갖는 문자열을 뜻합니다. JSON이 무엇인지는 3부에서 알아보고 지금은 이 정도만 알아둡시다. JSON 객체는 표 8-18의 메서드가 있습니다.

표 8-18 ECMAScript 5 JSON 객체의 메서드
메서드 이름
설명
JSON.stringify()
자바스크립트 객체를 JSON 문자열로 변환
JSON.parse()
JSON 문자열을 자바스크립트 객체로 변환

코드 8-53을 살펴봅시다. 객체의 속성을 출력하려고 본문에서 for in 반복문을 여러 번 사용했습니다. 하지만 JSON 객체의 stringify() 메서드를 사용하면 간단하게 모든 속성을 출력할 수 있습니다.

[code 8-53]
<script>
    var object = {
      name: '윤인성',
      regioni: '서울특별시'
    };
    console.log(JSON.stringify(object));
</script>
>>
{"name":"윤인성","regioni":"서울특별시"}


객체의 속성을 확인할 때 가능하면 JSON 객체의 메서드를 사용하지 말고 지금까지 사용한 것처럼 for in 반복문을 사용합시다. 이렇게 하면 반복문 사용을 연습할 수 있고 여러 가지로 기능확장에 유리합니다.



이제 parse() 메서드를 알아봅시다. parse() 메서드는 JSON 문자열을 자바스크립트 객체로 바꾸는 역할을 수행합니다.
코드 8-54는 객체를 생성하고 JSON 문자열로 변경하고 다시 객체로 변경합니다.

[code 8-54]
<script>
    var object = {
      name: '윤인성',
      region: '서울특별시'
    };

    var copy = JSON.parse(JSON.stringify(object));
    console.log(copy.name + ' : ' + copy.region);
    console.log(copy['name'] + ' : ' + copy['region']);
</script>


p.285
NOTE_ toJSON() 메서드

JSON.stringify() 메서드의 매개변수에 넣은 객체에 toJSON() 메서드가 없다면 객체 전체를 JSON으로 변환합니다. 반면 toJSON() 메서드가 있다면 toJSON() 메서드에서 리턴한 객체를 JSON으로 변환합니다.

[code 8-55]
<script>
    var object = {
      name: 'object',
      prop: 'object',
      toJSON: function() {
        // return { custom: 'custom'};
        return { 1: 'haha'};
      }
    };
    console.log(JSON.stringify(object));
</script>

>> {"1":"haha"}



p.286
8.10.2 화살표 함수를 사용한 Array 객체의 메서드 활용 in ECMAScript 6

ECMAScript 5에서 추가된 배열의 메서드를 활용하면 코드 8-56처럼 구성됩니다.

[code 8-56] - 일반적인 배열 메서드 사용
<script>
    var students = [
      {이름: '윤인성', 국어: 87, 수학: 98, 영어: 88, 과학: 95},
      {이름: '연하진', 국어: 92, 수학: 98, 영어: 88, 과학: 95},
	...
      {이름: '박아현', 국어: 97, 수학: 98, 영어: 88, 과학: 75},
      {이름: '서준서', 국어: 45, 수학: 98, 영어: 88, 과학: 85}
    ];

    var filteredA = students.filter(function (item) { return item.과학 > 90; });
    console.log(filteredA);

    var filteredB = students.filter(function (item) { return ((item.국어 + item.수학 + item.영어 + item.과학) / 4) > 90; });
    console.log(filteredB);
</script>


5장에서 화살표 함수를 설명하면서 "코드가 한 줄이라면 중괄호를 생략해도 되며, return 키워드를 사용하지 않아도 값을 리턴합니다."라고 했습니다.

[code 8-57]
<script>
     ...
    var filteredA = students.filter((item) => item.과학 > 90);
    console.log(filteredA);

    var filteredB = students.filter((item) => ((item.국어 + item.수학 + item.영어 + item.과학) / 4) > 90 );
    console.log(filteredB);
</script>


ECMAScript 6를 사용할 수 있는 환경이라면, 특수한 경우를 제외하고 무조건 익명 함수를 화살표 함수로 교체하는 가이드라인이 있다고 5장에서 설명했었습니다. 추가적으로 이처럼 배열의 메서드를 활용할 때는 화살표 함수의 중괄호와 return 키워드를 생략해서 코드를 깔끔하게 구성할 수 있다고 기억해주세요.


8.10.3 underscore 라이브러리

배열 정렬과 같은 기본적인 유틸리티 기능을 모아놓은 underscore 라이브러리(http://underscorejs.org/)를 사용하면 편리합니다.

추가로 underscore 라이브러리는 모든 웹 브라우저에서 작동하므로, 인터넷 익스플로러 8 이하의 웹 브라우저에서 ECMAScript 5에 추가된 메서드를 사용할 수 없을 때 보완하기 위한 목적으로도 활용할 수 있습니다.


<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Document</title>
  <script src="underscore.js"></script>
</head>
<body>
</body>
</html>


정렬
underscore 라이브러리 문서에서 '정렬'을 영어로 검색해보면 정렬과 관련된 부분으로 이동합니다.

프로그래밍 언어 대부분은 특정 기능을 특정한 단어로 사용하도록 통일되어 있습니다. 예를 들어 정렬은 sort고, 문자열 양 옆의 글자를 자르는 기능은 trim이고, 배열 내용을 랜덤으로 섞는 기능은 shuffle이며, 요소를 랜덤으로 몇 개 봅아주는 기능은 sample 입니다.



배열 정렬이 굉장히 간단해졌죠? 참고로 underscore 라이브러리의 모든 메서드는 비파괴적(nondestructive) 메서드입니다. 자기 자신을 변화시키지 않고 리턴만 하므로, 리턴을 활용해 코드를 구성해야 합니다.


