[Ch6 Object]


p.173
객체의 키
객체의 키는 식별자 또는 문자열을 모두 사용할 수 있습니다. 대부분 개발자가 식별자를 키로 사용하지만, 식별자로 사용할 수 없는 단어를 키로 사용할 때는 코드 6-4처럼 문자열을 사용합니다.
식별자가 아닌 문자를 키로 사용했을 때는 무조건 대괄호를 사용해야 객체의 요소에 접근할 수 있습니다.


p.174
NOTE_  this 키워드 생략
C++, JAVA, C#과 같은 프로그래밍 언어는 같은 객체 내부에서 this 키워드를 생략할 수 있습니다. 하지만 자바스크립트는 this 키워들르 생략할 수 없습니다. 다른 프로그래밍 언어를 사용하던 개발자들이 굉장히 많이 실수하는 부분입니다. this 키워드를 사용해야 한다는 사실을 꼭 기억해주세요.


p.176
6.3 객체와 반복문
... 하지만, 객체는 단순 for 반복문으로 객체의 속성을 살펴보는 것이 불가능합니다. 객체의 속성을 모두 살펴보려면 for in 반복문을 사용해야 합니다.
...
for in 반복문에 객체를넣으면 객체의 요소 개수만큼 반복문을 실행합니다. 이때, 코드 6-8의 변수 key에는 객체의 키가 들어가므로 코드를 실행하면 그림 6-4처럼 객체의 키와 속성을 모두 출력합니다.


// [code 6-8]
var product = {
  name: 'Microsoft Visual Studio 2015 Ultimate',
  price: '15,000,000원',
  language: '한국어',
  supportOS: 'Win 32/64',
  subscription: true
};

var output = '';
for (var key in product) {
  output += '●' + key + ':' + product[key] + '\n';
}
console.log(output);

// error - TypeError: product is not iterable
oduct is not iterable
var output = '';
for (var key of product) {
  output += '●' + key + ':' + product[key] + '\n';
}
console.log(output);


p.177
6.4  객체 관련 키워드
6.4.1  in 키워드
in 키워드를 사용하면 해당 키가 객체 안에 있는지 확인할 수 있습니다. 코드 6-10은 객체가 이름과 성별에 해당하는 속성이 있는지 확인합니다.
..
코드를 실행하면 그림 6-5처럼 출력합니다. 이름 속성은 존재하므로 true를 출력하고, 성별 속성은 존재하지 않으므로 false를 출력합니다.


p.179
6.4.2 with 키워드
with 키워드는 복잡하게 사용해야 하는 코드를 짧게 줄여주는 키워드입니다.


p.180
NOTE_  with 키워드와 객체 충돌

만약 with 키워드를 사용하는 객체의 속성 이름과 외부 변수의 이름이 같으면 충돌이 발생합니다. 이 경우 자바스크립트는 객체의 속성을 우선합니다. 예를 들어 다음 코드는 경고창에 아무것도 출력하지 않습니다.

var student = {
  이름: '연하진',
  국어: 92, 수학: 98, 영어: 96, 과학: 98,
  output: '겹치지롱'
};
var output = '';
with (student) {
  output += '이름: ' + 이름 + '\n';
  output += '국어: ' + 국어 + '\n';
  output += '수학: ' + 수학 + '\n';
  output += '영어: ' + 영어 + '\n';
  output += '과학: ' + 과학 + '\n';
  output += '총점: ' + 국어 + 수학 + 영어 + 과학;
  output += '총점: ' + (국어 + 수학 + 영어 + 과학);
}
console.log(output);
>>
(nothing appears)


이렇게 객체의 속성 이름과 외부의 변수 이름이 같으면 코드 6-14처럼 with 키워드 내부에서 window 객체의 output 변수를 사용하겠다고 지정해주어야 합니다.


with (student) {
  window.output += '이름: ' + 이름 + '\n';
  window.output += '국어: ' + 국어 + '\n';
  window.output += '수학: ' + 수학 + '\n';
  window.output += '영어: ' + 영어 + '\n';
  window.output += '과학: ' + 과학 + '\n';
  window.output += '총점: ' + (국어 + 수학 + 영어 + 과학);
}
console.log(output);
>>
이름: 연하진
국어: 92
수학: 98
영어: 96
과학: 98
총점: 384


p.182
window object
window 객체는 이후에 배우는데, 웹 브라우저에서 동작하는 자바스크립트의 최상위 객체입니다. 사실 웹 브라우저에서 동작하는 자바스크립트의 모든 변수와 함수는 window 객체의 속성과 메서드입니다. alert() 함수도 window.alert() 메서드 형태로 사용할 수 있습니다. 이 내용은 9장에서 살펴봅니다.


p.185
추상화
이렇게 현실에 존재하는 객체의 필요한 속성을 추출하는 작업을 '추상화'라고 합니다.



p.192
옵션객체
함수의 매개변수로 전달하는 객체를 일반적으로 '옵션 객체'라고 부릅니다. 옵션이라는 말은 "입력해도 되고, 입력하지 않아도 된다"는 의미입니다. 따라서 기본 매개변수처럼 값을 입력하지 않으면 초기화해주는 과정이 필요합니다.

NOTE_ '매개변수로 전달하는 객체'를 옵션 객체라고 부르는 경우가 너무 일반화되어서, 필수
로 입력해야 하는 요소가 있는 객체도 옵션 객체라고 부르는 경우가 많습니다.



p.193
NOTE_  객체를 병합해서 옵션 객체를 초기화하는 경우도 많습니다. 이와 관련된내용은 20장의 본문에서 살펴보도록 하겠습니다.


p.200
6.8.3 전개 연산자를 사용한 배열 테크닉 in ECMAScript 6
전개 연산자를 사용하면 배열을 복제하거나 병합할 수 있습니다.

[code 6-33]

// 1) deep copy - for loop
<script>
  var originalArray = [1,2,3,['a','b','c']];
  var newArray = [];
  for (let i in originalArray) {
    newArray[i] = originalArray[i];
  }
  originalArray[0] = 120;
  originalArray[3][0] = 'aa';
  console.log(originalArray);
  console.log(newArray);
</script>


[code 6-34]

// 2) deep copy - 전개 연산자(...)
<script>
  var originalArray = [1,2,3,['a','b','c']];
  var newArray = [...originalArray];
  originalArray[0] = 120;
  originalArray[3][0] = 'aa';
  console.log(originalArray);
  console.log(newArray);
</script>


p.203
NOTE_  바벨을 활용할 때의 객체 복제
아마 이 책을 보는 시점에 ECMAScript 6의 문법을 활용한다면, 바벨 등의 트랜스 파일 도구와 함께 사용할 것으로 생각합니다. 바벨의 ECMAScript 6(2015) 변환 때 stage를 활성화하면, 코드 6-38처럼 전개 연산자로 객체를 복사할 수도 있습니다.
