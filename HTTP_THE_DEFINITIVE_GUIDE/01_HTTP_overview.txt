[1] HTTP 개관


(서문, xxii)
HTTP(Hypertext Transfer Protocol)
: HTTP는월드 와이드 웹 (World Wide Web, WWW)에서 통신하는 데 사용하는 프로토콜 프로그램이다. HTTP를 사용하는 방법에는 여러 가지가 있지만, 웹브라우저와 웹 서버 사이에서의 쌍방향 통신에 사용하는 것이 가장 대표적이다.


1.2 웹 클라이언트와 서버, p.4

Figure 1-1. Web clients and servers


클라이언트	-------------------- 웹 서버
(HTTP 클라이언트)			(HTTP 서버)
ex) chrome, explore		: 웹콘텐츠를 담고 있음.


1.3 리소스, p.5
웹 리소스 :    (웹서버 파일시스템의)
		- 정적파일(text file, html, word, jpeg...)
		- 동적파일(program..)
		- Gateway
		- Search Engine
			...
		(어떤종류의 컨텐츠 소스도 리소스가 될 수 있음)


Figure 1-2. A web resource is anything that provides web content


1.3.2 URI, p.7
웹 서버 리소스는 각자 이름을 갖고 있음. 서버 리소스 이름은 통합 자원 식별자(uniform resource identifier, URI)로 불림. URI는 인터넷의 우편물 주소 같은 것으로, 정보 리소스를 고유하게 식별하고 위치를 지정할 수 있다.


Figure 1-4. URLs specify protocol, server, and local resource

http://www.joes-hardware.com/saw-blade.gif
----    -------------------------  ----------------
  |				   |				|
HTTP프로토콜 사용   위 주소로 이동   위 리소스를 가져옴

URI
> URL(uniform resource locator)
  : 특정 서버의 한 리소스에 대한 구체적인 위치를 서술한다.
> URN(uniform resource name)
  : 콘텐츠를 이루는 한 리소스에 대해, 그 리소스의 위치에 영향을 받지 않는 유일무이한 이름 역할을 한다.


1.4 HTTP Transaction, p.9
HTTP 트랜잭션 = 요청메시지 + 응답메시지

Figure 1-5. HTTP transactions consist of request and response messages


1.4.1 Method
HTTP는 HTTP 메서드라고 불리는 여러 가지 종류의 요청 명령을 지원한다. 모든 HTTP 요청 메시지는 한 개의 메서드를 갖는다. 메서드는 서버에게 어떤 동작이 취해져야 하는지 말해준다.
HTTP 메서드
설명
GET
서버에서 클라이언트로 지정한 리소스를 보내라
PUT
클라이언트에서 서버로 보낸 데이터를 지정한 이름의 리소스로 저장하라
DELETE
지정한 리소스를 서버에서 삭제하라
POST
클라이언트 데이터를 서버 게이트웨이 애플리케이션으로 보내라
HEAD
지정한 리소스에 대한 응답에서, HTTP 헤더 부분만 보내라

Table 1-3. Some common HTTP status codes
HTTP status code
Description
200
OK. Document returned correctly.
302
Redirect. Go someplace else to get the resource.
404
Not Found. Can't find this resource.



1.4.3 웹페이지는 여러 객체로 이루어짐
애플리케이션은 보통 하나의 작업을 수행하기 위해 여러  HTTP 트랜잭션을 수행한다. 예를들어, 웹브라우저는 시각적으로 풍부한 웹 페이지를 가져올 때 대량의 HTTP 트랜잭션을 수행한다. 페이지 레이아웃을 서술하는 HTML '뼈대'를 한 번의 트랜잭션으로 가져온 뒤, 첨부된 이미지, 그래픽 조각, 자바 애플릿 등을 가져오기 위해 추가로 HTTP 트랜잭션들을 수행한다. 이 리소스들은 다른 서버에 위치할 수도 있다. 이와 같이 '웹페이지'는 보통 하나의 리소스가 아닌 리소스의 모음이다.

Figure 1-6. Composite web pages require separate HTTP transactions for each embedded resource



1.5 메시지
			--> 요청메시지
웹 클라이언트 ------------------- 웹 서버
			<-- 응답 메시지

Figure 1-7. HTTP messages have a simple, line-oriented text structure


시작줄 : 요청 메시지는 무엇을 해야하는지, 응답 메시지는 무엇이 일어났는지를 나타낸다.

헤더 : 각 헤더 필드는 쉬운 구문 분석을 위해 쌍점(:)으로 구분되어 있는 하나의 이름과 하나의 값으로 구성된다. 헤더 필드를 추가하려면 그저 한 줄을 더하기만 하면 된다. 헤더는 빈 줄로 끝난다.

Content-Length : 응답 본문의 길이
Content-Type : 문서의 MIME 타입

본문 : 빈 줄 다음에는 어떤 종류의 데이터든 들어갈 수 있는 메시지 본문이 필요에 따라 올 수 있다. 문자열이며 구조적인 시작줄이나 헤더와 달리, 본문은 임의의 이진 데이터를 포함할 수 있다.(텍스트, 이미지, 비디오, 오디오 트랙, 응용 소프트웨어)

요청의 본문 - 웹 서버로 데이터를 실어 보냄
응답의 본문 - 클라이언트로 데이터를 반환



1.6 TCP 커넥션
메시지가 어떻게 TCP(Transmission Control Protocol) 커넥션을 통해 한 곳에서 다른 곳으로 옮겨가는지 잠깐 이야기해보도록 하자.


1.6.1 TCP/IP
HTTP는 애플리케이션 계층 프로토콜이다. HTTP는 네트워크 통신의 핵심적인 세부사항에 대해서 신경쓰지 않는다. 대신 대중적이고 신뢰성 있는 인터넷 전송 프로토콜인 TCP/IP에게 맡긴다.
TCP/IP는 TCP와 IP가 층을 이루는, 패킷 교환 네트워크 프로토콜의 집합이다. TCP/IP는 각 네트워크와 하드웨어의 특성을 숨기고, 어떤 종류의 컴퓨터나 네트워크든 서로 신뢰성 있는 의사소통을 하게 해 준다.
TCP는 다음을 제공한다.

	•	오류 없는 데이터 전송
	•	순서에 맞는 전달 (데이터는 언제나 보낸 순서대로 도착한다)
	•	조각나지 않는 데이터 스트림 (언제든 어떤 크기로든 보낼 수 있다)

일단 TCP 커넥션이 맺어지면, 클라이언트와 서버 컴퓨터 간에 교환되는 메시지가 없어지거나, 손상되거나, 순서가 뒤바뀌어 수신되는 일은 결코 없다.
네트워크 개념상 HTTP 프로토콜은 TCP 위의 계층이다. HTTP는 자신의 메시지를 전송하기 위해 TCP를 사용한다. 이와 유사하게 TCP는 IP 위의 계층이다.

Figure 1-9. HTTP network protocol stack


1.6.2 접속, IP 주소, 포트번호
HTTP 클라이언트가 서버에 메시지를 전송할 수 있게 되기 전에, 인터넷 프로토콜(Internet Protocol, IP) 주소와 포트번호를 사용해 클라이언트와 서버 사이에 TCP/IP 커넥션을 맺어야 한다.
  TCP 커넥션을 맺는 것은 다른 회사 사무실에 있는 누군가에게 전화를 거는 것과 다소 비슷하다. 먼저 회사의 전화번호를 누른다. 이렇게 하면 그 회사로 연결된다. 그 다음엔 전화를 걸고자 하는 상대방이 쓰는 번호를 누른다.
  TCP에서는 서버 컴퓨터에 대한 IP 주소와 그 서버에서 실행 중인 프로그램이 사용 중인 포트번호가 필요하다. 다 좋은데 HTTP 서버의 IP 주소와 포트번호를 어떻게 알아낼 수 있을가? 그렇다. URL을 이용하면 된다. 앞에서 URL이란 리소스에 대한 주소라고 언급했었다. 따라서 당연하게도 URL은 그 리소스를 가지고 있는 장비에 대한 IP 주소를 알려줄 수 있다.
...
호스트 명은 IP 주소에 대한 이해하기 쉬운 형태의 별명이다. 호스트 명은 도메인 이름 서비스(Domain Name Service, DNS)라고 불리는 장치를 통해 쉽게 IP로 변환될 수 있으므로 모든 준비는 끝난 것이다.
...
IP 주소와 포트번호를 이용해 클라이언트는 TCP/IP로 쉽게 통신할 수 있다. 그림 1-10은 웹브라우저가 어떻게 HTTP를 이용해서 멀리 떨어진 곳에 있는 서버의 단순한 HTML 리소스를 사용자에게 보여주는지 묘사하고 있다.
순서는 다음과 같다.


Figure 1-10. Basic browser connection process

(a) 웹브라우저는 서버의 URL에서 호스트명을 추출한다.
(b) 웹브라우저는 서버의 호스트 명을 IP로 변환한다.
(c) 웹브라우저는 URL에서 포트번호(있다면)를 추출한다.
(d) 웹브라우저는 웹 서버와 TCP 커넥션을 맺는다.
(e) 웹브라우저는 서버에 HTTP 요청을 보낸다.
(f) 서버는 웹브라우저에 HTTP 응답을 돌려준다.
(g) 커넥션이 닫히면, 웹브라우저는 문서를 보여준다.


1.8 웹의 구성요소, p.19
이 장에서, 우리는 웹 애플리케이션(웹브라우저와 웹 서버)이 기본적인 트랜잭션을 구현하기 위해 어떻게 메시지를 주고받는지에 중점을 두었다. 인터넷과 상호작용할 수 있는 웹 애플리케이션은 많다. 이 절에서 우리는 다음을 포함한 여러 애플리케이션들에 대해 간략히 설명할 것이다.

프락시
클라이언트와 서버 사이에 위치한 HTTP 중개자

캐시
많이 찾는 웹페이지를 클라이언트 가까이에 보관하는 HTTP 창고

게이트웨이
다른 애플리케이션과 연결된 특별한 웹 서버

터널
단순히 HTTP 통신을 전달하기만 하는 특별한 프락시

에이전트
자동화된 HTTP 요청을 만드는 준지능적(semi-intelligent) 웹클라이언트


1.8.1 프락시, p.20
웹 보안, 애플리케이션 통합, 성능 최적화를 위한 중요한 구성요소인 HTTP 프락시 서버에 대해 살펴보자.

 그림 1-11에서 보다시피, 프락시는 클라이언트와 서버 사이에 위치하여, 클라이언트의 모든 HTTP 요청을 받아 서버에 전달한다(대게 요청을 수정한 뒤에). 이 애플리케이션은 사용자를 위한 프락시로 동작하며 사용자를 대신해서 서버에 접근한다.
  프락시는 주로 보안을 위해 사용된다. 즉, 모든 웹 트래픽 흐름 속에서 신뢰할 만한 중개자 역할을 한다. 또한 프락시는 요청과 응답을 필터링한다. 예를 들어, 회사에서 무엇인가를 다운 받을 때 애플리케이션 바이러스를 검출하거나 초등학교 학생들에게서 성인 콘텐츠를 차단한다. 프락시에 대해서는 6장에서 자세히 이야기할 것이다.

Figure 1-11. Proxies relay traffic between client and server


1.8.2 캐시, p.20
웹캐시와 캐시 프락시는 자신을 거쳐 가는 문서들 중 자주 찾는 것의 사본을 저장해 두는, 특별한 종류의 HTTP 프락시 서버다. 다음번에 클라이언트가 같은 문서를 요청하면 그 캐시가 갖고 있는 사본을 받을 수 잇다. (그림 1-12를 보라)
  클라이언트는 멀리 떨어진 웹 서버보다 근처의 캐시에서 훨씬 더 빨리 문서를 다운 받을 수 있다. HTTP는, 캐시를 효율적으로 동작하게 하고 캐시된 콘텐츠를 최신 버전으로 유지하면서 동시에 프라이버시도 보호하기 위한 많은 기능을 정의한다. 우리는 7장에서 캐싱 기술에 대해 다룰 것이다.

 Figure 1-12. Caching proxies keep local copies of popular documents to improve performance


1.8.3 게이트웨이 (-> 가짜서버)
게이트웨이는 다른 서버들의 중개자로 동작하는 특별한 서버다. 게이트웨이는 주로 HTTP 트래픽을 다른 프로토콜로 변환하기 위해 사용된다. 게이트웨이는 언제나 스스로가 리소스를 갖고 있는 진짜 서버인 것처럼 요청을 다룬다. 클라이언트는 자신이 게이트웨이와 통신하고 있음을 알아채지 못할 것이다.
  HTTP/FTP 게이트웨이는 FTP URI에 대한 HTTP 요청을 받아들인 뒤, FTP 프로토콜을 이용해 문서를 가져온다(그림 1-13을 보라). 받아온 문서는 HTTP 메시지에 담겨 클라이언트에게 보낸다. 8장에서 게이트웨이에 대해 다룰 것이다.

 Figure 1-13. HTTP/FTP gateway


1.8.4 터널
터널은 두 커넥션 사이에서 날(raw) 데이터를 열어보지 않고 그대로 전달해주는 HTTP 애플리케이션이다. HTTP 터널은 주로 비 HTTP 데이터를 하나 이상의 HTTP 연결을 통해 그대로 전송해주기 위해 사용된다.
  HTTP 터널을 활용하는 대표적인 예로, 암호화된 SSL 트래픽을 HTTP 커넥션으로 전송함으로써 웹 트래픽만 허용하는 사내 방화벽을 통과시키는 것이 있다. 그림 1-14에 묘사된 바와 같이, 우선 HTTP/SSL 터널은 HTTP 요청을 받아들여 목적지의 주소와 포트번호로 커넥션을 맺는다. 이후부터는 암호화된 SSL 트래픽을 H
TTP 채널을 통해 목적지 서버로 전송할 수 있게 된다.

 Figure 1-14. Tunnels forward data across non-HTTP networks (HTTP/SSL tunnel shown)


1.8.5 에이전트
사용자 에이전트(혹은 그냥 에이전트)는 사용자를 위해 HTTP 요청을 만들어주는 클라이언트 프로그램이다. 웹 요청을 만드는 애플리케이션은 뭐든 HTTP 에이전트다. 지금까지 우리는 한 가지 종류의 HTTP 에이전트, 웹브라우저에 대해서만 이야기했다. 그러나 사용자 에이전트에는 여러가지 종류가 더 있다.
  예를 들어, 사람의 통제 없이 스스로 웹을 돌아다니며 HTTP 트랜잭션을 일으키고 콘텐츠를 받아오는 자동화된 사용자 에이전트가 있다. 이들 자동화된 에이전트는 보통 '스파이더'나 '웹로봇'과 같이 다채로운 이름을 갖고 있다.(그림 1-15를 보라).
스파이더는 웹을 돌아다니며, 검색엔진의 데이터베이스나 가격비교 로봇을 위한 제품 카탈로크와 같은 유용한 웹 콘텐츠 보관소를 만든다. 자세한 것은 9장을 보라.

 Figure 1-15. Automated search engine "spiders" are agents, fetching web pages around the world



1.9
여기까지 HTTP에 대해 간단히 소개했다. 이 장에서 우리는 HTTP의 멀티미디어 전송 프로토콜로서의 역할에 주목했다. 우리는 어떻게 HTTP가 URI로 원격 서버에 있는 멀티미디어 리소스에 이름을 붙이는지 개략적으로 살펴보았고, HTTP를 사용하는 몇몇 웹 애플리케이션을 조사해보면서 이 장을 마무리했다.
남은 장들에서는 HTTP 프로토콜, 애플리케이션, 리소스의 구조에 대해 훨씬 더 자세히 설명할 것이다.


