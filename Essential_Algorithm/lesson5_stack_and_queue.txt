[Lesson5 Stack and Queue]

p.55
5.1 스택(Stack)의 개념

스택의 기본 개념을 프로그래밍적인 시각에서 보면 "입력과 출력을 한 방향으로 제한한 알고리즘" 이라고 볼 수 있다.


p.58
그렇다면 연결 리스트를 사용한 스택 알고리즘의 효율성은 어떨까?

(1) 시간의 효율성
스택 알고리즘은 이 책에서 다루는 것처럼 연결 리스트를 사용하기도 하지만 배열을 사용하여 구현하기도 한다. 그 이유는 스택의 개념 자체가 검색하는 과정이 필요 없이 가장 선두에 있는 데이터를 Pop하고, 데이터를 삽입할 대도 가장 선두에 집어넣기 때문이다. 따라서, 연결 리스트를 사용한다고 하더라도 시간적인 효율성 면에서는 배열보다 나은 점은 없다고 볼 수 있다.

(2) 공간의 효율성
공간의 효율성 측면에서는 배열로 구현한 스택이 배열의 전체 크기에 국한된다는 점 때문에 연결 리스트를 사용한 스택이 더 효율적이라고 말할 수는 있다. 그러나, 대부분의 스택을 사용하는 경우에는 스택의 크기를 정해놓고서 사용하는 것이 일반적이기 때문에 스택을 배열로 구현했다고 해서 공간의 효율성이 많이 저하된다고 보기는 어렵다.

(3) 코드의 효율성
코드의 효율성은 연결 리스트에 대한 코드를 이해할 수 있다면 이것을 이용해서 만든 스택의 코드는 쉽게 이해할 수 있다. 결국 연결 리스트를 이용한 스택이라고 하더라도 연결 리스트의 링크를 연결하거나 새로운 노드를 생성하는 정도의 코드이기 때문이다.




p.67
5.4.3 배열을 사용한 큐 알고리즘 분석
(1) 시간의 효율성
큐 알고리즘은 배열로 구성되어 있지만 시간적인 효율성 측면에서는 배열로 하든 연결 리스트로 하든 상관없다. 그 이유는 스택과 큐 모두 검색과정이 필요 없기 때문이다. 따라서 시간적인 효율성은 양호하다고 볼 수 있다.

(2) 공간의 효율성
배열로 구현한 큐 알고리즘의경우 미리 정해놓은 배열의 크기만큼으로 한정적이긴 하지만 큐의 경우는 원형 큐(Circular Queue)형태로 사용한다. 원형 큐라는 것은 뱀이 꼬리를 물고 있는 모양처럼 큐가 원형으로 되어 있다. 따라서 배열의 전체 크기와는 상관없이 빙빙 돌면서 사용이 가능하다.

(3) 코드의 효율성
큐 알고리즘의 경우 배열을 사용했고, 큐의 입력 위치나 출력 위치 모두 배열의 인덱스 형태로 사용하기 때문에 코드가 매우 간단하다는 장점이 있다. 또한, 원형 큐로 하는 경우에도 인덱스의 연산만으로 쉽게 구현이 가능하다.


p.68
따라서 운영체제의 스케쥴러 등에서 유용하게 사용되는 알고리즘이기도 하다.
