[Lesson3 Linked List]



3.1.1 노드(Node)와 링크(Link)

파이썬에서 연결 리스트를 사용하기 위해서는 노드(Node)를 다음과 같이 클래스로 정의하여 사용한다.

class Node:
    def __init__(self, data, next=None):
        self.data = data
        self.next = next



3.1.2 연결 리스트의 특징
...
연결 리스트는 자료를 저장하는 하나의 자료구조에 불과하다. 기본적인 개념은 파이썬의 배열과  거의 동일하다.

" 그렇다면 왜 배열을 사용하지 않고 연결 리스트를 사용할까? "

연결 리스트의 장점은 곧 배열의 단점이 된다.
...


p.37
3.2.2 삽입 알고리즘의 분석

(1) 시간의 효율성
삽입할 데이터의 위치 검색 과정에서는 배열과 그다지 차이가 없지만, 실제 데이터를 삽입하는 과정은 전체 배열의 크기와 연결 리스트의 노드의 수가 많으면 많을수록 현격한 차이를 보여준다.

(2) 공간의 효율성
배열은 실제 프로그래밍에서 사용할 때 프로그램의실행 중에 배열의 크기를 변경시키지 못하기 때문에 공간의 효율성이 떨어진다. 하지만 연결 리스트는 언제든지 필요할 때 동적으로 공간(메모리)을 할당하여 사용할 수 있으므로 배열에 비해 공간의 효율성이 뛰어나다고 할 수 있다.

(3) 코드의 효율성
코드의 효율성은 연결 리스트보다 배열이 조금 더 낫다고 볼 수도 있다. 그 이유는 배열의 경우 for문에서 사용하는 것처럼 배열의 인덱스만으로도 가능하기 때문에 코드를 작성할 때도 간단하고, 코드를 이해하기도 훨씬 수월하다. 그에 비해서 연결 리스트의 코드는 포인터와 구조체로되어 있기 때문에 처음 접하는 독자들은 이해하기가 쉽지 않다.



p.42
3.2.4 삭제 알고리즘의 분석

(1) 시간의 효율성
연결 리스트의 삽입 알고리즘과 마찬가지로 삭제 알고리즘도 삭제할 노드를 검색하는 과정과 찾은 노드를 삭제하는 과정이 필요하다. 노드를 삭제하는 경우에 배열은 삽입 알고리즘과 마찬가지로 삭제한 후 삭제한 데이터 이후의 데이터들을 모두 앞으로 한 칸씩 이동해야 하는 반면에 연결 리스트는 링크를 끊어주고 삭제할 노드만을 해제해주면 된다. 따라서 시간적인 효율성은 배열보다 훨씬 좋다고 볼 수 있다.

(2) 공간의 효율성
배열에 비해 연결 리스트는 삽입 알고리즘과 마찬가지로 메모리를 할당하고, 또 삭제한 메모리를 해제하기 때문에 공간적인 효율성이 높다고 볼 수 있다.

(3) 코드의 효율성
코드의 효율성은 연결 리스트보다는 배열이 좀 더 낫다고 볼 수도 있다. 삽입 알고리즘과 마찬가지로 배열의 경우에는 인덱스로 처리하기 때문에 개념적으로 이해하기는 연결 리스트보다 배열이 더 쉬울 수 있다.
