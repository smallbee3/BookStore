[SQL더쉽게]  Ch1-2

p.15
SQL문과 그 종류
SQL문은 RDBMS에 부여한 명령 종류에 따라 다음의 세 가지로 분류된다. 
* DDL(Data Definition Language) DDL(데이터 정의 언어)은ㅇ 데이터를 저장하는 데이터베이스 및 테이블을 생성, 삭제하기 위한 것이다. DDL에 해당하는 명령어는 다음과 같다.  CREATE : 데이터베이스나 테이블 등을 작성 DROP : 데이터베이스나 테이블 등을 삭제 ALTER : 데이터베이스나 테이블 등의 구성을 변경  
* DML(Data Manipulation Language) DML(데이터 조작 언어)은 테이블의 행을 검색하거나 변경하기 위한 것이다. DML에 해당하는 명령은 다음과 같다.  SELECT : 테이블에서 행을 검색 INSERT : 테이블에 신규 행을 등록 DELETE : 테이블에서 행을 삭제  
* DCL(Data Control Language) DCL(데이터 제어 언어)은 데이터베이스에서 처리한 변경 내용을 확정하거나 취소하기 위한 것이다. 또한, RDBMS 사용자에게 처리 권한을 부여하기도 한다. DCL에 해당하는 명령은 다음과 같다.  COMMIT : 데이터베이스 변경 내용을 확정 ROLLBACK : 데이터베이스 변경 내용을 취소 GRANT : 사용자에게 처리 권한을 부여 REVOKE : 사용자 처리 권한을 제거


p.17
상수
SQL 문 안에 직접 기술하는 문자열이나 날짜, 숫자 등을 상수라고 한다.


p.18
[ ! ] 1-8
단어와 단어 사이는 공백 문자 또는 줄바꿈 문자로 구분한다.


p.23
[ ! ] 1-9
데이터베이스나 테이블, 열 등의 이름으로 사용할 수 있는 문자는 다음 세 가지다.

* 영문자
* 숫자
* 언더바(_)


p.32
[COLUMN]
테이블명 수정

(PostgreSQL)
ALTER TABLE <previous_name> RENAME TO <name_to_change>
(MySQL)
ALTER TABLE <previous_name> TO <name_to_change>

e.g.
(PostgreSQL)
ALTER TABLE Gods RENAME TO Goods;
(MYSQL)
ALTER TABLE Gods TO Goods;



p.40
.. 공백(한 글자도 없는 행)을 끼고 있는 경우 정상적으로 실행되지 않으니 주의하도록 하자.


p.40
[ ! ] 2-1
별표(*)는 모든 열을 의미한다.


p.44
DISTINCT를 사용할 때 NULL도 하나의 데이터로 인식된다.



p.50
SQL clause에도 계산식을 쓸 수 있다.

e.g.
[LIST 2-17]
SELECT goods_name, sell_price,
       sell_price * 2 AS "sell_price_x2"
  FROM Goods;

 goods_name | sell_price | sell_price_x2
------------+------------+---------------
 티셔츠     |       1000 |          2000
 펀칭기     |        500 |          1000
 와이셔츠   |       4000 |          8000
 식칼       |       3000 |          6000
 압력솥     |       6800 |         13600
 포크       |        500 |          1000
 도마       |        880 |          1760
 볼펜       |        100 |           200



p.52
NULL을 포함한 계산은 무조건 NULL이 된다.
보통 5/0처럼 0으로 나누려고 하면 에러가 발생하지만, NULL을 0으로 나누는 경우는 예외적으로 에러가 아닌 NULL이 된다.



p.52
[COLUMN]
2-1절에서 SELECT문은 SELECT 구와 FROM 구로 이루어진다고 설명했었다. 하지만 FROM구가 SELECT문에 반드시 필요한 것은 아니다. 예를 들어 SELECT 구만 사용해서 계산이 가능하다.
e.g.
SELECT (100 + 200) * 3 AS calculation;

 calculation
-------------
         900



p.56
문자열에 부등호를 사용할 때 주의사항
문자열형의 데이터의 대소를 비교할 때는 숫자와 다른 규칙이 적용된다. 대표적인 규칙이 '사전식 순서'다.
이 규칙에서 중요한 것은 '같은 문자로 시작하는 단어들은 다른 문자로 시작하는 단어들보다 가까운 관계'라는 것이다.
...
문자열형의 정렬 순서는 사전식을 원칙으로 한다.

e.g.
1
10
11
2
222
3

가마
가방
기술

1
1-1
1-2
1-3
2
2-1
2-2
3


p.62
NOT은 단독으로 사용할 수 없고 다른 조건과 함께 사용해야 한다

e.g.
WHERE NOT sell_price >= 1000;



p.68
OR 연산자보다 AND 연산자가 우선순위가 높다

e.g.
SELECT goods_name, goods_classify, register_date
  FROM Goods
 WHERE register_date = '2009-09-20'    OR register_date = '2009-09-11'
    AND goods_classify = '사무용품';

==

SELECT goods_name, goods_classify, register_date
  FROM Goods
 WHERE register_date = '2009-09-20'    OR (register_date = '2009-09-11'
    AND goods_classify = '사무용품');




p.51
산술 연산자, Arithmetic operators
+, -, *, /
(+ mysql)
**, //

p.54
비교 연산자, Comparison operators
=, <>, >=, >, <=, <

 p.69
논리 연산자, Logical operators
NOT, AND, OR

p.71
[COLUMN]
 논리곱과 논리합
... AND 연산자에서는 곱셈(곱)을,  OR 연산자에서는 덧셈(합)을 한 것과 같은 결과가 된다. 이 때문에 AND 연산자의 논리 연산은 논리곱, OR 연산자의 논리 연산은 논리곱이라고 한다.



p.71
NULL을 포함하는 진릿값

앞 절의 'NULL"에 비교 연산자는 사용할 수 없다.'에서 본 것처럼 원하는 결과를 얻을 수 없다. 따라서 참이 아니다.
그러면 거짓일까? 실은 거짓도 아니다. 만약 거짓이라면 이 조건을 부정한 NOT buy_price = 2800이라는 조건이 참이 돼서 해당 행들이 선택되어야 한다. 하지만 실제 결과는 그렇지 않다.
참도 거짓도 아니라면 무엇일까? 여기에 SQL만이 가지고 있는 함정이 있다. 이 경우 진릿값은 '불명(UNKNOWN)'이라는 제3의 값이 된다. 일반적인 논리 연산에는 이 세 번째 값이 존재하지 않는다. SQL 이외 언어도 대부분 참과 거짓, 두 가지 값만 사용한다.
일반 논리 연산을 2치 논리라고 하며, SQL은 3치 논리라고 한다. 따라서 표 2-4 진리표도 실은 불완전한 것이며, 표 2-6처럼 '불명' 값도 포함해야 한다.

