[SQL더쉽게] Ch8 SQL고급처리


p.279
[8-1 윈도우 함수]

학습 포인트
	•	윈도우 함수는 랭킹, 순번 생성 등 일반 집약 함수로는 불가능한 고급 처리를 수행한다.
	•	PARTITION BY 와 ORDER BY 라는 두 가지 키워드가 가진 의미를이해하는 것이 중요하다.

윈도우 함수란?
윈도우 함수는 OLAP 함수(Oracle은 '분석함수'란 용어를 사용하고 있다)라고도 한다. 처음 개념을 잡을 때는 윈도우 함수라는 용어가 알기 쉽다('윈도우'라는 용어의 의미는 뒤에 설명하도록 한다).

OLAP이란, OnLine Analytical Processing의 약자로, 데이터베이스를 사용한 실시간(온라인) 데이터 분석 처리다. 예를 들어 시장 분석, 재무제표 작성, 계획 작성 등 비즈니스 현장에서 없어서는 안 될 업무들이 포함된다.

윈도우 함수는 이 OLAP 용도로 사용하기 위해서 표준 SQL에 추가된 기능이다.

[주 8-2]
지금 시점에서 MySQL은 윈도우 함수를 지원하고 있지 않다. 상세 내용은 칼럼 '윈도우 함수 지원 상황'을 참조하기 바란다.


p.279
[COLUMN]
윈도우 함수 지원 현황

'이왕 데이터베이스 업무 데이터가 들어 있으니까 SQL을 사용해서 실시간으로 데이터 분석이 가능하다면 편리할 것이다'라는 생각은 데이터베이스 관계자 사이에서는 엣날부터 있었다. 하지만 관계형 데이터베이스가 OLAP 기능을 지원하기 시작한 것은 최근 10년 정도다. 그 이유는 여러 가지가 있지만 여기서는 깊게 다루지는 않을 것이다. 이런 기능이 새롭긴 하지만 아직 일부 DBMS가 지원하고 있지 않다는 점이다.

이번 절에서 다루는 윈도우 함수도 그 중 하나로, 2010년 5월 시점에 Oracle 11g, SQL Server 2008, dB2 9.7, PostgreSQL 8.4은 문제없이 지원하지만, MySQL 5.5는 아직 미지원 상태다.

지금까지는 각 DBMS가 가진 특수한 개별 구문 때문에 사용할 수 있는 구문과 그렇지 못한 구문이 있었지만, 동일하게 표준 SQL에 있다고 해도 신기능의 경우는 DBMS에 따라 지원 상화이 다른 경우가 있으니 주의하도록 하자.


p.280
윈도우 함수 구문
그러면 윈도우 함수에 대해 샘플을 사용해서 배워 보도록 하자. 윈도우 함수 구문은 조금 복잡하다.

구문 8-1  윈도우 함수
<윈도우 함수> OVER ([PARTITION BY <열 리스트>] ORDER BY <소트용 열 리스트>)
( ※ [ ] 는 생략 가능하다는 것을 의미한다. )

중요한 키워드는 PARTITION BY와  ORDER BY다. 우선, 이 두 가지가 어떤 역할을 하는지 이해하는 것이 윈도우 함수를 이해하는 열쇠가 된다.

ㅁ 윈도우 함수로 사용할 수 있는 함수

PARTITION BY, ORDER BY에 대해 학습하기 전에 윈도우 함수로 사용할 수 있는 대표적인 함수를 열거해 보도록 하자. 윈도우 함수는 크게 다음의 두 종류로 분류된다.

① 집약 함수(SUM, AVG, COUNT, MAX, MIN)를 윈도우 함수로 사용
② RANK, DENSE_RANK, ROW_NUMBER 등의 윈도우 전용 함수

②는 표준 SQL에 정의된 OLAP 전용 함수다. 이 책에서는 이들을 총칭해서 '윈도우 전용 함수'라고 부른다. ②의 경우는 함수명을 보면 OLAP 용도라는 것을 한눈에 알 수 있다.

다른 하나인 ①은 3장에서 배운 집약 함수다. 집약 함수를 '구문 8-1'의 윈도우 함수' 부분에 적으면 윈도우 함수로서 사용할 수 있다. 다시 말하면, 집약 함수는 사용하는 구문에 따라서 집약 함수가 되거나 윈도우 함수가 되기도 한다.


p.281
구문의 기본적인 사용법 - RANK 함수 이용

우선, 윈도우 전용 함수인 RANK를 사용해서 윈도우 함수 구문을 이해하도록 하자.
RANK는 이름 그대로 레코드 랭킹(순위)을 산출하는 함수다.

예를 들어, Goods 테이블에 포함되어 있는 8개 상품에 대해 상품분류(goods_classify)별로 판매단가(sell_price)가 낮은 순서대로 랭킹표를 만든다고 하자. 결과는 다음과 같이 된다.


이 결과를 구하는 SELECT 문은 리스트 8-1과 같다.

리스트 8-1
SELECT goods_name, goods_classify, sell_price,
       RANK () OVER (PARTITION BY goods_classify
                         ORDER BY sell_price) AS ranking
  FROM Goods;
>>
 goods_name | goods_classify | sell_price | ranking
------------+----------------+------------+---------
 티셔츠  	   | 의류        	|       1000 |       1
 와이셔츠  	   | 의류           	|       4000 |       2
 볼펜       	   | 사무용품       |        100 |       1
 펀칭기     	   | 사무용품       |        500 |       2
 포크       	   | 주방용품       |        500 |       1
 도마       	   | 주방용품       |        880 |       2
 식칼       	   | 주방용품       |       3000 |       3
 압력솥     	   | 주방용품       |       6800 |       4


PARTITION BY는 순위를 정할 대상 범위를 설정한다. 샘플에서는 상품분류마다 순위를 정하고 있기 때문에 goods_classify를 지정하고 있다.

ORDER BY는 어떤 열을 어떤 순서로 순위를 정할지 지정한다. 판매단가를 오름차순으로 순위를 부여하기 때문에 sell_price를 지정하고 있다. 또한, 윈도우 함수의 ORDER BY는 SELECT 문의 마지막에 사용하는 ORDER BY와 동일하게 ASC/DESC 키워드로 오름차순, 내림차순을 지정할 수 있지만,생략하면 기본값인 ASC, 즉 오름차순이 적용되기 때문에 샘플에서는 생략하고 있다.

PARTITION BY와 ORDER BY를 이해하기 쉽도록 도식화하면 그림 8-1과 같다. PARTITION BY가 테이블을 가로 방향으로 자르고,  ORDER BY가 세로 방향으로 순위를 정하는 역할을 하고 있다는 것을 알 수 있다.


그림 8-1  PARTITION BY와 ORDER BY 작용
...
 * PARTITON BY로 구분된 레코드 집합을 윈도우라고 한다
 * ORER BY 순서 (판매단가가 낮은 순)
 * PARTITON BY로 자르기 (상품분류별)


윈도우 함수는 앞에서 배운 GROUP BY 구의 분류 기능과 ORDER BY 구의 순서 정렬 기능을 모두 가지고 있는 것이다. 단, PARTITION BY  구에는 GROUP BY 구가 가진 집약 기능이 없다. 이 때문에 RANK 함수를 사용한 결과는 원 테이블의 행 수가 줄지 않은 전체 행(8행)이 출력된다.

[ ! ] 8-1
윈도우 함수는 자르기와 순서 정렬 기능을 모두 가지고 있다.


또한, PARTITION BY를 통해 구분된 레코드 집합을 '윈도우'라고 한다. 이 경우 윈도우는 '창'이 아닌 '범위'를 나타낸다. '윈도우 함수'라는 이름의 유래는 여기서 왔다.

[주 8-5]
용어가 가진 의미상 '윈도우'보다 '그룹'이라고 하는 것이 알기 쉬울 수 있다. 하지만 SQL에서 '그룹'이라고 말하면 GROUP  BY 구로 구분된 레코드 집합을 가리키는 경우가 많기 때문에 혼란을 방지하기 위해서라도 PARTITION BY의 경우는 윈도우라고 부른다.

참고로, 각 윈도우들은 절대로 공통 부분을 가지지 않는다. 케익을 자를 때와 같이 확실히 나누어진다. 이 점은 GROUP BY 구로 나누어진 부분 집합과 동일한 특징이다.



p.283
PARTITION BY를 지정하지도 않아도 된다

이와 같이 윈도우 함수를 사용할 때 중요한 역할을 하는 것이 PARTITION BY와  ORDER BY 다. 이 중  PARTITION BY는 필수가 아니라서 지정하지 않아도 윈도우 함수를 사용할 수 있다.

그러면 PARTITION BY를 지정하지 않으면 어떤 식으로 동작할까? GROUP BY 없이 집약 함수를 사용하는 경우를 생각하면 된다. 즉, 테이블 전체가 하나의 큰 윈도우가 되는 것이다. 바로 리스트 8-1 SELECT 문에서 PARTITIONI BY를 삭제해 보도록 하자(리스트 8-2).

리스트 8-2
SELECT goods_name, goods_classify, sell_price,
       RANK () OVER (ORDER BY sell_price) AS ranking
  FROM Goods;
>>
 goods_name | goods_classify | sell_price | rank
------------+----------------+------------+------
 볼펜       	| 사무용품       |        100 |    1
 포크       	| 주방용품       |        500 |    2
 펀칭기     	| 사무용품       |        500 |    2
 도마       	| 주방용품       |        880 |    4
 티셔츠     	| 의류           |       1000 |    5
 식칼       	| 주방용품       |       3000 |    6
 와이셔츠   | 의류           |       4000 |    7
 압력솥     	| 주방용품       |       6800 |    8


앞에서는 상품분류별로 랭킹을 정했지만, 이번에는 상품 테이블 전체에서 랭킹이 정해지고 있다. 이와 같이 PARTITION BY는 테이블을 복수의 부분(윈도우)으로 나누어 윈도우 함수를 사용하고 싶은 경우의 옵션이다.


p. 284
윈도우 전용 함수 종류
위 결과를 보면 '펀칭기'와 '포크'가 공동 2위이고, 3위는 없이 '도마'가 4위다. 이것은 일반적인 랭킹 산출 방법에서도 동일하다. 하지만 때에 따라선 순위를 건너 뛰지 않고 랭킹을 정해야 하는 경우도 있다. 이런 경우는 RANK 함수 이외의 함수를 사용해서 구현할 수 있다. 여기서 대표적인 윈도우 전용 함수를 정리해 보도록 하자.

	•	RNAK 함수 랭킹을 산출한다. 같은 순위의 레코드가 복수 존재하면 후순위를 건너뛴다. 예) 1위가 3개인 레코드인 경우: 1위, 1위, 1위, 4위 ⋅⋅⋅

	•	DENSE_RANK 함수 랭킹을 산출하지만 같은 순위의 레코드가 복수 존재해도 후순위를 건너뛰지 않는다. 예) 1위가 3개의 레코드인 경우: 1위, 1위, 1위, 2위 ⋅⋅⋅ 
	•	ROW_NUMBER 함수 순위에 상관없이 연속 번호를 부여한다. 예) 1위가 3개인 레코드의 경우: 1위, 2위, 3위, 4위 ⋅⋅⋅

이외에도 각 DBMS는 독자 윈도우 함수를 제공하고 있지만, 앞의 세 가지 함수는 (윈도우 함수를 지원하는 DBMS라면) 어떤 DBMS에서든 공통적으로 사용할 수 있다. 시험 삼아 이들 세 가지 함수를 사용해서 결과를 비교해 보도록 하자(리스트 8-3).

리스트 8-3  RANK, DENSE_RANK, ROW_NUMBER 결과 비교
SELECT goods_name, goods_classify, sell_price,
       RANK () OVER (ORDER BY sell_price) AS ranking,
       DENSE_RANK () OVER (ORDER BY sell_price) AS dense_ranking,
       ROW_NUMBER () OVER (ORDER BY sell_price) AS row_num
 FROM Goods;
>>
 goods_name | goods_classify | sell_price | ranking | dense_ranking | row_num
------------+----------------+------------+---------+---------------+---------
 볼펜       	| 사무용품       	|        100 	|       1 |             1 |       1
 포크       	| 주방용품       	|        500 |       2 |             2 |       2
 펀칭기     	| 사무용품       	|        500 |       2 |             2 |       3
 도마       	| 주방용품       	|        880 |       4 |             3 |       4
 티셔츠     	| 의류           	|       1000 |       5 |             4 |       5
 식칼       	| 주방용품       	|       3000 |       6 |             5 |       6
 와이셔츠   | 의류           	|       4000 |       7 |             6 |       7
 압력솥     	| 주방용품       	|       6800 |       8 |             7 |       8


결과의 ranking 열과 dense_ranking 열을 비교하면, dense_ranking 열의 경우 2위가 두 번 계속되는 것까지는 ranking 열과 동일하지만 다음의 '도마'순위가 4가 아닌 3인 것을 알 수 있다. 이것이 DENSE_RANKING 함수를 사용한 결과다.

한편, row_num 열을 보면 판매단가(sell_price)가 동일한 경우는 신경 쓰지 않고 오직 판매단가가 작은 것부터 연속 번호를 부여하고 있다. 판매단가가 같은 레코드가 있는 경우는 DBMS가 적절한 순서로 레코드를 정렬한다. 레코드에 연속 번호를 부여하고 싶은 경우에는 이와 같이 ROW_NUMBER를 사용하도록 한다.

참고로, RANK나 ROW_NUMBER를 사용할 때 인수를 지정하지 않고 'RANK ()'나 'ROW_NUMBER ()' 처럼 괄호 안을 공란인 채로 사용한다. 이것은 윈도우 전용 함수를 사용할 때 규칙이기 때문에 기억해 두도록 하자. 이점이 집약 함수를 윈도우함수로 사용할 때와의 큰 차이점이다.(상세 내용은 뒤에서 다룬다).

[ ! ] 8-3
윈도우 전용 함수는 인수를 취하지 않기 때문에 항상 괄호 안은 공란이다.



p.286
윈도우 함수는 어디에 사용할 수 있나?

지금까지 학습한 함수들 대부분은 사용할 수 있는 장소에 제약이 없었다. 집약 함수를 WHERE 구에 사용할 때 주의가 필요하다는 정도였다. 하지만 윈도우 함수는 사용할 수 있는 장소가 크게 제한된다. 대부분은 한곳에만 사용할 수 있다고 생각해도 틀리지 않는다.

이 한곳이란, 바로 SELECT 구다. 반대로 말하면, 이 함수를 WHERE 구나 GROUP BY 구에는 사용할 수 없다.

[주 8-6]
구문상 SELECT 구 이외에도 ORDER BY 구나 UPDATE 문의 SET 구에도 사용할 수 있다. 하지만 실무에서 사용하는 경우가 거의 없기 때문에 'SELECT 구에서만 사용한다'고 기억해 두는 편이 좋다.


[ ! ] 8-4
윈도우 함수는 원칙적으로 SELECT 구에만 사용할 수 있다.

이것을 하나의 규칙으로 통째로 외워도 되지만, 왜 윈도우 함수를 SELECT 에만 사용할 수 있는가(즉, WHERE 구나 GROUP BY 구에 사용할 수 없는가)에 대한 이유를 간단히 설명하도록 하겠다.

그 이유는 DBMS 내부에서 WHERE 구나 GROUP BY 구에 의한 처리가 끝난 '결과'에 대해 윈도우 함수가 작동하도록 만들어졌기 때문이다. 이것은 잘 생각해 보면 당연한 이야기로, 랭킹을 정하려고 해도 사용자에게 결과를 반환하기 직전에 바른 랭킹을 정할 수 있기 때문이다. 랭킹이 정해진 후에 WHERE 구 조건으로 레코드가 줄거나 GROUP BY 구로 집약되어 버리면 애써 정한 랭킹을 사용할 수 없게 된다.
이런 이유로부터 윈도우 함수는 SELECT 구 이외에서 '사용하면 의미가 없기' 대문에 구문상에서도 사용할 수 없도록 제한하고 있다.

[주 8-7]
반대로, ORDER BY 구에서 윈도우 함수를 사용할 수 있는 것은 ORDER BY 구가 SELECT 구보다 나중에 처리되기 때문에 더 이상 레코드가 줄어들거나 하지 않아서다.


p.287
집약 함수를 윈도우 함수로 사용
지금까지는 윈도우 전용 함수를 샘플로 사용했다. 다음은 앞에서 다루었던 SUM이나 AVG 등의 집약 함수를 윈도우 함수로 사용하는 방법에 대해 알아보자.

모든 집약 함수는 윈도우 함수로 사용할 수 있다. 이 경우, 구문은 윈도우 전용 함수를 사용할 때와 동일하다. 단, 처음에는 구체적으로 어떤 결과를 얻을 수 있는지 감이 없기 때문에 실제 예를 바탕으로 학습하도록 하겠다. 그 예로 SUM 함수를 윈도우 함수로 사용해 보자(리스트 8-4).


리스트 8-4
SELECT goods_id, goods_name, sell_price,
       SUM (sell_price) OVER (ORDER BY goods_id) AS current_sum
  FROM Goods;
>>
 goods_id | goods_name | sell_price | current_sum
----------+------------+------------+-------------
 0001     | 티셔츠     |       1000 |        1000
 0002     | 펀칭기     |        500 |        1500
 0003     | 와이셔츠   |       4000 |        5500
 0004     | 식칼       |       3000 |        8500
 0005     | 압력솥     |       6800 |       15300
 0006     | 포크       |        500 |       15800
 0007     | 도마       |        880 |       16680
 0008     | 볼펜       |        100 |       16780


SUM 함수의 경우 RANK나 ROW_NUMBER 처럼 괄호 안이 공란인 경우는 없다. 지금까지처럼 집계 대상이 되는 열을 지정한다. 예에서는 판매단가(sell_price)의 합계(current_sum)를 구하고 있다.
하지만 단순한 합계가 아니다. ORDER BY 구에서 지정한 goods_id를 오름차순으로 정렬하고 '자신보다 작은' 상품ID를 가진 상품의 판매단가를 합하고 있다. 따라서 이 합계는 피라미드를 쌓는 것철머 집계 대상을 하나씩 늘려가는 로직이다. 이것은 일반적으론 '누계'라 부른느 방식의 집계 방법으로, 시계열 순으로 그때그때 매출 금액의 총액을 산출할 때와 같은 경우에 자주 사용한다.

이 동작 로직은 다른 집약 함수를 사용한 경우도 동일하다. 예를 들어, 이 SELECT 문의 SUM을 AVG로 변경해 보자(리스트 8-5).

리스트 8-5  AVG 함수를 윈도우 함수로 사용
SELECT goods_id, goods_name, sell_price,
       AVG (sell_price) OVER (ORDER BY goods_id) AS current_avg
  FROM Goods;
>>
 goods_id | goods_name | sell_price |      current_avg
----------+------------+------------+-----------------------
 0001     | 티셔츠     |       1000 | 1000.0000000000000000
 0002     | 펀칭기     |        500 |  750.0000000000000000
 0003     | 와이셔츠   |       4000 | 1833.3333333333333333
 0004     | 식칼       |       3000 | 2125.0000000000000000
 0005     | 압력솥     |       6800 | 3060.0000000000000000
 0006     | 포크       |        500 | 2633.3333333333333333
 0007     | 도마       |        880 | 2382.8571428571428571
 0008     | 볼펜       |        100 | 2097.5000000000000000

결과를 보면 current_avg 계산 방법은 분명히 평균을 구하고 있긴 하지만, 집계 대상은 '자신과 자신보다 위에' 있는 레코드인 것을 알 수 있다. 이와 같이 '자신의 레코드(현재 레코드)'를 기준으로 집계 대상을 판단한다는 점이 윈도우 함수로 집약 함수를 사용했을 때의 큰 특징이다.


p.287
[주 8-8]
SQL Server 에서는 집약 함수와 OVER 구를 조합한 경우, ORDER BY 구를 지정할 수 없다는 사용상 제약이 있다. 이 때문에 이 샘플이 동작하지 않는다. 참고로, Oracle, DB2, PostgreSQL에서는 이런 제약이 없다.
'SQL Server 2008 온라인 북 (2009년 7월) OVER 구(Transact-SQL)'



181123
SUM + PARTITION BY + ORDER BY + ORDER BY (2)

SELECT goods_id, goods_name, sell_price,
       SUM (sell_price) OVER (
PARTITION BY goods_classify
ORDER BY goods_id) AS current_sum
FROM Goods
ORDER BY goods_classify;
>>
 goods_id | goods_classify | goods_name | sell_price | current_sum
----------+----------------+------------+------------+-------------
 0001     | 의류          	   | 티셔츠     |       1000   |        1000
 0003     | 의류             | 와이셔츠   |       4000 |        5000
 0002     | 사무용품       | 펀칭기     |        500    |         500
 0008     | 사무용품       | 볼펜       |        100     |         600
 0004     | 주방용품       | 식칼       |       3000   |        3000
 0005     | 주방용품       | 압력솥     |       6800  |        9800
 0006     | 주방용품       | 포크       |        500    |       10300
 0007     | 주방용품       | 도마       |        880    |       11180




p.288
이동 평균을 산출한다

윈도우 함수는 테이블을 윈도우라는 부분을 집합으로 잘라서 그 안에서 순서를 정하는 것이다. 사실은 이 윈도우 안에서 한층 더 집계 범위를 나누어 지정할 수 있는 기능이 있다. 이 옵션을 '프레임'이라고 한다.
구문은 리스트 8-6과 같이 ORDER BY 구 뒤에 범위 지정 키워드를 사용하면 된다.(주 8-10)

p.289
[주 8-10]]
지금 시점에서 이 기능을 사용 할 수 있는 것은 Oracle과 DB2, PostgreSQL 뿐이다.


리스트 8-6
SELECT goods_id, goods_name, sell_price,
       AVG (sell_price) OVER (ORDER BY goods_id
                                ROWS 2 PRECEDING) AS moving_avg
  FROM Goods;
>>
 goods_id | goods_name | sell_price |      moving_avg
----------+------------+------------+-----------------------
 0001     | 티셔츠     |       1000 | 1000.0000000000000000
 0002     | 펀칭기     |        500 |  750.0000000000000000
 0003     | 와이셔츠   |       4000 | 1833.3333333333333333
 0004     | 식칼       |       3000 | 2500.0000000000000000
 0005     | 압력솥     |       6800 | 4600.0000000000000000
 0006     | 포크       |        500 | 3433.3333333333333333
 0007     | 도마       |        880 | 2726.6666666666666667
 0008     | 볼펜       |        100 |  493.3333333333333333



p.289
ㅇ 프레임(집계 범위)을 지정한다
이 결과를 앞의 결과와 비교하면, 상품ID '0004'인 '식칼' 이외의 레코드에서 윈도우 함수 계산 결과가 다른 것을 알 수 있다. 프레임을 지정한 효과로 집계 대상 레코드가 '직전 3행'으로 제한된 것이다.

여기선 ROW(행)와 PRECEDING( ~ 전)이라는 키워드를 사용해서 '~행 전까지'라는 프레임을 지정하고 있다. 따라서 'ROWS 2 PRECEDING'은 '2행 전까지'라는 프레임 지정이 되며, 집계 대상 레코드는 다음처럼 '직전 3행'으로 제한되는 것이다(그림 8-2).

	•	자신(현재 레코드)
	•	자신보다 1행 전의 레코드
	•	자신보다 2행 전의 레코드

즉, 프레임은 현재 레코드를 기준으로 상대적으로 정해지기 때문에 고정 윈도우와는 달리 현재 레코드에 따라 범위가 달라진다.

이 조건의 숫자를 바꾸어서 'ROWS 5 PREcEDING'이라 하면 '5행 전까지'(직전 6행)라는 의미가 된다.

이와 같은 집계 방법을 이동 평균(moving average)이라고 한다. 그때그때 '최근 상황'을 파악하고자 할 때 편리하다. 그래서 주식 경향을 시계열로 분석하고 싶을 때와 같은 경우에 자주 사용된다.

또한, PRECEDING 대신에 FOLLOWING(~ 후)이라는 키워드를 사용하면 '~행 후까지'라는 프레임 지정도 가능하다(그림 8-3).


ㅇ 현재 레코드 전후 행을 집계 대상에 포함
또한, 만약 현재 레코드 전후 행을 집계 대상으로 포함하고 싶은 경우에는 리스트 8-7처럼 PRECEDING(~전)과 FOLLOWING(~후) 키워드를 병용하는 것도 가능하다.


리스트 8-7  현재 레코드 전후 행을 집계 대상에 포함
SELECT goods_id, goods_name, sell_price,
       AVG (sell_price) OVER (ORDER BY goods_id
                                ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS moving_avg
  FROM Goods;
>>
 goods_id | goods_name | sell_price |      moving_avg
----------+------------+------------+-----------------------
 0001     | 티셔츠     |       1000 |  750.0000000000000000
 0002     | 펀칭기     |        500 | 1833.3333333333333333
 0003     | 와이셔츠   |       4000 | 2500.0000000000000000
 0004     | 식칼       |       3000 | 4600.0000000000000000
 0005     | 압력솥     |       6800 | 3433.3333333333333333
 0006     | 포크       |        500 | 2726.6666666666666667
 0007     | 도마       |        880 |  493.3333333333333333
 0008     | 볼펜       |        100 |  490.0000000000000000


이 프레임 지정은 '1 PRECEDING'(1행 전)과 '1 FOLLOWSING'(1행 후)을 집계 대상으로 한다는 의미다. 구체적으로는 다음과 같은 3행이 집계 대상이 된다(그림 8-4).

	•	자신보다 행 전의 레코드
	•	자신(현재 레코드)
	•	자신보다 1행 후의 레코드

이 프레임 기능까지 능숙하게 사용할 수 있으면 윈도우 함수의 달인이라고 불러도 부족함이 없을 것이다.



p.292
두 가지 ORDER BY

마지막으로, 윈도우 함수의 출력 형식에 대한 주의점을 소개하도록 하겠다. 그것은 레코드의 정렬 순서다. 윈도우 함수를 사용할 때 OVER 구 안에 ORDER BY를 사용하기 때문에 쉽게 생각하면 이 ORDER BY에서 지정한 순서로 정렬된다고 볼 수도 있다.

하지만 이것은 단순한 착각이다. OVER 구 내의 ORDER BY는 어디까지나 윈도우 함수가 어떤 순서로 계산할지를 결정하기 위한 것으로, 출력 순서에는 영향을 끼치지 않는다. 예를 들어, 리스트 8-8과 같이 레코드가 랭킹순으로 정렬되지 않을 가능성도 있다. DBMS에 따라서는 윈도우 함수의 ORDER BY 구에서 지정한 순서로 정렬한 결과를 출력하는 것도 있지만 어디까지나 개별 사양에 의존한다.

리스트 8-6  이 SELECT 문의 결과 출력 시 정렬 순서는 보장되지 않는다.
SELECT goods_name, goods_classify, sell_price,
       RANK () OVER (ORDER BY sell_price) AS ranking
  FROM Goods;
>>

(정렬된다 -ㅅ- )


그러면 레코드를 ranking열 오름차수능로 제대로 정렬하려면 어떻게 하면 될까? 대답은 간단하다. SELECT 문 마지막에 ORDER BY 구를 지정하면 된다(리스트 8-9). 결국, SELECT 문의 출력 레코드 순서를 보증하는 것은 ORDER BY 구 외에는 없다.

리스트 8-9
SELECT goods_name, goods_classify, sell_price,
       RANK () OVER (ORDER BY sell_price) AS ranking
  FROM Goods
 ORDER BY ranking;

ORDER BY를 하나의 SELECT 문 안에 2회 사용하는 것에 위화감을 느낄 수도 있지만, 이 두 가지는 모습만 같지 기능은 전혀 다르다는 것에 유의하자.

p.293
[ ! ] 8-5
집약 함수를 윈도우 함수로 사용할 때 현재 레코드를 기준으로 집계 대상 레코드가 결정된다.



[8-3 GROUPING 연산자]

학습 포인트
	•	GROUP BY 구와 집약 함수만으로는 소계, 합계를 동시에 구할 수 없다. 이것을 한번에 구하는 기능이 GROUPING 연산자다.
	•	GROUPING 연산자의 CUBE를 이해하려면 '블록으로 만든 입방체'를 생각하면 된다.
	•	GROUPING 연산자는 표준 SQL 기능이긴 하지만, 일부 DBMS에서는 아직 사용할 수 없다.



합계 행도 함께 구하고 싶다
3장 3-2절에서 GROUP BY 구와 집약 함수 사용법을 배울 때, 표 8-1과 같은 결과를 GROUP BY구로 구할 수 있는 방법이 없을지 고민한 독자도 있을 것이다.


리스트 8-10  GROUP BY 로는 합계 행을 구할 수 없다
SELECT goods_classify, SUM(sell_price)
  FROM Goods
 GROUP BY goods_classify;
>>
goods_classify |  sum
----------------+-------
 의류           	|  5000
 사무용품       	|   600
 주방용품       	| 11180


GROUP BY 구는 집약 축이 되는 키를 지정하는 곳이기 때문에 여기서 지정한 키로 분할만 될 뿐이다. 이 때문에 합계 행이 출력되지 않는 것은 당연하다고도 볼 수 있다. '합계'라는 행은 집약 키를 아무것도 지정하지 않았을 때의 집약 결과이기 때문에 아래의 3행과는 집약 키부터 다르다고 할 수 있다. 이것을 한 번에 구하는 것은 일반적인 생각으로 무리라고 할 수 있다.

그래도 이것을 무리하게 구하고 싶다면, 합계 행과 상품분류별 집약 결과를 별도로 구해서 이것을 UNION ALL(주 8-11)로 '병합'시키는 것이 예전부터 사용된 방법이다(리스트 8-11).

[주 8-11]
UNION ALL 대신에 UNION을 사용해도 상관은 없지만, 두 SELECT 문이 집약 키가 다른 이상 절대로 중복행이 발생하지 않는 것이 보장되기 때문에 UNION ALL을 사용할 수 있다. UNION ALL은 UNION과 달리 소트를 하지 않아서 UNION보다 성능이 좋은 것이 이점이다.

181123
p.89
"GROUP BY 구에 지정하는 열을 집약 키 또는 그룹화 열이라고 부른다."
-> The first select clause has NONE aggregation key and the second select clause has 'goods_classify as aggregation key.


181123 MYWAY

SELECT '합계', SUM(sell_price)
FROM Goods
UNION ALL
SELECT goods_classify, SUM(sell_price)
FROM Goods
GROUP BY goods_classify
ORDER BY sum;


리스트 8-11  합계 행과 집약 결과를 별도로 구해서 UNION ALL 로 병합
SELECT '합계' AS goods_classify, SUM(sell_price)
  FROM Goods
UNION ALL
SELECT goods_classify, SUM(sell_price)
  FROM Goods
GROUP BY goods_classify;
>>
 goods_classify |  sum
----------------+-------
 합계           | 16780
 의류           |  5000
 사무용품       |   600
 주방용품       | 11180


이와 같이 원하는 결과는 구할 수 있지만, 거의 같은 SELECT 문을 2회 실행햇해서그 결과를 병합하기 때문에 외형적으로도 중복이 있고 DBMS 내부적으로도 처리 리소스가 높아진다. 조금 더 스마트한 방법은 없을까?


p.296
ROLLUP - 합계와 소계를 한번에 구한다

이러한 현장 SQL 사용자의 요청에 따라 표준 SQL에 도입된 것이 이번 절의 주인공인 GROUPING 연산자다. 이것을 사용함으로써 앞서 언급한 경우와 같이 집약 단위가 다른 집약 결과를 SQL로 간단히 구할 수 있다.

GROUPING 연산자에는 다음의 세 가지 종류가 있다(주 8-12)

	•	ROULLUP
	•	CUBE
	•	GROUPING SETS


p.296
[주 8-12]
지금 시점에 GROUPING 연산자는 PostgreSQL, MySQL에서는 지원하지 않는다(단, MySQL에서는 ROLLUP만 이용할 수 있다). 상세 내용은 칼럼'GROUPING 연산지 지언 현황'을 참고하기 바란다.


ㅁ ROLLUP 사용법
우선은 ROLLUP 부터 학습하도록 하자. 이것을 사용하면 앞에서 언급한 합계행을 구하는 SELECT 문을 간단히 작성할 수 있다(리스트8-12).


리스트 8-12 ROLLUP으로 합계 행과 소계를 함께 구한다
SELECT goods_classify, SUM(sell_price) AS sum_price
  FROM Goods
 GROUP BY ROLLUP(goods_classify);
>>
goods_classify | sum_price
----------------+-----------
       		        |     16780
 의류      	        |      5000
 사무용품           |       600
 주방용품           |     11180

* MYSQL
SELECT goods_classify, SUM(sell_price) AS sum_price
  FROM Goods
 GROUP BY goods_classify WITH ROLLUP;


구문은 GROUP BY 구의 집약 키 리스트에 ROLLUP (<열1>, <열2>, ⋅⋅⋅) 와 같이 사용한다. 이 연산자의 역할을 한마디로 말하면, '집약 키 조합이 다른 결과를 한 번에 계산한다'라고 할 수 있다. 예를 들어, 이 예에서는 다음과 같은 두 가지 조합에 대한 집약을 한 번에 계산하고 있다.

① GROUP BY ( )
② GROUP BY (goods_classify)

①의 GROUP BY ( )는 집약 키가 없는 경우, 즉 GROUP BY 구가 없는 경우와 동일하다(이것은 전체의 합계 행을 계산한다). 이 합계 행 레코드를 초집합행(super group row)이라고 한다. 명칭이 어색할 수 있는데, GROUP BY 구로는 만들 수 없는 합계 행이라고 이해하면 된다. 초집합행의 goods_classify 열은 키 값이 (DBMS에 따라서는) 불명확하기 때문에 기본값으로 NULL이 사용된다. 여기에 적당한 문자열을 삽입하는 방법에 대해선 뒤에 설명하도록 하겠다.

[ ! ] 8-6
초집합행의 집약 키는 기본값으로 NULL을 사용한다.


p.297
ㅁ 집약 키에 '등록일'을 추가한 경우
앞서 다룬 열만으론 아직 개념이 잡히지 않을 수 있기 때문에 집약 키에 '등록일'이란 열을하나 더 추가한 경우를 보도록 하자. 우선, ROLLUP이 없는 경우부터 보자(리스트 8-13).

리스트 8-13  GROUP BY에 '등록일' 추가(ROLL UP 없음)
SELECT goods_classify, register_date, SUM(sell_price) AS sum_price
  FROM Goods
 GROUP BY goods_classify, register_date
 ORDER BY register_date;
>>
goods_classify | register_date | sum_price
----------------+---------------+-----------
 주방용품       | 2008-04-28    |       880
 주방용품       | 2009-01-15    |      6800
 사무용품       | 2009-09-11    |       500
 주방용품       | 2009-09-20    |      3500
 의류           | 2009-09-20    |      1000
 사무용품       | 2009-11-11    |       100
 의류           |               |      4000


181124 MYTRY
It is same even when swapping two columns in GROUP BY clause

SELECT goods_classify, register_date, SUM(sell_price) AS sum_price
  FROM Goods
 GROUP BY register_date, goods_classify;
 ORDER BY register_date;
>>
goods_classify | register_date | sum_price
----------------+---------------+-----------
 주방용품       | 2008-04-28    |       880
 주방용품       | 2009-01-15    |      6800
 사무용품       | 2009-09-11    |       500
 주방용품       | 2009-09-20    |      3500
 의류             | 2009-09-20    |      1000
 사무용품       | 2009-11-11    |       100
 의류             |               |      4000


이에 반해 GROUP BY 구에 ROLL UP을 추가하면 결과는 어떻게 바뀔까(리스트 8-14).

리스트 8-14  GROUP BY에 '등록일' 추가 (ROLLUP 있음)
SELECT goods_classify, register_date, SUM(sell_price) AS sum_price
  FROM Goods
 GROUP BY ROLLUP(goods_classify, register_date);

* MySQL
SELECT goods_classify, register_date, SUM(sell_price) AS sum_price
  FROM Goods
 GROUP BY goods_classify, register_date WITH ROLLUP;


>>
goods_classify | register_date | sum_price
--------------+---------------+-----------
                	    |              	    |     16780
 사무용품       | 2009-11-11    |       100
 사무용품       | 2009-09-11   |       500
 의류             | 2009-09-20  |      1000
 주방용품       | 2009-01-15   |      6800
 주방용품       | 2008-04-28  |       880
 주방용품       | 2009-09-20  |      3500
 의류             |      	            |      4000
 의류             |            	   |      5000
 사무용품       |            	   |       600
 주방용품       |            	   |     11180


181124 MYTRY

SELECT goods_classify, register_date, SUM(sell_price) AS sum_price
  FROM Goods
 GROUP BY ROLLUP(register_date, goods_classify);

>>
goods_classify | register_date | sum_price
----------------+---------------+-----------
① GROUP BY ()
  	                |    	   	       	    |     16780
③ GROUP BY (goods_classify, register_date)
	 의류         | 2009-09-20      |      1000
	 의류         |               	   	    |      4000
	 사무용품   | 2009-09-11       |       500
	 주방용품   | 2009-09-20      |      3500
	 주방용품   | 2009-01-15       |      6800
	 주방용품   | 2008-04-28      |       880
	 사무용품   | 2009-11-11   	    |       100
② GROUP BY (register_date)
	                |           		    |      4000
	                | 2009-11-11    	    |       100
	                | 2009-09-20      |      4500
	                | 2009-09-11       |       500
	                | 2009-01-15       |      6800
	                | 2008-04-28      |       880


양쪽 결과를 비교해 보면 가장 위의 합계 행 및 3개의 상품분류 소계 행(즉, 집약 키로 등록일을 사용하지 않은 레코드)이 추가되어 있다. 이 4행이 초집합행이다. 즉, 이 SELECT 문의 결과는 다음 세가지 패턴의 집약 레벨이 다른 결과를 UNION으로 연결한 형태다(그림 8-5).

① GROUP BY ()
② GROUP BY (goods_classify)
③ GROUP BY (goods_classify, register_date)


181124  MYEXPLANATION

goods_classify | register_date | sum_price
--------------+---------------+-----------
① GROUP BY ()
                	    |              	    |     16780

③ GROUP BY (goods_classify, register_date)
 사무용품       | 2009-11-11    |       100
 사무용품       | 2009-09-11   |       500
 의류             | 2009-09-20  |      1000
 주방용품       | 2009-01-15   |      6800
 주방용품       | 2008-04-28  |       880
 주방용품       | 2009-09-20  |      3500
 의류             |      	            |      4000

② GROUP BY (goods_classify)
 의류             |            	   |      5000
 사무용품       |            	   |       600
 주방용품       |            	   |     11180


ROLLUP이란, '말아 올리다'라는 의미다. 블라인드 등을 말아 올릴 때 사용하는 용어다. 가장 레벨이 낮은 집약 레벨부터 소계 -> 합계 순으로 집약 단위가 점점 커져가는 동작을 나타낸다.

[ ! ] 8-7
ROLLUP은 합계, 소계를 한 번에 구할 수 있는 편리한 도구다.


p.300
COLUMN
GROUPING 연산자 지원 현황

이 절의 GROUPING 연산자도 8-1에서 소개한 윈도우 함수처럼 OLAP 용도로 추가된 기능으로, 비교적 새로운 기능이다(표준 SQL에 추가된 것은 SQL: 1999). 이 때문에 아직 이를 지원하지 않는 DBMS가 존재한다. 2014년 7월시점에서는 Oracle11g, SQL Server 2008, DB2 9.7에서는 문제없이 동작하지만, PostgreSQL 9.3, MySQL 5.7에서는 지원하지 않는다.

GROUPING 연산자를 지원하지 않는 DBMS에서 합계나 소계를 포함한 결과를 얻으려면, 이번 장 처음에 소개한 것처럼 복수의 SELECT 문을  UNION ALL로 병합하는 방법밖에 없다.

참고로, MySQL 은 조금 사정이 복잡해서 변칙적이긴 하지만 ROLLUP만은 사용할 수 있다. 여기서 '변칙적'이라고 한 이유는 다음과 같은 독자 구문을 이용해야 하기 때문이다.
...
유감스럽게도 MySQL 5.7에서는 CUBE와 GROUPING SETS는 사용할 수 없다. 이후 버전에서는 지원될 것을 기대해본다.


p.300
GROUPING 함수 - 가짜 NULL을 알아내라

눈치챈 사람도 있겟지만, 앞의 ROLLUP결과에서 조금 이상한 현상이 발생했다. 문제는 의류 그룹이다. 이 그룹에는 register_date 열이 NULL인 레코드가 2행 존재한다. 이 NULL은 각각 다른 원인으로 생겨난 것이다.

sum_price가 4000원인 행은 원 상품 테이블에서 와이셔츠의 등록일이 NULL이어서 집약 키로 NULL이 사용된 것이다. 이것은 앞에서도 봤던 현상이다.

반면, sum_price가 5000원인 행은 틀림없이 초집합행이 NULL이다(내역은 1000+4000=5000). 하지만 양쪽 모두 'NULL'이라는 문자로 표시되고 있기 때문에 매우 혼란스러울 수 있다.

이런 혼동을 방지하기 위해 초집합행의 NULL을 판별할 수 있는 GROUPING 함수가 존재한다. 이 함수는 인수로 지정한 열의 값이 초집합행 NULL인경우 1을, 이외의 값이면 0을 반환한다(리스트 8-15).



리스트 8-15  GROUPING 함수로 NULL 판별
SELECT GROUPING(goods_classify) AS goods_classify,
            GROUPING(register_date) AS register_date, SUM(sell_price) AS sum_price
  FROM Goods
 GROUP BY ROLLUP(goods_classify, register_date);
>>
goods_classify | register_date | sum_price
----------------+---------------+-----------
	              1 |             1 |     16780
	              0 |             0 |       100
	              0 |             0 |       500
	              0 |             0 |      1000
	              0 |             0 |      6800
	              0 |             0 |       880
	              0 |             0 |      3500
	              0 |             0 |      4000
	              0 |             1 |      5000
	              0 |             1 |       600
	              0 |             1 |     11180


이것으로 초집합행 NULL과 원래 데이터가 NULL인 경우를 판별할 수 있다. 또한, GROUPING 함수를 사용하면 초집합행 키 값에 적당한 문자열을 삽입할 수도 있다. 즉, GROUPING함수 반환 값이 1인 경우에는 '합계'나 '소계'라는 문자열을 지정하고, 그 이외의 반환 값이면 열 값을 사용하면 된다(리스트 8-16).



리스트 8-16
SELECT CASE WHEN GROUPING(goods_classify) = 1
            THEN '상품분류 합계'
            ELSE goods_classify END AS goods_classify,
       CASE WHEN GROUPING(register_date) = 1
            THEN '등록일 합계'
            ELSE CAST(register_date AS VARCHAR(16)) END AS register_date,
       SUM(sell_price) AS sum_price
  FROM Goods
 GROUP BY ROLLUP(goods_classify, register_date);
>>
goods_classify | register_date | sum_price
----------------+---------------+-----------
 상품분류 합계  | 등록일 합계   |     16780
 사무용품       | 2009-11-11    |       100
 사무용품       | 2009-09-11    |       500
 의류           | 2009-09-20    |      1000
 주방용품       | 2009-01-15    |      6800
 주방용품       | 2008-04-28    |       880
 주방용품       | 2009-09-20    |      3500
 의류           |               |      4000
 의류           | 등록일 합계   |      5000
 사무용품       | 등록일 합계   |       600
 주방용품       | 등록일 합계   |     11180



181124 MYTRY

SELECT CASE WHEN GROUPING(goods_classify) = 1
            THEN '상품분류 합계'
            ELSE goods_classify END AS goods_classify,
       CASE WHEN GROUPING(register_date) = 1
            THEN '등록일 합계'
            ELSE CAST(register_date AS VARCHAR(16)) END AS register_date,
       SUM(sell_price) AS sum_price
  FROM Goods
 GROUP BY ROLLUP(goods_classify, register_date)
 ORDER BY goods_classify, sum_price;
>>
goods_classify | register_date | sum_price
----------------+---------------+-----------
 의류        	    | 2009-09-20    |      1000
 의류        	    |              	 |      4000
 의류      	    | 등록일 합계  	 |      5000
 사무용품       | 2009-11-11    |       100
 사무용품       | 2009-09-11    |       500
 사무용품       | 등록일 합계   	|       600
 주방용품       | 2008-04-28    |       880
 주방용품       | 2009-09-20    |      3500
 주방용품       | 2009-01-15    |      6800
 주방용품       | 등록일 합계  	 |     11180
 상품분류 합계| 등록일 합계  	 |     16780


실무에서나 합계나 소계가 있는 집계 결과를 구하는 경우 이런 형식의 결과가 가장 많을 것이다. 이럴 때는 ROLLUP과 GROUPING 함수를 사용하도록 하자.
참고로, SELECT 구의 register_date 열을 다음과 같이 문자열형으로 변환하는 이유는 무엇일까?

CAST(register_date AS VARCHAR(16))

이것은 CASE 식의 반환 값은 모든 분기식에 일치해야 한다는 제약을 만족시키기 위해서다. 이것을 하지 않으면 분기에 의해 날짜형, 문자형 등 가지각색의 파라미터 데이터형을 반환하게 돼서 실행 시 에러가 발생한다.

[ ! ] 8-8
GROUPING 함수를 사용하면 원래 데이터가 NULL인 경우와 초집합행 NULL인 경우를 간단히 알아낼 수 있다.


p.303
CUBE 데이터로 블록을 만든다

ROLLUP 다음으로 자주 사용하는 GROUPING 연산자가 CUBE다. 이것은 '입방체'라는 의미이며, ROLLUP과 마찬가지로 동작을 연상해서 붙인 명칭이다. 어떤 동작인지지 샘플을 통해 확인하도록 하자.

구문은 ROLLUP과 동일하기 때문에 ROLLUUP 부분을 CUBE로 바꾸기만 하면 된다. 리스트 8-16의 SELECT 문에서 ROLLUP을 CUBE 로 바꾸면 다음과 같다(리스트 8-17).

리스트 8-17
SELECT CASE WHEN GROUPING(goods_classify) = 1
            THEN '상품분류 합계'
            ELSE goods_classify END AS goods_classify,
       CASE WHEN GROUPING(register_date) = 1
            THEN '등록일 합계'
            ELSE CAST(register_date AS VARCHAR(16)) END AS register_date,
       SUM(sell_price) AS sum_price
  FROM Goods
 GROUP BY CUBE(goods_classify, register_date)
 ORDER BY goods_classify, sum_price;
>>
goods_classify | register_date | sum_price
----------------+---------------+-----------
 의류           | 2009-09-20    |      1000
 의류           |               |      4000
 의류           | 등록일 합계   |      5000
 사무용품       | 2009-11-11    |       100
 사무용품       | 2009-09-11    |       500
 사무용품       | 등록일 합계   |       600
 주방용품       | 2008-04-28    |       880
 주방용품       | 2009-09-20    |      3500
 주방용품       | 2009-01-15    |      6800
 주방용품       | 등록일 합계   |     11180
 상품분류 합계  | 2009-11-11    |       100
 상품분류 합계  | 2009-09-11    |       500
 상품분류 합계  | 2008-04-28    |       880
 상품분류 합계  |               |      4000
 상품분류 합계  | 2009-09-20    |      4500
 상품분류 합계  | 2009-01-15    |      6800
 상품분류 합계  | 등록일 합계   |     16780


CUBE는 ROLLUP 결과에 더해 몇 행이 더 추가되는 형식이다. 추가된 행을 보면 알겠지만, 집약 키로 register_date만을 사용한 경우가 추가되었다.

① GROUP BY ()
② GROUP BY (goods_classify)
③ GROUP BY (register_date)		<-  추가된 조합
④ GROUP BY (goods_classify, register_date)

CUBE란, GROUP BY에 부여된 집약 키를 '가능한 모든 조합'으로 섞어서 하나의 결과에 포함시키는 기능이다. 이 때문에 조합수는 2ⁿ(n은 키 수)이 된다.
예에서는 키가 2개이기 때문에 '2² = 4'이다. 하나 더 추가한 3개의 경우는 '2³ = 8'이 된다(주 8-13)

[주 8-13]
ROLLUP의 경우 조합 수는 n + 1이다. 조합 수가 늘어나면 결과 행 수도 늘어나기 때문에 CUBE 를 사용할 때는 주의해야 한다. 잘못하면 집약한 결과임에도 불구하고 대량의 결과가 반환될 수 있다. 참고로, ROLLUP 결과는 반드시 CUBE 결과의 부분 집합으로 포함된다.


여기까지 읽었지만 아직 CUBE 연산자가 왜 입방체인지 의아하게 생각하는 독자가 많을 것이다. 입방체란 가로, 세로, 깊이라는 세 가지 축으로 구성되는 3차원 입체다. CUBE에서는 하나의 집약 키를 하나의 축으로 세워서 데이터를 블록과 같이 쌓아 올리는 형태가 만들어진다(그림 8-6).

그림 8-6 CUBE  실행 도식화
...

이번 샘플에서는 상품분류(goods_classify)와 등록일(register_date) 2축만 있기 때문에 오히려 square(정방향)라는 용어가 어울릴 수 있지만, 정방체는 1축이 모자란 입방체라고 생각하면 좋다. 또한, CUBE에서 4축 이상을 지정하는 것도 가능하기 때문에 이 경우는 4차원 이상의 세계에 침입하게 되어 그림으로는 형태를 표현할 수 없게 된다.

[ ! ] 8-9
CUBE는 집약 키로 나눈 블록을 쌓아서 만든 입방체를 연상하면 이해하기 쉽다.



p.305
GROUPING SETS - 원하는 블록만 취득한다

마지막으로 소개할 GROUPING 연산자는 GROUPING SETS다. 이것은 ROLLUUP이나 CUBE에서 구한 결과 중 일부 레코드만 필요한 경우에 사용한다. 예를 들어, 앞의 CUBE 결과는 집약 키의  모든 가능한 조합을 구했다. 이 중에서 '상품분류, '등록일' 각각을 단독 집약 키로 한 경우만 구하고싶다. 반대로 말하면, '합계 레코드와 집약 키로 2개 키를 사용한 레코드가 불필요한 경우에 GROUPING SETS를 이용한다(리스트 8-18).

리스트 8-18
SELECT CASE WHEN GROUPING(goods_classify) = 1
            THEN '상품분류 합계'
            ELSE goods_classify END AS goods_classify,
       CASE WHEN GROUPING(register_date) = 1
            THEN '등록일 합계'
            ELSE CAST(register_date AS VARCHAR(16)) END AS register_date,
       SUM(sell_price) AS sum_price
  FROM Goods
 GROUP BY GROUPING SETS (goods_classify, register_date);

>>
goods_classify | register_date | sum_price
----------------+---------------+-----------
 의류           | 등록일 합계   |      5000
 사무용품       | 등록일 합계   |       600
 주방용품       | 등록일 합계   |     11180
 상품분류 합계  |               |      4000
 상품분류 합계  | 2009-11-11    |       100
 상품분류 합계  | 2009-09-20    |      4500
 상품분류 합계  | 2009-09-11    |       500
 상품분류 합계  | 2009-01-15    |      6800
 상품분류 합계  | 2008-04-28    |       880

이 결과에는 이미 전체 합계 행(16780원)은 존재하지 않는다. 이와 같이 ROLLUP이나 CUBE가 규칙적인(업무적인 표현으로는 '정형적'인) 결과를 얻을 수 있는데 반해, GROUPING SETS는 그 중에서 조건을 개별 지정해서 추출하고 비정형저긴 결과를 얻고자 할 때 사용한다. 이런 변칙적인 결과가 바람직한 경우는 매우 제한적이기 때문에 ROLLUP이나 CUBE에 비해 GROUPING SETS를 사용하는 경우는 적을 것이다.




p.307
8.2 계속해서 Goods 테이블을 이용한다. 레코드를 등록일(register_date) 오름차순으로 정렬한 경우의 각 날짜별 판매단가(sell_price) 합계를 구한다. 단, 등록일이 NULL인 '와이셔츠' 레코드가 가장 처음에 오도록(즉, 다른 날짜보다 오래된 데이터가 되도록) 정렬하도록 한다.



181125
MYWAY

1 )
SELECT DISTINCT register_date,
	SUM(sell_price) OVER (partition by register_date ORDER BY register_date)
FROM Goods
ORDER BY register_date;
>>
register_date | sum
---------------+------
 2008-04-28    |  880
 2009-01-15     | 6800
 2009-09-11     |  500
 2009-09-20    | 4500
 2009-11-11      |  100
	                  | 4000
(X)

2 )
SELECT DISTINCT register_date,
	SUM(sell_price) OVER (partition by register_date ORDER BY register_date)
FROM Goods
ORDER BY register_date DESC;
>>
register_date | sum
---------------+------
              		 | 4000
 2009-11-11      |  100
 2009-09-20    | 4500
 2009-09-11     |  500
 2009-01-15     | 6800
 2008-04-28    |  880
(X)


3 )
SELECT DISTINCT CASE WHEN register_date IS NULL THEN ' '
	ELSE CAST(register_date AS VARCHAR(16)) END,
	SUM(sell_price) OVER (PARTITION BY register_date ORDER BY register_date)
FROM Goods
ORDER BY register_date;
(O)

 register_date | sum
---------------+------
    		         | 4000
 2008-04-28   |  880
 2009-01-15    | 6800
 2009-09-11    |  500
 2009-09-20   | 4500
 2009-11-11     |  100


p.334
BOOK ANSWER
8.2
>>
1 )
2018.11.26
"Turn the NULL field in register date into '0001-01-01' to make it come first. But because it is ORDER BY clause in OVER, it doesn't affect the register field in the result-set"

SELECT register_date, goods_name, sell_price,
       SUM (sell_price) OVER (ORDER BY COALESCE(register_date, CAST('0001-01-01' AS DATE))) AS current_sum_price
  FROM Goods;
>>
 register_date | goods_name | sell_price | current_sum_price
---------------+------------+------------+-------------------
             		 | 와이셔츠   	|       4000   |              4000
 2008-04-28    | 도마         	|        880    |              4880
 2009-01-15     | 압력솥      	|       6800   |             11680
 2009-09-11     | 펀칭기      	|        500    |             12180
 2009-09-20    | 티셔츠      	|       1000   |             16680
 2009-09-20    | 식칼         	|       3000   |             16680
 2009-09-20    | 포크         	|        500    |             16680
 2009-11-11      | 볼펜         	|        100    |             16780


2-1 )
SELECT register_date, goods_name, sell_price,
       SUM (sell_price) OVER (ORDER BY register_date NULLS FIRST) AS current_sum_price
  FROM Goods;
>>
 register_date | goods_name | sell_price | current_sum_price
---------------+------------+------------+-------------------
             		 | 와이셔츠   	|       4000   |              4000
 2008-04-28    | 도마         	|        880    |              4880
 2009-01-15     | 압력솥      	|       6800   |             11680
 2009-09-11     | 펀칭기      	|        500    |             12180
 2009-09-20    | 티셔츠      	|       1000    |             16680
 2009-09-20    | 식칼         	|       3000   |             16680
 2009-09-20    | 포크         	|        500    |             16680
 2009-11-11      | 볼펜         	|        100     |             16780


2-2 )
SELECT DISTINCT register_date,
	SUM(sell_price) OVER (partition by register_date ORDER BY register_date)
FROM Goods
ORDER BY register_date NULLS FIRST;
>>
 register_date | sum
---------------+------
    		         | 4000
 2008-04-28   |  880
 2009-01-15    | 6800
 2009-09-11    |  500
 2009-09-20   | 4500
 2009-11-11     |  100



181126  Grouping operator vs GROUPING functions vs GROUPING SETS

1 ) Grouping operator
p. 296
Grouping 연산자에는 다음의 세 가지 종류가 있다.
	•	ROLL UP
	•	CUBE
	•	GROUPING SETS


2 )  GROUPOING functions
p.300
...
이런 혼동을 방지하기 위해 초집합행의  NULL을 판별할 수 있는 GROUPING 함수가 존재한다. 이 함수는 인자로 지정한 열의 값이 초집합행 NULL인 경우 1을, 이외의 값이면 0을 반환한다(리스트 8-15)


3 ) GROUPING SETS
p.305
마지막으로 소개할 Grouping 연산자는 GROUPING SETS 다. 이것은 ROLLUP이나 CUBE에서 구한 결과 중 일부 레코드만 필요한 경우에 사용한다. 예를 들어, 앞의 CUBE 결과는 집약 키의모든 가능한 조합을 구했다. 이 중에서 '상품분류', '등록일' 각각을 단독 집약 키로 한 경우만 구하고 싶다. 반대로 말하면, '합계 레코드와 집약 키로 2개 키를 사용한 레코드가 불필요한 경우에 GROUPING SETS를 이용한다(리스트 8-18).
