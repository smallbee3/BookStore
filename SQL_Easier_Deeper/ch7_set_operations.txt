[SQL더쉽게] Ch7 집합 연산


p.243
[7-1 테이블 덧셈과 뺄셈]

학습 포인트
* 집합 연산이란, 레코드끼리 더하거나 빼는, 이른바 레코드 사칙연산이다.
* 집합 연산은 UNION(합), INTERSECT(교차), EXCEPT(차) 등의 집합 연산자를 사용한다.
* 집합 연산자는 중복 행을 제외한다.
* 집합 연산자에서 중복 행을 포함하려면 ALL 옵션을 사용한다.


집합 연산이란?
이번 장에서 학습하는 것은 '집합 연산'이라는 처리다. 수학에서는 '집합'을 '(다양한) 사물의 모임'을 가리키지만, 테이블 세계에서는 '레코드 집합'을 의미한다. '레코드 집합'이란, 구체적으로 테이블 자체를 의미할 수도 있고, 뷰나 쿼리의 실행 결과이기도 하다.

지금까지도 테이블에서 레코드를 선택하거나 데이터를 등록하는 방법을 배웠지만, 집합 연산은 레코드끼리 더하거나 빼는, 이른바 레코드 '사칙연산'이다. 집합 연산을 통해서 두 개의 테이블에 있는 레코드를 모은 결과나 공통 레코드를 모은 결과, 한쪽에만 있는 레코드를 모은 결과 등을 취득할 수 있다. 그리고 이런 집합 연산을 처리하는 연산자를 '집합 연산자'라고 한다.


테이블 덧셈 - UNION
가장 먼저 소개할 집합 연산자는 레코드 덧셈을 하는 UNION(합)이다. 실제 사용법을 보기 전에 샘플 테이블을 하나 추가하도록 한다. 지금까지 사용했던 Goods(상품) 테이블과 동일한 구조로 테이블명만 다른 Goods2(상품2)라는 테이블을 만든다.

...

준비가 되었으면 바로 이 두 개의 테이블을 가지고 'Goods 테이블 + Goods2 테이블' 형태로 덧셈을 해 보도록 하자.

리스트 7-3
SELECT goods_id, goods_name
  FROM Goods
UNION
SELECT goods_id, goods_name
  FROM Goods2;

결과는두 개의 테이블에 포함되어 있는 레코드가 모두 망라된 형태가 된다. 이 연산 결과는 학교에서 배운 집합론의 '합집합'에 해당한다. 벤다이어그램으로 그려보면 더 확실해진다.

상품ID '001~0003'인 3개 레코드는 양쪽 테이블에 모두 존재하기 때문에 단순히 생각하면 중복해서 결고에 출력된다고 생각할 수도 있다. 하지만 UNION 뿐만 아니라 집합 연산자는 모두 중복 행을 제외한다.


p.245
[ ! ] 7-1
집합 연산자는 중복 행을 제외한다.


p.246
집합 연산의 주의사항
이 중복 행을 결과에 포함시킬 수도 있지만, 그 전에 우선 집합 연산자를 사용할 때의 일반적인 주의사항을 알아 보도록 하자. 이것은 UNION뿐만 아니라 이후에 학습할 모든 연산자에도 해당하는 것이다.

ㅁ 주의사항 ① - 연산 대상이 되는 레코드 열 수가 같을 것
예를 들어, 다음과 같이 한쪽 열 수가 2열이고, 다른 쪽 열 수가 3열인 경우에 덧셈이 불가능하다. 물론, 이것은 에러 처리된다.

e.g.
SELECT goods_id, goods_name
  FROM Goods
UNION
SELECT goods_id, goods_name, sell_price
  FROM Goods2;


ㅁ 주의사항 ② - 덧셈대상이 되는 레코드의 열은 같은 데이터형일 것

왼쪽부터 세서 같은 위치에 있는 열은 같은 데이터형이어야 한다. 예를 들어, 다음 SQL 문은 열수가 같아도 두 번째 데이터형이 각각 숫자형과 날짜형으로 형이 불일치한다. 따라서 에러 처리된다.

e.g.
SELECT goods_id, goods_name
  FROM Goods
UNION
SELECT goods_id, register_date
  FROM Goods2;

 어쩔 수 없이 다른 데이터형을 사용해야 한다면 6-1절에서 소개한 형 변환 함수 CAST를 사용하면 된다.


ㅁ 주의사항 ③ - SELECT 문은 어떤것이든 지정할 수 있다. 단, ORDER BY 구는 마지막에 하나만 가능
UNION으로 더할 수 있는 SELECT 문은 어떤 것이든 가능하다. 앞에서 배운 WHERE, GROUP BY 같은 구를 사용할 수도 있다. 단, ORDER BY 구만은 전체적으로 하나마 마지막 부분에 사용할 수 있다.

리스트 7-4
SELECT goods_id, goods_name
  FROM Goods
 WHERE goods_classify = '주방용품'
UNION
SELECT goods_id, goods_name
  FROM Goods2
 WHERE goods_classify = '주방용품'
ORDER BY goods_id;


p.247
중복 행을 포함하는 집합 연산 - ALL 옵션

그러면 UNION 결과로부터 중복 행을 제외하지 않는 구문을 보도록 하자. 단순히 UNION 뒤에 'ALL'이라는 키워드를 추가하기만 하면 된다. 이 ALL 옵션은 UNION 이외의 집합 연산자에서도 동일하게 사용할 수 있다

리스트 7-5
SELECT goods_id, goods_name
  FROM Goods
UNION ALL
SELECT goods_id, goods_name
  FROM Goods2;


p.248
테이블 간 공통 부분 선택 - INTERSECT

다음으로 소개할 집합 연산자는 숫자의 사칙연산에는 없는 개념이다. 그렇다고 해서 어려운 것이 아니고, 두 레코드 집합의 공통 부분을 선택하는 것으로 INTERSECT(교차)라고 한다.

p.248
[주 7-2]
MySQL은 INTERSECT를 지원하지 않기 때문에 사용할 수 없다.



리스트 7-6
SELECT goods_id, goods_name
  FROM Goods
INTERSECT
SELECT goods_id, goods_name
  FROM Goods2
ORDER BY goods_id;
>>
 goods_id | goods_name
----------+------------
 0001     | 티셔츠
 0002     | 펀칭기
 0003     | 와이셔츠


결과는 두 개의 테이블에 공통으로 포함되어 있던 레코드만 선택한다. 이 연산을 도식화해서 벤다이어그램으로 그려 보면 확실해진다(그림 7-2).


AND가 하나의 테이블 안에서 복수의 조건을 만족하는 공통 부분을 선택하는 것에 비해 INTERSECT는 반드시 두 개의 테이블을 사용해서 테이블 간 공통 레코드를 선택한다.

주의사항은 UNION과 동일하며, '집합 연산 주의사항'이나 '중복 행을 포함하는 집합 연산'에서 설명한 내용과 같다. 중복 행을 포함하고 싶은 경우에는 'INTERSECT ALL'로 기술하는 것도 같다.



p.249
레코드 뺄셈 - EXCEPT

마지막으로 소개할 집합 연산자는 뺄셈을 하는 EXCEPT(차)다. 이것도 구문은 UNION과 동일하다(리스트 7-7).

리스트 7-7
SELECT goods_id, goods_name
  FROM Goods
EXCEPT
SELECT goods_id, goods_name
  FROM Goods2
ORDER BY goods_id;
>>
 goods_id | goods_name
----------+------------
 0004     | 식칼
 0005     | 압력솥
 0006     | 포크
 0007     | 도마
 0008     | 볼펜


결과에서는 Goods 테이블 레코드에서 Goods2 테이블 레코드를 빼고 남은 부분이 선택된 것을 알 수 잇다. 이 연산을 도식화한 벤다이어그램이 그림 7-3이다.

EXCEPT에는 UNION과 INTERSECT에는 없는 특이한 주의사항이 있다. 그것은 뺄셈이라는 성질을 생각하면 당연할 수도 있는 것인데, 뺄셈 순서, 즉 어느 것에서 어느 것을 빼냐에 따라 결과가 달라진다는 점이다. ...
따라서 앞의 SQL에서 Goods와 Goods2를 바꾸면 리스트 7-8과 같이 된다.

SELECT goods_id, goods_name
  FROM Goods2
EXCEPT
SELECT goods_id, goods_name
  FROM Goods
ORDER BY goods_id;
>>
 goods_id | goods_name
----------+------------
 0009     | 장갑
 0010     | 주전자



이것으로 SQL이 가진 집합 연산자에 대한 학습을 마친다. 이렇게 얘기하면 '곱셈과 나눗셈은 없어?'라고 생각하는 똑똑한 독자들도 있을 것이다. 곱셈에 대한 설명할 분량이 많기 때문에 다음 절에서 상세히 배우도록 한다. 또한, SQL에 나눗셈도 있지만 이는 조금 어려운 연산으로 중급 내용에 해당하기 대문에 이번 장의 마지막 부분에 있는 칼럼에서 간단히 집고 넘어 가도록 하겠다. 관심 있는 사람은 칼럼 '관계 나눗셈'(271페이지)을 참조하도록 하자.



[주 7-3]
Oracle만은 EXCEPT가 아닌 MINUS를 사용한다. Oracle 사용자는 EXCEPT를 모두 MINUS로 바꾸어 일기 바란다. 또한, MySQL은 아직 EXCEPT를 지원하지 않는다.

* Oracle
SELECT goods_id, goods_name
  FROM Goods
MINUS
SELECT goods_id, goods_name
  FROM Goods2
ORDER BY goods_id;



[7-2 결합(테이블을 열 지향으로 연결한다)]

학습포인트
* 결합(JOIN)이란, 다른 테이블의 열을 가지고 와서 '열을 늘리는' 집합 연산이다. UNION이 테이블 간 행 지향(가로 지향)으로 연결하는 것에 반해, 결합은 열 지향(세로 지향)으로 연결한다.
* 기본 결합에는 내부 결합과 외부 결합, 두 가지가 있다. 우선, 이 두 가지를 제대로 마스터해 보자.
* 결합 연산의 옛날 구문이나 개별 구문은 사용하지 말고 반드시 표준 SQL구문을 사용할 것. 단, 옛날 구문이나 개별 구문을 보고서 이해할 수는 있어야 한다.


결합이란?
앞 절에서 UNION이나 INTERSECT 같은 집합 연산을 배웠다. 이런 집합 연산의 특징은 행 지향으로 작용한다는 것이다. 간단히 얘기하면, 이들 집합 연산을 사용하면 행 수가 늘거나 줄어든다. UNION을 사용하면 행 수가 늘고, INTERSECT나 EXCEPT를 사용하면 행 수가 줄어든다.
한편 이들 연산에는 열 수를 변화시킬 수 있는 힘이 없다. 집합 연산의 대상 테이블은 열 수가 일치한다는 것을 전제로 하고 있기 때문에 연산 결과로 열이 늘거나 줄어드는 일은 없다.

이번 절에서 배울 결합(JOIN)이라는 연산은, 간단히 말하면 다른 테이블에서 열을 가지고 와서 '열을 늘리는' 처리다(그림 7-5). 이 처리가 도움이 되는 것은 원하는 데이터(열)를 하나의 테이블만으로 선택할 수 없는 경우다. 지금까지는 기본적으로 하나의 테이블에서 데이터를 추출하는 경우가 많았지만, 실제로는 원하는 데이터가 복수의 테이블에 분산되어 있는 경우가 많다. 이런 경우에는 복수의 테이블(3개 이상이어도 상관없다)로부터 데이터를 선택하는 것도 가능하다.

SQL의 결합에는 용도에 따라 매우 다양한 종류가 있다. 하지만 우선적으로 알아야 할 결합은 두 가지로, 내부 결합과 내부 결합을 조금 개선한 외부 결합이다. 이후로는 이 두 가지 결합을 중심으로 학습하도록 한다.


[주 7-4]
테이블 데이터에 따라서 행 수가 변하지 않는 경우도 있다.



p.254
내부 결합 - INNER JOIN

가장 먼저 배울 것은 내부 결합(INNER JOIN)이라는 결합 연산이다. 가장 자주 사용하는 것이기도 하다. '내부'라는 용어에 대해선 지금 크게 신경 쓸 필요는 없다. 뒤에서 다시 설명할 것이다.

샘플로 사용할 테이블은 지금까지 사용했던 Goods와 6장에서 만든 StoreGoods 테이블이다. 여기서 이 두 가지 테이블을 다시 보도록 하자(표 7-1과 7-2).

 goods_id | goods_name | goods_classify | sell_price | buy_price | register_date
----------+------------+----------------+------------+---------+-------
 0001     | 티셔츠     | 의류           |       1000 |       500 | 2009-09-20
 0002     | 펀칭기     | 사무용품       |        500 |       320 | 2009-09-11
 0003     | 와이셔츠   | 의류           |       4000 |      2800 |
 0004     | 식칼       | 주방용품       |       3000 |      2800 | 2009-09-20
 0005     | 압력솥     | 주방용품       |       6800 |      5000 | 2009-01-15
 0006     | 포크       | 주방용품       |        500 |           | 2009-09-20
 0007     | 도마       | 주방용품       |        880 |       790 | 2008-04-28
 0008     | 볼펜       | 사무용품       |        100 |           | 2009-11-11



 store_id | store_name | goods_id | num
----------+------------+----------+-----
 000A     | 	서울       | 0001     |  30
 000A     | 	서울       | 0002     |  50
 000A     | 	서울       | 0003     |  15
 000B     | 	대전       | 0002     |  30
 000B     | 	대전       | 0003     | 120
 000B     | 	대전       | 0004     |  20
 000B     | 	대전       | 0006     |  10
 000B     | 	대전       | 0007     |  40
 000C     | 	부산       | 0003     |  20
 000C     | 	부산       | 0004     |  50
 000C     | 	부산       | 0006     |  90
 000C     | 	부산       | 0007     |  70
 000D     | 	대구       | 0001     | 100


이 두 가지 테이블에 있는 열들을 다시 정리해 보면 표 7-3과 같다.


이 표를 보면 알 수 있듯이 두 테이블의 열은 두 개의 그룹으로 분류할 수 있다.

(a) 양쪽 테이블에 존재하는 열 -> goods_id
(b) 한쪽 테이블에만 존재하는 열 -> goods_id 이외의 열

결합이라는 연산을 한마디로 표현하면, '(a)에 속하는 열을 '다리'로 사용해서 (b)에 속하는 열들을 하나의 결과에 포함시키는 것'이다.

StoreGoods 테이블을 통해서 서울점(000A)이 상품ID '0001', '0002', '0003'인 세 가지 상품을 취급하고 있다는 것을 알 수 있다. 하지만 이 상품들의 구체적인 상품명(goods_name)이나 판매단가(sell_price)는 StoreGoods 테이블만으로는 알 수 없다. 이들 정보는 Goods 테이블에만 존재하는 열이기 때문이다. 이것은 부산점이나 대구점에서도 마찬가지다. 그래서 Goods 테이블에서 상품명(goods_name)과 판매단가(sell_price) 열을 가지고 와서 StoreGoods 테이블에 '붙여' 보도록 하겠다. 원하는 결과 형태는 다음과 같다.

리스트 7-9
SELECT TS.store_id, TS.store_name, TS.goods_id, S.goods_name, S.sell_price
  FROM StoreGoods AS TS INNER JOIN Goods AS S
    ON TS.goods_id = S.goods_id;
>>
 store_id | store_name | goods_id | goods_name | sell_price
----------+------------+----------+------------+------------
 000A     | 서울       | 0002     | 펀칭기     |        500
 000A     | 서울       | 0003     | 와이셔츠   |       4000
 000A     | 서울       | 0001     | 티셔츠     |       1000
 000B     | 대전       | 0007     | 도마       |        880
 000B     | 대전       | 0002     | 펀칭기     |        500
 000B     | 대전       | 0003     | 와이셔츠   |       4000
 000B     | 대전       | 0004     | 식칼       |       3000
 000B     | 대전       | 0006     | 포크       |        500
 000C     | 부산       | 0007     | 도마       |        880
 000C     | 부산       | 0006     | 포크       |        500
 000C     | 부산       | 0003     | 와이셔츠   |       4000
 000C     | 부산       | 0004     | 식칼       |       3000
 000D     | 대구       | 0001     | 티셔츠     |       1000


내부 결합에서 중요한 포인트는 다음 세 가지다.

ㅇ 내부 결합 포인트 ① - FROM 구

첫 번째 포인트는 지금까지 하나의 테이블만 지정했던 FROM 구에 StoreGoods와 Goods라는 두 개의 테이블을 지정하고 있는 것이다.

이것을 가능하게 하는 키워드가 'INNER JOIN'이다. ...
SELECT StoreGoods, goods_id 처럼 원래 테이블명을 그대로 사용해도 된다. 하지만 테이블명이 길면 SQL문의 가독성이 떨어지기 때문에 별명을 붙이는 것이 일반적이다.

[ ! ] 7-3
결합할 때는 FROM 구에 복수의 테이블을 기술한다.


[주 7-5]
FROM 구에서는 테이블 별명을 지정할 때는 'Goods AS S'와 같이  AS를 사용하는 것이 표준 SQL의 정식 구문이다. 단, Oracle에는 AS를 사용하면 에러 처리가 되는 이상한 개별 규칙이 존재한다. ...


ㅇ  내부 결합 포인트② - ON 구
두 번째 포인트는 'ON' 뒤에 기술하고 있는 결합 조건이다.

여기서 두 개의 테이블을 연결할 열(결합 키)을 지정한다. 이 경우는 상품ID(goods_id)가 결합 키다. ON은 결합 조건 전용 WHERE 구라고 할 수 있다. WHERE 구와  동일하게 복수의 결합 키를 지정하기 위해서 AND, OR을 사용할 수도 있다. 이 ON 구는 내부 결합을 위해선 반드시 기술해야 한다(ON이 없으면 에러가 된다). 또한, 작성 부분은 FROM 구와 WHERE 구 사이여야만 한다.

시각적으로 예를 들면 아래 그림과 같다. ON은 강으로 나뉘어진 두 개 마을을 연결하기 위한 '다리'와 같은 역할을 한다(그림 7-6).
참고로, 결합 조건은 '='을 사용해서 기술한다고 생각하는 것이 좋다. 구문적으로는 <=나 BETWEEN 같은 술어도 사용할 수 있지만, 실무에서는 90% 정도가 '=' 결합으로 충분하기 때문에 '='를 사용한다고 기억해 두자. '='를 통해 키를 연결함으로써 양쪽 테이블에서 동일한 키를 가진 레코드 간 결합이 이루어지는 것이다.


p.258
[ ! ] 7-4
내부 결합에서 ON 구는 필수, FROM과 WHERE 구 사이에 기술할 것.



ㅇ 내부 결합 포인트 ③ - SELCT 구

세번째 포인트는 SELECT 구에 지정하는 열이다.

SLECT 구에서는 TS.store_id나 S.sell_price처럼 <테이블 별명>.<열명> 형식으로 기술한다. 이것은 테이블이 하나인 경우와 달리, 결합의 경우 어떤 열을 어떤 테이블에서 가지고 오는지 혼동하기 쉽기 때문에 이를 방지하기 위해서다. 구문적으로는 양쪽 테이블에 모두 존재하는 열(여기서는 goods_id)만 이런 형태로 작성하면 되고, 다른 열은 'store_id'처럼 열명만 적어도 에러가 되지 않는다. 하지만 앞서 언급한 것처럼 '혼동을 줄이기 위해서'라도 SELECT 구의 모든 열을 <테이블 별명>.<열명> 형식으로 기술하는 것이 바람직하다.

p.259
[ ! ] 7-5
결합을 사용한 경우, SELECT  구의 열은 모두 <테이블 별명>.<열명> 형식으로 기술한다.



ㅁ 내부 결합과 WHERE 구 조합

모든 점포가 아닌, 예를 들어 서울점(000A)만을 대상으로 하고 싶으면 지금까지와 동일하게 WHERE 구 조건을 추가하면 된다. 이를 통해 리스트 7-9에서 구한 모든 점포를 대상으로 한 결과로부터 서울점만을 대상으로 한 레코드를 선택할 수 있다(리스트 7-10).

리스트 7-10
SELECT TS.store_id, TS.store_name, TS.goods_id, S.goods_name, S.sell_price
  FROM StoreGoods TS INNER JOIN Goods S
    ON TS.goods_id = S.goods_id
 WHERE TS.store_id = '000A';
>>
 store_id | store_name | goods_id | goods_name | sell_price
----------+------------+----------+------------+------------
 000A     | 서울       | 0001     | 티셔츠     |       1000
 000A     | 서울       | 0002     | 펀칭기     |        500
 000A     | 서울       | 0003     | 와이셔츠   |       4000


이와 같이 결합 연산에서 한번 테이블을 결합한 후에 WHER, GROUP BY, HAVING, ORDER BY 등의 도구들을 동일하게 사용할 수 있다. 결합에 의해 새로운 테이블(테이블명을 붙이자면 'GoodsJoinStoreGoods')이 생성되어(표 7-4)이 테이블에 대해 WHERE 구 등을 사용하고 있다고 생각하면 이해하기 쉬울 것이다.

물론, 이 '테이블'은 SELECT 문이 실행되고 있는 동안에만 존재하기 때문에 SELECT 문 실행 후에는 바로 사라진다. 이 '테이블'을 계속 유지하고 싶다면 '뷰'로 만들면 된다.




p.260
외부 결합 - OUTER JOIN

내부 결합 다음으로 중요한 것이 외부 결합(OUTER JOIN)이다. 앞서 Goods 테이블과 StoreGoods 테이블을 내부 결합해서 각 점포가 취급하고 있는 상품정보를 양쪽 테이블에서 선택했다. 이 '양쪽'이부는 것을 실현하는 것이 결합 기능이었다.

외부 결합도 두 개의 테이블을 ON 구의 결합 키를 사용해서 연결하며 양쪽 테이블에서 열을 선택한 다부 점에서 기본적인 사용법에는 차이가 없다. 다른 것은 결과의 형태다. 내부 결합 SELECT 문(리스트7-9)을 외부 결합으로 바꾼 결과는 리스트 7-11과 같다.

리스트 7-11
SELECT TS.store_id, TS.store_name, S.goods_id, S.goods_name, S.sell_price
  FROM StoreGoods AS TS RIGHT OUTER JOIN Goods AS S
    ON TS.goods_id = S.goods_id;
>>
 store_id | store_name | goods_id | goods_name | sell_price
----------+------------+----------+------------+------------
 000A     | 서울       | 0002     | 펀칭기     |        500
 000A     | 서울       | 0003     | 와이셔츠   |       4000
 000A     | 서울       | 0001     | 티셔츠     |       1000
 000B     | 대전       | 0006     | 포크       |        500
 000B     | 대전       | 0002     | 펀칭기     |        500
 000B     | 대전       | 0003     | 와이셔츠   |       4000
 000B     | 대전       | 0004     | 식칼       |       3000
 000B     | 대전       | 0007     | 도마       |        880
 000C     | 부산       | 0006     | 포크       |        500
 000C     | 부산       | 0007     | 도마       |        880
 000C     | 부산       | 0003     | 와이셔츠   |       4000
 000C     | 부산       | 0004     | 식칼       |       3000
 000D     | 대구       | 0001     | 티셔츠     |       1000
	       |            | 0005     | 압력솥     |       6800
       	       |            | 0008     | 볼펜       |        100



ㅇ 외부 결합 포인트 ① - 한쪽 테이블 정보가 모두 출력된다

내부 결합 결과와 비교해 보면 그 차이점이 명확해진다. 결과 행 수부터 다르다. 내부 결합 결과는 13행인데 비해, 외부 결합 결과는 15행이다. 2행이 늘었는데, 이 2행은 어디서 온 것일까?

이것이 바로 외부 결합의 핵심 포인트다. 추가된 것은 압력솥과 볼펜 2행. 이 두 가지 상품은 StoreGoods 테이블에 존재하지 않는다. 즉, 현재 어떤 점포에서도 취급하지 않는 상품이라는 뜻이다. 내부 결합은 양쪽 테이블에 모두 존재하는 정보만을 선택하기 때문에 Goods 테이블에만 존재하는 두 개의 상품은 결과로 출력되지 않는다.

한편 외부 결합은 한쪽 테이블에만 존재해도 누락 없이 테이블 정보로 출력된다. 실무에서 이 방식이 사용되는 경우는, 예를 들어 행 수가 정해진(고정된) 장표를 출력해야 하는 경우다. 이런 경우에 내부 결합을 사용하면 SELECT 문을 실행한 시점의 점포 상황에 따라 결과 행 수가 변동돼서 장표 서식과 제대로 일치하지 않을 수 있다. 반면, 외부 결합을 사용하면 항상 행 수가 고정된 결과를 얻을 수 있어서 장표 서식에 부합하게 된다.

단, 테이블에 없는 정보는 알 수 없기 때문에 압력솥이나 볼펜의 점포ID나 점포명은 NULL 상태로 출력된다(구체적인 값은 아무도 알 수 없기 때문에 방법이 없다).  외부 결합이라는 명칭의 유래는 이 NULL에 있다. 즉, '원 테이블에 없는 (테이블 외부에 있는) 정보를 가지고 온다'는 의미로 '외부' 결합이라고 부르는 것이다. 반대로, 테이블 내부에서만 정보를 가지고 오는 결합을 '내부' 결합이라고 하는 것이다.



ㅇ 외부 결합 포인트 ② - 어느 쪽 테이블을 마스터로 할 것인가?

외부 결합에서 중요한 것이 한 가지 더 있다. 그것은 어느 쪽 테이블을 주(마스터)로 할 것인가다. 선택 결과에는 마스터로 지정한 테이블 정보가 모두 출력되게 된다. 이것을 지정하는 키워드가 'LEFT'와 'RIGHT'다. 명칭 그대로, LEFT를 사용하면 FROM 구에서 왼쪽에 지정한 테이블을 마스터로 하고, RIGHT를 사용하면 오른쪽 테이블을 마스터로 사용한다. 리스트 7-11에서는 RIGHT를 사용하고 있기 때문에 오른쪽에 있는 테이블, 즉 Goods를 마스터로 하고 있다. 따라서 리스트 7-12와 같이 바꾸어도 같은 결과를 얻는다.

리스트 7-12
SELECT TS.store_id, TS.store_name, S.goods_id, S.goods_name, S.sell_price
  FROM Goods AS S LEFT OUTER JOIN StoreGoods AS TS
    ON TS.goods_id = S.goods_id;

그렇다면 LEFT와 RIGHT 중 어느 것을 사용해야 할지가 문제인데, 기능적으로는 차이가 없기 때문에 어느 쪽을 사용하든 상관없다. 일반적으로는 LEFT를 사용하는 경우가 많지만, 그렇다고 RIGHT를 사용해선 안되는 것도 아니다.

[ ! ] 7-6
외부 결합에서 마스터 테이블 지정은 LEFT, RIGHT를 사용한다. 어느 쪽을 사용해도 결과는 같다.



세 개 이상의 테이블을 사용한 결합

결합의 기본적인 형태는 두 개의 테이블이지만 그렇다고 세 개 이상의 테이블을 결합할 수없는 것도 아니다. 결합할 수 있는 테이블 수에 원칙적인 제한은 없다. 그러면 세 개의 테이블을 사용한 결합을 살펴보자.

표 7-5와 같은 상품 재고를 관리하는 테이블을 만들도록 한다. 'S001'과 'S002'라는 두 창고에 상품을 보관하고 있다고 가정한다.
이 테이블을 만드는 SQL 문과 테이블에 데이터를 등록하는 SQL 문은 리스트 7-13과 같다.

리스트 7-13
CREATE TABLE StockGoods
( storage_id		CHAR(4)      NOT NULL,
  goods_id     CHAR(4)      NOT NULL,
  stock_num	INTEGER      NOT NULL,
  PRIMARY KEY (storage_id, goods_id));

BEGIN TRANSACTION;

INSERT INTO StockGoods (storage_id, goods_id, stock_num) VALUES ('S001',	'0001',	0);
INSERT INTO StockGoods (storage_id, goods_id, stock_num) VALUES ('S001',	'0002',	120);
INSERT INTO StockGoods (storage_id, goods_id, stock_num) VALUES ('S001',	'0003',	200);
INSERT INTO StockGoods (storage_id, goods_id, stock_num) VALUES ('S001',	'0004',	3);
INSERT INTO StockGoods (storage_id, goods_id, stock_num) VALUES ('S001',	'0005',	0);
INSERT INTO StockGoods (storage_id, goods_id, stock_num) VALUES ('S001',	'0006',	99);
INSERT INTO StockGoods (storage_id, goods_id, stock_num) VALUES ('S001',	'0007',	999);
INSERT INTO StockGoods (storage_id, goods_id, stock_num) VALUES ('S001',	'0008',	200);
INSERT INTO StockGoods (storage_id, goods_id, stock_num) VALUES ('S002',	'0001',	10);
INSERT INTO StockGoods (storage_id, goods_id, stock_num) VALUES ('S002',	'0002',	25);
INSERT INTO StockGoods (storage_id, goods_id, stock_num) VALUES ('S002',	'0003',	34);
INSERT INTO StockGoods (storage_id, goods_id, stock_num) VALUES ('S002',	'0004',	19);
INSERT INTO StockGoods (storage_id, goods_id, stock_num) VALUES ('S002',	'0005',	99);
INSERT INTO StockGoods (storage_id, goods_id, stock_num) VALUES ('S002',	'0006',	0);
INSERT INTO StockGoods (storage_id, goods_id, stock_num) VALUES ('S002',	'0007',	0);
INSERT INTO StockGoods (storage_id, goods_id, stock_num) VALUES ('S002',	'0008',	18);

COMMIT;


앞의 리스트 7-11에서 얻은 결과에 이 테이블에서 창고 'S001'에 보관되어 있는 재고 수 열을 추가하자. 결합 방법은 내부 결합으로 한다(외부 결합도 방법은 동일하다). 결합 키는 역시 상품ID(goods_id)가 된다(리스트 7-14).

리스트 7-14  세 개의 테이블을 내부 결합한다
SELECT TS.store_id, TS.store_name, TS.goods_id, S.goods_name, S.sell_price, ZS.stock_num
  FROM StoreGoods AS TS INNER JOIN Goods AS S
    ON TS.goods_id = S.goods_id
               INNER JOIN StockGoods AS ZS
                   ON TS.goods_id = ZS.goods_id
WHERE ZS.storage_id = 'S001';

==

SELECT TS.store_id, TS.store_name, TS.goods_id, S.goods_name, S.sell_price, ZS.stock_num
  FROM StoreGoods AS TS INNER JOIN Goods AS S
    ON TS.goods_id = S.goods_id
               INNER JOIN StockGoods AS ZS
                   ON S.goods_id = ZS.goods_id
WHERE ZS.storage_id = 'S001';



>>
 store_id | store_name | goods_id | goods_name | sell_price | stock_num
----------+------------+----------+------------+------------+-----------
 000A     | 서울       | 0001     | 티셔츠     |       1000 |         0
 000A     | 서울       | 0002     | 펀칭기     |        500 |       120
 000A     | 서울       | 0003     | 와이셔츠   |       4000 |       200
 000B     | 대전       | 0002     | 펀칭기     |        500 |       120
 000B     | 대전       | 0003     | 와이셔츠   |       4000 |       200
 000B     | 대전       | 0004     | 식칼       |       3000 |         3
 000B     | 대전       | 0006     | 포크       |        500 |        99
 000B     | 대전       | 0007     | 도마       |        880 |       999
 000C     | 부산       | 0003     | 와이셔츠   |       4000 |       200
 000C     | 부산       | 0004     | 식칼       |       3000 |         3
 000C     | 부산       | 0006     | 포크       |        500 |        99
 000C     | 부산       | 0007     | 도마       |        880 |       999
 000D     | 대구       | 0001     | 티셔츠     |       1000 |         0

리스트 11에서 내부 결합을 한 FROM 구에 다시 INNER JOIN을 사용해서 StockGoods 테이블을 추가했다.

ON 구로 결합 조건을 지정하는 것도 동일하다. 내부 결합으로 Goods 테이블과 StoreGoods 테이블의 상품ID(goods_id)를 '='로 연결하고 있다. Goods 테이블은 모두 StoreGoods 테이블과 결합되기 때문에 Goods 테이블과 StockGoods 테이블을 결합할 필요는 없다(결합해도 되지만 결과는 같다).

결합할 테이블이 4개, 5개 등으로 늘어도 INNER JOIN으로 테이블을 추가하는 방법은 동일하다.


 p.266
크로스 결합 - CROSS JOIN

계속해서 세 번째 결합 방법인 크로스 결합(CROSS JOIN)에 대해 배우도록 하자. 사실은 이 결합을 실무에서 사용하는 경우는 거의 없다(필자도 손으로 꼽을 수 있을 정도로만 사용한 적이 있다). 그럼에도 불구하고 여기서 소개하는 이유는 크로스 결합이 모든 결합 연산의 기본이 되기 때문이다.

크로스 결합 자체는 매우 간단하다. 단, 그 결과는 조금 복잡하다. 시험 삼아 Goods 테이블과 StoreGoods 테이블을 크로스 결합해 보도록 한다(리스트 7-15).

리스트 7-15
SELECT TS.store_id, TS.store_name, TS.goods_id, S.goods_name
  FROM StoreGoods AS TS CROSS JOIN Goods AS S;
>>
 store_id | store_name | goods_id | goods_name
----------+------------+----------+------------
 000A     | 서울       | 0001     | 티셔츠
 000A     | 서울       | 0002     | 티셔츠
 000A     | 서울       | 0003     | 티셔츠
 000B     | 대전       | 0002     | 티셔츠
 000B     | 대전       | 0003     | 티셔츠
 000B     | 대전       | 0004     | 티셔츠
 000B     | 대전       | 0006     | 티셔츠
 000B     | 대전       | 0007     | 티셔츠
 000C     | 부산       | 0003     | 티셔츠
 000C     | 부산       | 0004     | 티셔츠
 000C     | 부산       | 0006     | 티셔츠
 000C     | 부산       | 0007     | 티셔츠
 000D     | 대구       | 0001     | 티셔츠
 000A     | 서울       | 0001     | 펀칭기
 000A     | 서울       | 0002     | 펀칭기
 000A     | 서울       | 0003     | 펀칭기
 000B     | 대전       | 0002     | 펀칭기
 000B     | 대전       | 0003     | 펀칭기
 000B     | 대전       | 0004     | 펀칭기
 000B     | 대전       | 0006     | 펀칭기
 000B     | 대전       | 0007     | 펀칭기
 000C     | 부산       | 0003     | 펀칭기
...


방대한 결과에 당황할 수도 있을 텐데, 우선은 구문 해설부터 시작하도록 한다. 크로스 결합에서 테이블을 연결하는 것은 집합 연산자가 'CROSS JOIN(직적)'이다. 크로스 결합의 경우는 내부 결합이나 외부 결합에서 사용한 ON 구를 사용할 수 없다. 왜냐하면 크로스 결합은 두 개의 테이블에 있는 모든 레코드를 가지고 가능한 모든 조합을 만들어 내는 결합 방법이기 때문이다. 때문에 결과 행 수는 항상 두 개의 테이블이 가진 행 수를 곱한 값이 된다.
이번 예에서는 StoreGoods 테이블이 13행, Goods 테이블이 8행이기 때문에 13 x 8 = 104행의 결과가 생성되는 것이다.

기억하고 있는 사람도 있겠지만, 앞 절 마지막 부분에서 집합 연산의 곱셈은 이번 절에서 자세히 배운다고 한 것이 바로 이 크로스 결합을 두고 한 말이다.

내부 결합은 반드시 크로스 결합의 일부분이 된다. '내부'라는 것은 '크로스 결합 결과에 포함되는 부분을 가진다'라는 의미로 이해해도 된다. 반대로, 외부 결합도 '크로스 결합 결과에 포함되지 않는 부분을 가진다'라는 의미로 역시 '외부'라고 한다.

이 크로스 결합이 실무에서 사용되지 않는 이유는 두 가지가 있다. 하나는 결과 자체를 사용할 곳이 거의 없다는 것과, 다른 한 가지는 결과 행 수가 너무 많아서 연산에 많은 시간과 장비를 사용해야 한다는 점이다.


p.270
결합 개별 구문과 옛날 구문

지금까지 배운 내부 결합 및 외부 결합 구문은 정식으로 표준 SQL에 규정되어 있는 것으로 모든 DBMS에서 사용할 수 있다. 그러므로 해당 구문을 사용하면 아무 문제가 없다. 단, 시스템 개발 관련 일을 하면서 다른 사람이 쓴 코드를 읽거나 유지보수를 해야 할 기회가 반드시 있을 것이다. 이때 문제가 되는 것이 개별 구문이나 옛날 구문으로 작성된 코드다.

SQL이 개별 구문이나 옛날 구문이 많은 언어라고 이 책에서 몇 번이고 언급했지만, 결합은 그중에서 개별 구문이 가장 많이 사용되는 분야로, 연배가 있는 프로그래머나 시스템 엔지니어 중에는 아직도 개별 구문을 사용하는 사람이 적지 않다. 예를 들어, 이번 절 서두에서 사용한 내부 결합 SELECT 문(리스트 7-9)을 옛날 구문으로 바꿔 작성하면 이렇게 된다(리스트 7-16).

리스트 7-16  옛날 구문을 사용한 내부 결합(결과는 리스트 7-9와 동일)
SELECT TS.store_id, TS.store_name, TS.goods_id, S.goods_name, S.sell_price
  FROM StoreGoods TS, Goods S
 WHERE TS.goods_id = S.goods_id
   AND TS.store_id = '000A';
>>
 store_id | store_name | goods_id | goods_name | sell_price
----------+------------+----------+------------+------------
 000A     | 서울       | 0001     | 티셔츠     |       1000
 000A     | 서울       | 0002     | 펀칭기     |        500
 000A     | 서울       | 0003     | 와이셔츠   |       4000


리스트 7-10
SELECT TS.store_id, TS.store_name, TS.goods_id, S.goods_name, S.sell_price
  FROM StoreGoods TS INNER JOIN Goods S
    ON TS.goods_id = S.goods_id
 WHERE TS.store_id = '000A';



이 작성법으로도 표준 구문과 동일한 결과를 얻을 수 있다. 게다가, 이 구문은 모든 DBMS에서 사용할 수 있기 때문에 그런 의미에서는 '개별 구문'이라고 할 수 없다. 단지 '옛날' 버전일 뿐이다. 하지만 이 작성법은 오래됐을 뿐만 아니라 많은 문제를 내포하고 있어서 이용해서는 안 된다. 여기에는 세 가지 이유가 있다.

첫째, 이 구문에서는 결합 종류가 내부 결합인지 외부 결합인지(또는 다른 결합인지) 한눈에 파악할 수 없다.

둘재, 결합 조건이 WHERE 구에 쓰여 있어서 어디까지가 결합조건이고 어디까지가 레코드 제한 조건인지 바로 알 수 없다.

셋째, 이 구문을 언제까지 사용할 수 있을지가 걱정이다. 왜냐하면 대부분의 DBMS 개발사가 이 옛날 구문을 폐지하고 새로운 구문만을 제공하려 하기 때문이다.
지금 바로 사용할 수 없게 되는 것은 아니지만, 언젠가는 이 구문을 사용할 수 없는 날이 올 것이다.

하지만 이렇게 옛날 구문으로 작성된 프로그램은 이 세상에 셀 수 없이 존재해서 아직 현실에서 동작하고 있다. 여러분들도 이런 코드를 읽을 기회가 있으리라 생각되기에 지식으로도 알고 있도록 하자.

[ ! ] 7-7
결합의 옛날 작성법이나 개별 구문은 사용하지 않도록 하자. 하지만 읽을 수는 있어야 한다.



p.271
COLUMN
관계 나눗셈

이번 장에서는 다음 네 가지 집합 연산자를 학습했다.

* UNION(합)
* EXCEPT(차)
* INTERSECT(교차)
* CROSS JOIN(직적)

교차라는 독자 집합 연산도 있지만, 실제로는 '공통 부분만 취하는 특수한 UNION'이라 할 수 있다. 그리고 나머지 세 가지는 사칙 연산에도 있는 익숙한 연산이었다. 하지만 나머지 한 가지 연산, 즉 나눗셈이 아직 등장하지 않았다.

집합 연산에도 물론 나눗셈이 존재한다. 집합 연산의 나눗셈은 일반적으로 '관계 나눗셈'이라고 한다. 관계란, 테이블이나 뷰의 수학적 호칭이다. 단, UNION이나 EXCEPT 같은 전용 연산자는 가지고 있지 않다. 만약 만든다고 하면 'DIVIDE(나누다)'라는 명칭이 될지도 모르지만, 아직까지는 이런 연산자를 사용하는 DBMS는 세상에 존재하지 않는다.

왜 나눗셈만 연산자가 없이 따돌림 당하고 있는 것일까? 이유가 조금 복잡한 이야기가 될 수 있지만, 여기서 소개하도록 한다.

샘플로 표 7-A와 7-B 두가지 테이블을 사용하도록 한다.

...
이 두개의 테이블을 만들고 데이터를 등록하는 SQL 문은 리스트 7-A와 같다.

리스트 7-A  Skills/empSkills 테이블 작성 및 데이터 등록
-- DDL
CREATE TABLE Skills
(skill VARCHAR(32),
 PRIMARY KEY(skill));

CREATE TABLE EmpSkills
(emp   VARCHAR(32),
 skill VARCHAR(32),
 PRIMARY KEY(emp, skill));

-- DML BEGIN TRANSACTION;

INSERT INTO Skills VALUES('Oracle');
INSERT INTO Skills VALUES('UNIX');
INSERT INTO Skills VALUES('Java');

INSERT INTO EmpSkills VALUES('사원1', 'Oracle');
INSERT INTO EmpSkills VALUES('사원1', 'UNIX');
INSERT INTO EmpSkills VALUES('사원1', 'Java');
INSERT INTO EmpSkills VALUES('사원1', 'C#');
INSERT INTO EmpSkills VALUES('사원2', 'Oracle');
INSERT INTO EmpSkills VALUES('사원2', 'UNIX');
INSERT INTO EmpSkills VALUES('사원2', 'Java');
INSERT INTO EmpSkills VALUES('사원3', 'UNIX');
INSERT INTO EmpSkills VALUES('사원3', 'Oracle');
INSERT INTO EmpSkills VALUES('사원3', 'PHP');
INSERT INTO EmpSkills VALUES('사원3', 'Perl');
INSERT INTO EmpSkills VALUES('사원3', 'C++');
INSERT INTO EmpSkills VALUES('사원4', 'Perl');
INSERT INTO EmpSkills VALUES('사원5', 'Oracle');

COMMIT;

EmpSkills 테이블은 어떤 시스템 회사의 사원이 가진 스킬 일람이다. 예를 들어, 사원1은 Oracle, UNIX, Java, C#이라는 네 가지 스킬을 가지고 있다는 것을 알 수 있다.
그러면 EmpSkills 테이블에서 Skills 테이블에 포함되어 있는 세 가지 분류의 스킬을 '모두' 가지고 있는 사원을 선택하는 경우를 생각해 보자(리스트 7-B)

리스트 7-B

SELECT DISTINCT emp
  FROM EmpSkills ES1
 WHERE NOT EXISTS
        (SELECT skill
           FROM Skills
         EXCEPT
         SELECT skill
           FROM EmpSkills ES2
          WHERE ES1.emp = ES2.emp);
>>
  emp
-------
 사원1
 사원2


얻을 수 있는 결과는 다음과 같이 사원1과 사원2, 두 명이다. 사원3도 Oracle과 UNIX를 사용할 수 있지만, Java를 사용할 수 없어서 제외된다.

나눗셈의 기본적인 동작은 이와 같지만, 여기서 당연히 '왜 이 연산을 나눗셈이라 하지?'라고 의문을 품는 독자가 있을 것이다. 실제로 숫자 나눗셈과 닮은 곳을 찾을 수 없다. 정답은 나눗셈의 반대 연산인 곱셈을 생각하면 알 수 잇다.

나눗셈과 곱셈은 보완적인 관계이기 때문에 나눗셈 결과(몫)와 나누는 수를 곱하면 나누기 전의 나뉨수로 돌아간다. 예를 들어, '20 % 4 = 5'의 경우, '5(몫) x 4(나누는 수) = 20(나뉨수)'가 된다(그림 7-A).

관계 나눗셈에도 이 법칙이 성립한다. 몫(나눗셈의 답)과 나누는 수를 곱함으로써(즉, 크로스 결합함으로써) 나뉨수(나누기 전의 수)의 부분 집합이 복원된다(주 7-6).

[주 7-6]
완전한 나뉨수가 되지는 않지만 여기서는 넘어가도록 한다.



나눗셈이란, 이와 같이 집합 연산 중에 가장 어려운 연산이다. 하지만 의외로 실무에 사용하는 경우가 많으며, 중급으로 올라가기 위해서는 꼭 마스터해야 할 기술이다.




181123
p.273
MYWAY 1)

1 ) First, do INNER JOIN between two tables, EmpSkills and Skills, to filter the skill in both tables.
SELECT a.emp, a.skill
FROM EmpSkills AS a
INNER JOIN Skills AS b
ON a.skill = b.skill;
>>
  emp  | skill
-------+--------
 사원1 | Oracle
 사원1 | UNIX
 사원1 | Java
 사원2 | Oracle
 사원2 | UNIX
 사원2 | Java
 사원3 | UNIX
 사원3 | Oracle
 사원5 | Oracle

2 ) Use GROUP BY & COUNT to find the person who have more than 3 skills.
SELECT emp, COUNT(a.skill)
FROM EmpSkills AS a
INNER JOIN Skills AS b
ON a.skill = b.skill
GROUP BY emp;
>>
  emp  | count
-------+-------
 사원1 |     3
 사원3 |     2
 사원5 |     1
 사원2 |     3

3 ) USE HAVING clause to select the person
SELECT emp
FROM EmpSkills AS a
INNER JOIN Skills AS b
ON a.skill = b.skill
GROUP BY emp
HAVING COUNT(a.skill) >= 3;
>>
  emp
-------
 사원1
 사원2


181123
MYWAY 2)
1 ) Find the skills that we don't want to consider.
SELECT skill
FROM EmpSkills
EXCEPT
SELECT skill
FROM Skills;
>>
 skill
-------
 C#
 C++
 PHP
 Perl

2 ) Exclude the record of which have the skills above.
SELECT *
FROM EmpSkills
WHERE skill NOT IN (
	SELECT skill
	FROM EmpSkills
	EXCEPT
	SELECT skill
	FROM Skills
);

SELECT *
FROM EmpSkills AS a
WHERE NOT  EXISTS (
	SELECT skill
	FROM EmpSkills AS b
	EXCEPT
	SELECT skill
	FROM Skills
	WHERE a.emp = b.emp
);

>>
  emp  | skill
-------+--------
 사원1 | Oracle
 사원1 | UNIX
 사원1 | Java
 사원2 | Oracle
 사원2 | UNIX
 사원2 | Java
 사원3 | UNIX
 사원3 | Oracle
 사원5 | Oracle


3 ) Use GROUP BY and HAVING clause to find the result
SELECT emp
FROM EmpSkills
WHERE skill NOT IN (
	SELECT skill
	FROM EmpSkills
	EXCEPT
	SELECT skill
	FROM Skills)
GROUP BY emp
HAVING count(skill) >= 3;
>>
  emp
-------
 사원1
 사원2



p.332
7.1
>> 해설
'UNION과 INTERSECT를 동시에 사용하면 INTERSECT가 먼저 실행'된다고 생각한 사람도 있을 것이다. 물론, 실행 순서는 INTERSECT부터이다.

7.2
리스트 7-11에서 얻은 외부 결합 결과에서는 압력솥과 볼펜의 점포ID(store_id)와 점포명(store_name)이 NULL로 출력되었다. 이 NULL을 '불명확'이라는 무자열로 바꾼 결과를 구해 보자. 결과는 다음과 같은 형태로 출력되어야 한다.


SELECT COALESCE(TS.store_id, '불명확')  AS store_id,
       COALESCE(TS.store_name, '불명확') AS store_name,
       S.goods_id,
       S.goods_name,
       S.sell_price
  FROM StoreGoods TS RIGHT OUTER JOIN Goods S
    ON TS.goods_id = S.goods_id
ORDER BY store_id;
>>
 coalesce | coalesce | goods_id | goods_name | sell_price
----------+----------+----------+------------+------------
 000A     | 서울     | 0002     | 펀칭기     |        500
 000A     | 서울     | 0003     | 와이셔츠   |       4000
 000A     | 서울     | 0001     | 티셔츠     |       1000
 000B     | 대전     | 0006     | 포크       |        500
 000B     | 대전     | 0002     | 펀칭기     |        500
 000B     | 대전     | 0003     | 와이셔츠   |       4000
 000B     | 대전     | 0004     | 식칼       |       3000
 000B     | 대전     | 0007     | 도마       |        880
 000C     | 부산     | 0006     | 포크       |        500
 000C     | 부산     | 0007     | 도마       |        880
 000C     | 부산     | 0003     | 와이셔츠   |       4000
 000C     | 부산     | 0004     | 식칼       |       3000
 000D     | 대구     | 0001     | 티셔츠     |       1000
 불명확   | 불명확   | 0005     | 압력솥     |       6800
 불명확   | 불명확   | 0008     | 볼펜       |        100


