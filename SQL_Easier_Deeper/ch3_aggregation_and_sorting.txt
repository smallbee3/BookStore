[SQL더쉽게]  Ch3 집계와 정렬

p.77
[3-1  집계 함수] 
학습 포인트
	•	집계 함수는 기본적으로 NULL을 제외하고 집계한다.  (단, COUNT의 경우는 COUNT(*)로 지정했을 때 NULL을 포함한 모든 행을 집계한다.)
	•	중복값을 제외하고 집계하려면 DISTINCT 키워드를 사용한다.


p.77  3-1
집약 함수 (집합 함수, 집계 함수, 그룹 함수)
: 복수의 행을 입력 데이터로 받으며, 출력 하는 데이터는 단일 행이다.

COUNT	: 테이블 레코드 수(행 수)를 게산한다.
SUM 	: 숫자열 데이터의 합계를 구한다.
AVG		: 숫자열 데이터의 평균을 구한다.
MAX		: 임의 열이 가진 데이터의 최댓값을 구한다.
MIN		: 임의 열이 가진 데이터의 최솟값을 구한다.


p.79
NULL을 제외하고 행 수를 계산하고 싶은 경우는 리스트 3-2처럼 대상 열을 한정해서 인수로 지정하면 된다.

LIST 3-2
SELECT COUNT(buy_price)
    FROM Goods;



p.80
이와 같이 COUNT 함수는 인수에 따라 처리 결과가 달라지기 때문에 주의가 필요하다.
이것을 알기 쉽게 나타내기 위해 그림 3-3처럼 NULL만 있는 극단적인 테이블을 생각할 수 있다. ...
열명을 인수로 지정하면 NULL을 제외하고 계산하기 때문에 결과가 '0행'이 된다.
이 특성은 COUNT 함수에만 해당되는 것으로, 다른 함수는 별표 자체를 인수로 지정할 수 없다.(에러가 된다.)

e.g.
CREATE TABLE NullTbl
(col_1 INTEGER);

INSERT INTO NullTbl VALUES (NULL);
INSERT INTO NullTbl VALUES (NULL);
INSERT INTO NullTbl VALUES (NULL);

SELECT COUNT(*), COUNT(col_1)
  FROM NullTbl;

 count  | count
-------+-------
     3     |     0


e.g. (2)
SELECT buy_price, COUNT(*)
  FROM Goods
 GROUP BY buy_price;
>>
 buy_price | count
-----------+-------
	           |     2
       320	   |     1
       500 	   |     1
      2800 	   |     2
      5000 	   |     1
       790      |     1

SELECT buy_price, COUNT(buy_price)
  FROM Goods
 GROUP BY buy_price;
>>
 buy_price | count
-----------+-------
	           |     0
       320	   |     1
       500 	   |     1
      2800 	   |     2
      5000 	   |     1
       790      |     1



p.81
[ ! ] 3-1
COUNT 함수는 인수에 따라 그 결과가 달라진다. COUNT(*)는 NULL을 포함하는행 수를, COUNT(열명)는 NULL을 제외한 행 수를 계산한다.



p.82
'사칙연산에 NULL이 포함된 경우 결과는 무조건 NULL이 되어야 한다. 그렇다면 매입단가의 합계도 NULL이 되야 하는 게 아닌가?'
이런 모순을 느꼈다면 매우 예리한 독자라 할 수 있지만, 사실 아무 문제가 없는 계산이다.
결론부터 말하면, 모든 집약 함수는 열명을 인수로 가질 때 계산 전에 NULL을 제한다. 따라서 NULL이 몇 개가 있든 모두 무시되는 것이다. 그렇다고 '0과 같다'고도 할 수없다.



p.85
MAX/MIN 함수에는 SUM/AVG 함수와 다른 점이 한 가지 있다. 그것은 SUM/AVG 함수가 숫자형 열만 이용할 수 있다면, MAX/MIN 함수는 원칙상 어떤 데이터형도 사용할 수 있다는 점이다. ...
앞서 '어떤 데이터형 열에도 사용할 수 있다'고 했는데, 다시 말하면 순서를 정할 수 있는 데이터라면 최댓값과 최솟값도 자연스럽게 정해지기 때문에 두 가지 함수 모두 적용할 수 있는 것이다.
반면, 날짜의 경우는 평균값과 합계가 의미가 없기 때문에 SUM/AVG 함수를 적용할 수 없다. 이것은 문자형도 마찬가지로 SUM/AVG 함수를 적용할 수 없다.

[ ! ] 3-3
MAX/MIN함수는 거의 모든 데이터형에 적용할 수 있다. SUM/AVG 함수는 숫자형 데이터만 가능하다.


p.87
[ ! ] 3-4
값의 종류를 세고 싶을 때는 COUNT 함수의 인수에 DISTINCT를 사용하면 된다.



p.86
DISTINCT는 반드시 괄호 안에 기술해야 한다. 왜냐하면 먼저 goods_classify 열의 중복값을 제외한 후에 행 수를 계산하고 있기 때문이다. 만약 리스트 3-11처럼 괄호 밖에 쓰면 먼저 goods_classify 열의 행 수를 센 후에 결과에서 중복값을 제외하게 되서 결과는 goods_classify 열의 전체 행 수가 된다.

e.g.
SELECT COUNT(DISTINCT goods_classify)
  FROM Goods;
>>
count
-------
     3


SELECT DISTINCT COUNT(goods_classify)
  FROM Goods;
>>
 count
-------
     8


p.87
DISTINCT는 COUNT 함수뿐만 아니라 집약 함수라면 어디든지 사용할 수 있다.

e.g.
SELECT SUM(sell_price), SUM(DISTINCT sell_price)
  FROM Goods;

  sum  |  sum
-------+-------
 16780 | 16280


p.88
[3-2  GROUP BY] 
학습 포인트
	•	집약 키에 NULL이 포함되면 집계 결과에도 공란으로 표현된다.
	•	집약 함수와 GROUP BY 구를 사용할 때는 다음 네 가지 사항을 주의해야 한다. 1. SELECT 구에 기술할 수 있는 것이 제한된다. 2. GROUP BY 구에는 SELECT 구에서 사용한 별명을 사용할 수 없다. 3. GROUP BY 구는 집약 결과를 정렬하지 않는다. 4. WHERE 구에 집약 함수를 쓸 수 없다.


p.89
GROUP BY 구에 지정하는 열을 집약 키 또는 그룹화 열이라고 부른다.
SELECT 구와 마찬가지로 GROUP BY 구에도 복수의 열을 쉼표 구분으로 지정할 수 있다.


p.90
* 집약 키에 NULL이 포함된 경우
문제는 가장 윗 행, 즉 매입단가가 NULL인 그룹이다. 이 결과를 통해 알 수 있듯이, 집약 키에 NULL이 포함되는 경우는 'NULL' 이라는 별도 그룹으로 분류된다.

e.g.
SELECT buy_price, COUNT(*)
  FROM Goods
 GROUP BY buy_price;

 buy_price  | count
-----------+-------
                   |     2
       320     |     1
       500     |     1
      2800    |     2
      5000    |     1
       790     |     1


[ ! ] 3-8
집약 키에 NULL이 포함된 경우는 결과에도 '불명'행(공란)으로 존재한다.



p.90
구 작성 순서
1. SELECT -> 2. FROM -> 3. WHERE -> 4. GROUP BY

p.93
(GROUP BY/WHERE 구를 병용할 때) SELECT 문 실행순서
1. FROM -> 2. WHERE -> 3. GROUP BY -> 4. SELECT



p.93
* 집계 함수와 GROUP BY 구를 사용할 때 자주하는 실수

1 ) SELECT 구에 필요 없는 열을 쓴다.
집계 함수를 사용할 때는 다음 세 가지만 SELECT 구에 기술할 수 있다.
	•	상수
	•	집약 함수
	•	GROUP BY 구에서 지정할 열(즉, 집약 키)


p.95
[ ! ] 3-9
GROUP BY 구를 사용할 대는 SELECT 구에 집약 키 외의 열명을 쓸 수 없다.


p.94
집약 키 이외의 열명을 SELECT 구에 사용하는 것이다.
이 구문이 허용되지 않는 이유는 생각해 보면 바로 알 수 있다. 어떠한 키를 사용해서 그룹화하고 싶다는 것은 결과에 출력되는 1행에 해당하는 단위도 해당 그룹이 되기 때문이다. 예를 들어, 매입단가로 그룹화하면 1행에 한 개의 매입단가가 출력된다. 문제는 이 집약 키와 상품명이 반드시 일대일로 대응하지 않는다는 점이다. 예를 들어, 매입 단가가 2800원인 상품은 '와이셔츠'와 '식칼'인데, 2800원 행에 어느 상품을 표시하면 될까? 어느 쪽을 우선해서표시한다는 규칙이 있다면 좋지만, 그런 규칙은 없다.

e.g.
SELECT goods_name, buy_price, COUNT(*)
  FROM Goods
 GROUP BY buy_price;
ERROR:  column "goods.goods_name" must appear in the GROUP BY clause or be used in an aggregate function


p.94
단, MySQL만은 이 구문을 인정하고 있어서 에러 없이 실행된다 (복수의 후보 중에 적합한 하나만 빼내고 있다) 하지만 MySQL 이외의 DBMS에서는 사용할 수 없기 때문에 이런 작성법은 피하도록 하자.

```
* 참고로 MySQL은 GROUP BY clause로 order by 했을 때 가장 마지막에 있는 행에 있는 필드 값이 표시된다.
```


p.103
+ (Reason 2)
이런 생각 방식은 GROUP BY를 사용한 SELECT 문에도 동일하게 적용된다. 집약 후 테이블에는 이미 goods_name이라는 열이 존재하지 않는다. 테이블에 없는 열을 지정하는 것은 SQL에서 불가능하다.




p.95
2 ) GROUP BY 구에 별명을 쓴다

... 이유는 앞서 설명한 것 같이 DBMS 내부 실행 순서상 SELECT 구가 GROUP BY 구보다 뒤에 실행되기 때문이다. 이 때문에 GROUP BY가 실행되는 시점에서는 SELECT 구에서 부여한 별명을 DBMS가 아직 인식하지 못하는 것이다.
(참고로 PostgreSQL은 에러가 발생하지 않고 다음고 같은 결과가 출력된다. 하지만 이 구문은 다른 DBMS에서는 통하지 않기 때문에 사용하지 않도록 하자.)


p.96
3 ) GROUP BY 구는 결과의 순서를 정렬하지 않는다
...
정답은 무작위다.
결과 레코드의 순서가 어떤 규칙을 따르고 있는지 알 수 없다.


p.96
4 ) WHERE 구에 집계 함수를 사용한다
사실 COUNT 등의 집계 함수를 사용할 수 있는 곳은 SELECT 구와 HAVING 구, ORDER BY 구 뿐이다.

[ ! ] 3-12
집계 함수를 사용할 수 있는 곳은 SELECT 구와 HAVING 구, ORDER BY 구 뿐이다.


p.98
[COLUMN]
DISTINCT와 GROUP BY
	•	DISTINCT와 GROUP BY는 뒤에 기술하는 열에 대해 중복을 배제한다는 점에서 동일한 처리를 한다.

-- DISTINCT
SELECT DISTINCT goods_classification
  FROM Goods;

-- GROUP BY
SELECT goods_classification
  FROM Goods
 GROUP BY goods_classification;

 goods_classification
----------------------
 의류
 사무용품
 주방용품

	•	NULL을 하나의 행으로 간주하는 것도 동일
	•	복수 열을 사용하는 경우 결과 동일
	•	실행 속도도 거의 동일


p.98
...
그렇게 생각하면 이 칼럼에서 소개한 'COUNT'등의 집계 함수를 사용하지 않고 GROUP BY 구만을 사용한다'는 것은 의미상 이상할 수가 있다. 무엇을 위해 그룹화하는 것인지 그 필요성 자체가 불분명해지기 때문이다.



p.99
[3-3 HAVING] 
학습 포인트
	•	WHERE 구에는 '레코드(행)에 대한 조건을 지정'하고, HAVING 구에는 '그룹에 대한 조건을 지정'하기 때문에 사용 목적에 따라 나누어 사용한다.



p.100
(HAVING 구를 사용하는 경우)
SELECT 문 실행순서
SELECT -> FROM -> WHERE -> GROUP BY -> HAVING


p.102
* HAVING 구에 쓸 수 있는 요소

	•	상수
	•	집계 함수
	•	GROUP BY 구에 지정한 열명(즉, 집약 키)

리스트 3-20에 표시한 예문에서는 'HAVING COUNT(*) = 2'라고 되어 있지만, COUNT(*)는 집계 함수, 2는 상수이기 때문에 이 규칙을 지키고 있는 것이다.
반대로, 아래와 같이 쓰면 에러가 된다.

SELECT goods_classification, COUNT(*)
  FROM Goods
 GROUP BY goods_classification
HAVING goods_name = '볼펜';
ERROR:  column "goods.goods_name" must appear in the GROUP BY clause or be used in an aggregate function


goods_name이라는 열은 GROUP BY 구에 포함되어 있지 않기 때문에 HAVING 에 사용할 수 없다. HAVING 구를 사용할 때는 '한번 집약이 끝난 단계를 출발점으로 하고 있다'고 생각하면 이해하기 쉽다.


이런 생각 방식은 GROUP BY를 사용한 SELECT 문에도 동일하게 적용된다. 집약 후 테이블에는 이미 goods_name이라는 열이 존재하지 않는다. 테이블에 없는 열을 지정하는 것은 SQL에서 불가능하다.



p.103
* HAVING 구보다 WHERE 구에 쓰는 것이 좋은 조건

HAVING 구에도 WHERE 구에도 쓸 수 있는 조건이라는 것이 있다. 그것은 '집약 키에 대한 조건'이다.
...
하지만 필자는 두 가지 이유로 이런 집약 키에 대한 조건은 WHERE 구에 써야 한다고 생각한다.
첫 번째는 WHERE 구와  HAVING 구의 역할이 근본적으로 다르다는 데 있다. HAVNG 구는 '그룹'에 대해서 조건을 지정하는 것이다. 따라서 단순히 '행'에 대한 조건은 WHERE 구에 씀으로써 상호 기능을 확실히 분리해서 읽기 쉬운 코드를 만든다.

WHERE clause - 행에 대한 조건 지정
HAVING clause - 그룹에 대한 조건 지정

다른 한 가지 이유는 DBMS 내부 처리에 관한 것이다. ... 관련 내용은 다음 칼럼에서 다루도록 할 것이다.


p.105
[COLUMN]
WHERE 구와 HAVING 구의 실행속도

1 ) 일반적으론 HAVING 구보다 WHERE 구에 조건을 기술하는 것이 처리 속도가 빠르며, 결과를 반환하는 시간도 짧다.
COUNT 함수 등 집계 함수등을 사용할 때 DBMS 내부에서는 '소트(정렬)'라고 하는 행 재정렬이 이루어진다. 이 소트 처리는 큰 부하가 걸리는 무거운 처리다.
WHERE 구를 사용해서 조건을 지정하면 소트 전에 행을 걸러내기 때문에 소트 대상 행 수를 줄일 수 있다. 반면, HAVING 구는 소트가 끝난 후 그룹화되고 나서 실행되기 때문에 WHERE 구보다 행 수가 많다.

2 ) 그리고 WHERE 구가 속도 측면에서 유리한 또 하나의 이유는 WHERE 구에서 조건으로 지정하는 열에 '색인(Index, 인덱스)'을 작성함으로써 처리를 큰 폭으로 고속화 할 수 있다. 이 색인이란 기술은 DBMS 성능 향상 방법으로 매우 자주 사용되며, 효과도 무척 좋기 때문에 WHERE 구에서 있어선 매우 유리한 재료가 된다.


p.106
[3-4  ORDER BY] 
학습 포인트
	•	소트키에 NULL이 포함되어 있는 경우는 맨 앞 또는 맨 뒤에 놓인다. (postgreSQL에서는 맨 뒤로 놓임)
	•	ORDER BY 구에서는 SELECT 구에서 부여한 별명을 사용할 수 없다.
	•	ORDER BY 구에서는 SELECT 구에 포함되지 않은 열과 집약 함수를 사용할 수 있다.
	•	ORDER BY 구에 열 번호를 사용해서는 안 된다.


p.108
이 ORDER BY 구는 어떠한 경우라도 SELECT 문 제일 마지막에 기술한다. 왜냐하면 행을 재 정렬(소트)하는 처리는결과를 반환하기 직전에 이루어져야 하기 때문이다. ORDER BY 구에 쓰는 열명을 '소트 키(sort key)'라고 한다.


p.108
구 작성 순서
1. SELECT -> 2. FROM -> 3. WHERE -> 4. GROUP BY -> 5. HAVING -> 6. ORDER BY


p.109
* 복수의 소트 키를 지정한다
만약 같은 순위 상품들에 대해서도 정렬 순서를 지정하고 싶다면 소트 키를 하나 더 추가해야 한다.


p.111
* 소트 키에 표시용 별명을 사용한다
GROUP BY 구에서는 사용할 수 없는 별명을 ORDER BY 구에서는 사용할 수 있는 것일까? 그 이유는 DBMS 내부에서 이루어지는 SQL 실행 순서와 관련있다.

[ ! ] 3-18
ORDER BY 구에서는 SELECT 구에서 부여한 별명을 이용할 수 있다.

p.100
SELECT 문 실행순서
FROM -> WHERE -> GROUP BY -> HAVING -> SELECT -> ORDER BY


p.113
[ ! ] 3-18
ORDER BY 구에서는 SELECT 구에 포함되지 않은 열이나 집약 함수도 사용할 수 있다.


p.114
* 열 번호를 사용해서는 안 된다
ORDER BY 구에서는 SELECT 구에 있는 열을 참조하는 열 번호를 사용할 수 있다. 열 번호, SELECT 구에서 지정한 열을 왼쪽부터 1, 2, 3 ⋅⋅⋅ 으로 순번을 부여한 번호다.

e.g.
-- 열명으로 지정
SELECT goods_id, goods_name, sell_price, buy_price
  FROM Goods
ORDER BY sell_price DESC, goods_id;

-- 열 번호로 지정
SELECT goods_id, goods_name, sell_price, buy_price
  FROM Goods
ORDER BY 3 DESC, 1;

열 번호로 지정하는 방법은 열명을 일일이 쓰지 않아도 된다는 측면에서 매우 편리하지만, 다음 두 가지의 이유로 사용을 피해야 한다.
첫 번째 이유는 코드가 읽기 어려워진다는 문제가 있다.
두 번째 이유는 보다 근본적인 문제다. 사실 이 열 번호 기능은 SQL-92에서 '장래에 배제해야 할 기능' 목록에 올라가 있다.



